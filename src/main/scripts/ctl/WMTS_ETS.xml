<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
  xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml">

  <ctl:suite name="wmts:server.suite.base">		
    <ctl:title>WMTS 1.0 Server Compliance Test Suite Base</ctl:title>
    <ctl:description>Verifies that a WMTS 1.0 server implementation complies with a given conformance classes.</ctl:description>
    <ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html</ctl:link>		
    <ctl:defaultResult>Pass</ctl:defaultResult>
    <ctl:starting-test>wmts:main</ctl:starting-test>
  </ctl:suite>

  <ctl:test name="wmts:main"  type="Mandatory">
    <ctl:param name="capabilities.url" />
    <ctl:context>wmts:server.suite.base</ctl:context>
    <ctl:assertion>The server returns a valid Capabilities document from a KVP GET or RESTful request, to support further tests in one or more profiles.</ctl:assertion>
    <ctl:code>
      <ctl:call-function name="ctl:startStopwatch">
        <ctl:with-param name="watchName">wmts.main</ctl:with-param>
      </ctl:call-function>
      <xsl:variable name="mode">
        <ctl:getMode/>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$mode = 'Redo From Cache Mode' ">
          <!-- get cached elements from previous log, and save them in current log for future reuse -->
          <ctl:message>Mode is <xsl:value-of select="$mode"/> - reuse Bootstrap Capabilities and other elements from cache.</ctl:message>
          <xsl:variable name="wmts.capabilities.doc">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">capabilities</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="wmtsSchemaPath">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">wmtsSchemaPath</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="wmts.capabilities.url">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">url</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="bootstrap.kvp.get">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">bootstrapkvpget</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="bootstrap.kvp.post">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">bootstrapkvppost</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="bootstrap.xml.post">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">bootstrapxmlpost</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="bootstrap.soap.post">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">bootstrapsoappost</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>
          <xsl:variable name="bootstrap.restful">
            <ctl:call-function name="ctl:getLogCache">
              <ctl:with-param name="id">bootstraprestful</ctl:with-param>
            </ctl:call-function>
          </xsl:variable>

          <xsl:if test="$bootstrap.kvp.get">
            <ctl:call-function name="ctl:putLogCache">
              <ctl:with-param name="id">bootstrapkvpget</ctl:with-param>
              <ctl:with-param name="xmlToCache">
                <xsl:copy-of select="$bootstrap.kvp.get" />
              </ctl:with-param>
            </ctl:call-function>
          </xsl:if>

          <xsl:if test="$bootstrap.kvp.get">
            <ctl:call-function name="ctl:putLogCache">
              <ctl:with-param name="id">bootstrapkvppost</ctl:with-param>
              <ctl:with-param name="xmlToCache">
                <xsl:copy-of select="$bootstrap.kvp.post" />
              </ctl:with-param>
            </ctl:call-function>
          </xsl:if>

          <xsl:if test="$bootstrap.xml.post">
            <ctl:call-function name="ctl:putLogCache">
              <ctl:with-param name="id">bootstrapxmlpost</ctl:with-param>
              <ctl:with-param name="xmlToCache">
                <xsl:copy-of select="$bootstrap.xml.post" />
              </ctl:with-param>
            </ctl:call-function>
          </xsl:if>

          <xsl:if test="$bootstrap.soap.post">
            <ctl:call-function name="ctl:putLogCache">
              <ctl:with-param name="id">bootstrapsoappost</ctl:with-param>
              <ctl:with-param name="xmlToCache">
                <xsl:copy-of select="$bootstrap.soap.post" />
              </ctl:with-param>
            </ctl:call-function>
          </xsl:if>

          <xsl:if test="$bootstrap.restful">
            <ctl:call-function name="ctl:putLogCache">
              <ctl:with-param name="id">bootstraprestful</ctl:with-param>
              <ctl:with-param name="xmlToCache">
                <xsl:copy-of select="$bootstrap.restful" />
              </ctl:with-param>
            </ctl:call-function>
          </xsl:if>

          <xsl:choose>
            <xsl:when test="$wmts.capabilities.doc and $wmtsSchemaPath and $wmts.capabilities.url">
              <ctl:message>Retrieved bootstrap wmts.capabilities.doc and other cached elements from cache</ctl:message>
              <ctl:call-function name="ctl:putLogCache">
                <ctl:with-param name="id">capabilities</ctl:with-param>
                <ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmts.capabilities.doc"/></ctl:with-param> 
              </ctl:call-function>
              <ctl:call-function name="ctl:putLogCache">
                <ctl:with-param name="id">wmtsSchemaPath</ctl:with-param>
                <ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmtsSchemaPath"/></ctl:with-param> 
              </ctl:call-function>
              <ctl:call-function name="ctl:putLogCache">
                <ctl:with-param name="id">url</ctl:with-param>
                <ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmts.capabilities.url"/></ctl:with-param> 
              </ctl:call-function>
              <ctl:message>Continuing with selected profile(s) ...</ctl:message>
              <ctl:message select="'********************************************************'"/>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message>[FAILURE] Failed to retrieve bootstrap wmts.capabilities.doc or other cached element from cache - you must start a new test session.</ctl:message>
              <ctl:fail/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <ctl:message>Mode is <xsl:value-of select="$mode"/> - get Capabilities Document, validate it, check Bootstrap Prerequisites, get Test Selections.</ctl:message>	
          <!-- global wmts schema settings -->
          <xsl:variable name="schemaRoot">
            <xsl:choose>
              <xsl:when test="te:isWeb() = 'true' ">
                <xsl:text>xsd/ogc/</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>xsd/ogc/</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <!-- change schemaRoot to http://schemas.opengis.net/ once TileMatrixLimits schema errors are fixed
				   <xsl:variable name="schemaRoot">http://schemas.opengis.net/</xsl:variable>  -->
          <xsl:variable name="schemaEncoding">wmts</xsl:variable>
          <xsl:variable name="schemaVersion">1.0</xsl:variable>
          <xsl:variable name="schemaFilename">wmts.xsd</xsl:variable>
          <xsl:variable name="wmtsSchemaPath" select="ctlFunctions:schemaPath($schemaRoot, $schemaEncoding, $schemaVersion, $schemaFilename)"/>

          <ctl:call-function name="ctl:putLogCache">  <!-- for use in profiles and Redo From Cache Mode -->
            <ctl:with-param name="id">wmtsSchemaPath</ctl:with-param>
            <ctl:with-param name="xmlToCache"><wmtsSchemaPath><xsl:value-of select="$wmtsSchemaPath"/></wmtsSchemaPath></ctl:with-param> 
          </ctl:call-function>

          <xsl:variable name="wmts.capabilities.url">
            <xsl:choose>
              <xsl:when test="string-length($capabilities.url) gt 0">
                <xsl:value-of select="$capabilities.url" />
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="form-values"> 
                  <ctl:form method="POST" width="800" height="600" xmlns="http://www.w3.org/1999/xhtml">
                    <h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server</h2>
                    <div style="background:#F0F8FF" bgcolor="#F0F8FF">
                      <p>This test suite is primarily based on the following documents:</p>
                      <ul>
                        <li><a href="http://portal.opengeospatial.org/files/?artifact_id=35326" target="_blank">OGC 07-057r7</a>: 
                  OpenGIS Web Map Tile Service Implementation Standard, Version 1.0.0</li>
                        <li><a href="WMTS%201.0%20ATS.html" target="_blank">Abstract Test Suite for WMTS 1.0</a></li>
                      </ul>
                    </div>
                    <fieldset style="background:#ccffff">
                      <legend style="font-family: sans-serif; color: #000099; background-color:#F0F8FF; border-style: solid; 
                border-width: medium; padding:4px">Implementation under test</legend>
                      <p>
                        <label for="capabilities-url">
                          <h4 style="margin-bottom: 0.5em">WMTS service capabilities (http: or file: URI)</h4>
                        </label>
                        <input id="capabilities-url" name="capabilities-url" size="128" type="text" value="" />
                      </p>
                      <p>
                        <label for="capabilities-doc">
                          <h4 style="margin-bottom: 0.5em">Upload WMTS capabilities document</h4>
                        </label>
                        <input id="capabilities-doc" name="capabilities-doc" size="128" type="file" />
                      </p>
                    </fieldset>
                    <p>
                      <input class="form-button" type="submit" value="Start"/> | 
                      <input class="form-button" type="reset" value="Clear"/>
                    </p>
                  </ctl:form>
                </xsl:variable>
                <xsl:variable name="capabilities-file" select="$form-values//value[@key='capabilities-doc']/ctl:file-entry/@full-path" />
                <xsl:choose>
                  <xsl:when test="empty($capabilities-file)">
                    <xsl:value-of select="$form-values//value[@key='capabilities-url']" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('file:///', $capabilities-file)" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>

          <ctl:call-function name="ctl:putLogCache"> <!-- for use in profiles and Redo From Cache Mode -->
            <ctl:with-param name="id">url</ctl:with-param>
            <ctl:with-param name="xmlToCache"><url><xsl:value-of select="$wmts.capabilities.url"/></url></ctl:with-param> 
          </ctl:call-function>

          <xsl:variable name="wmts.capabilities.doc.response">
            <ctl:request>
              <ctl:url>
                <xsl:value-of select="$wmts.capabilities.url"/>
              </ctl:url>
              <ctl:method>get</ctl:method>
              <parsers:HTTPParser/>
            </ctl:request>
          </xsl:variable>

          <xsl:choose>
            <xsl:when test="not($wmts.capabilities.doc.response/*)">
              <ctl:message>FAILURE: Missing capabilities document.</ctl:message>
              <ctl:fail/>
            </xsl:when>
            <xsl:when test="not(contains($wmts.capabilities.doc.response//header[matches(@name,'^Content-Type$','i')],'/xml'))">
              <ctl:message>FAILURE: Not an XML content type: '<xsl:value-of select="$wmts.capabilities.doc.response//header[@name='Content-Type']"/>'</ctl:message>
              <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="responseTime" select="$wmts.capabilities.doc.response/response/comment()"/>
              <ctl:message>Capabilities Document <xsl:value-of select="$responseTime"/></ctl:message>
              <xsl:variable name="lastModified" select="$wmts.capabilities.doc.response/response/headers/header[@name='Last-Modified']"/>
              <ctl:message>lastModified <xsl:value-of select="$lastModified"/></ctl:message>
              <xsl:variable name="wmts.capabilities.doc" select="$wmts.capabilities.doc.response/response/content"/>
              <xsl:choose>
                <xsl:when test="not($wmts.capabilities.doc//wmts:Capabilities)">
                  <ctl:message>FAILURE: Did not receive a wmts:Capabilities document! Skipping remaining tests.</ctl:message>	
                  <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                  <ctl:message>NOT Validating Capabilities Document against its XML Schema... FOR DEVELPMENT, CHANGE ME</ctl:message> 
                  <!-- <ctl:message>Validating Capabilities Document against its XML Schema...</ctl:message> -->

                  <ctl:call-function name="ctl:startStopwatch">
                    <ctl:with-param name="watchName">capabilities.validation</ctl:with-param>
                  </ctl:call-function>

                  <!-- CHANGE ME to disable schema validation during development 	-->
                  <xsl:variable name="results">
                    <!--			<ctl:call-function name="ctlFunctions:XMLschemaValidate">
											<ctl:with-param name="doc"><xsl:copy-of select="$wmts.capabilities.doc/*"/></ctl:with-param>
											<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
										</ctl:call-function> -->
                  </xsl:variable>

                  <xsl:variable name="capabilities.validation.elapsed" select="ctl:elapsedTime('capabilities.validation')"/>
                  <xsl:choose>
                    <xsl:when test="not(true())"> <!-- uncomment me for development 
										<xsl:when test="count($results/*) &gt; 0"> CHANGE ME-->
                      <ctl:message>Capabilities document failed schema validation; capabilities.validation.elapsed [<xsl:value-of select="$capabilities.validation.elapsed"/>] milliseconds</ctl:message>
                      <ctl:message>[FAILURE] results: <xsl:copy-of select="$results"/></ctl:message>
                      <ctl:fail/> 
                    </xsl:when>
                    <xsl:otherwise>
                      <ctl:message>capabilities.validation.elapsed [<xsl:value-of select="$capabilities.validation.elapsed"/>] milliseconds</ctl:message>											

                      <ctl:call-function name="ctl:putLogCache"> <!-- for use in profiles and Redo From Cache Mode -->
                        <ctl:with-param name="id">capabilities</ctl:with-param>
                        <ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmts.capabilities.doc/*"/></ctl:with-param> 
                      </ctl:call-function>

                      <ctl:message>Capabilities response is valid, continuing with selected profile(s) ...</ctl:message>
                      <ctl:message select="'********************************************************'"/>

                      <!-- change wmtsSchemaType to string('url') once TileMatrixLimits schema errors are fixed -->
                      <xsl:variable name="wmtsSchemaType" select="string('resource')"/>

                      <xsl:variable name="bootstrap.kvp.get">
                        <ctl:call-function name="wmtsBootstrap:bootstrap.kvp.get">
                          <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
                          <ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
                          <ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
                        </ctl:call-function>
                      </xsl:variable>
                      <ctl:call-function name="ctl:putLogCache">
                        <ctl:with-param name="id">bootstrapkvpget</ctl:with-param>
                        <ctl:with-param name="xmlToCache">
                          <xsl:copy-of select="$bootstrap.kvp.get" />
                        </ctl:with-param>
                      </ctl:call-function>

                      <xsl:variable name="bootstrap.kvp.post">
                        <ctl:call-function name="wmtsBootstrap:bootstrap.kvp.post">
                          <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
                          <ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
                          <ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
                        </ctl:call-function>
                      </xsl:variable>
                      <ctl:call-function name="ctl:putLogCache">
                        <ctl:with-param name="id">bootstrapkvppost</ctl:with-param>
                        <ctl:with-param name="xmlToCache">
                          <xsl:copy-of select="$bootstrap.kvp.post" />
                        </ctl:with-param>
                      </ctl:call-function>

                      <xsl:variable name="bootstrap.xml.post">
                        <ctl:call-function name="wmtsBootstrap:bootstrap.xml.post">
                          <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
                          <ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
                          <ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
                        </ctl:call-function>
                      </xsl:variable>
                      <ctl:call-function name="ctl:putLogCache">
                        <ctl:with-param name="id">bootstrapxmlpost</ctl:with-param>
                        <ctl:with-param name="xmlToCache">
                          <xsl:copy-of select="$bootstrap.xml.post" />
                        </ctl:with-param>
                      </ctl:call-function>

                      <xsl:variable name="bootstrap.soap.post">
                        <ctl:call-function name="wmtsBootstrap:bootstrap.soap.post">
                          <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
                          <ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
                          <ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
                        </ctl:call-function>
                      </xsl:variable>
                      <ctl:call-function name="ctl:putLogCache">
                        <ctl:with-param name="id">bootstrapsoappost</ctl:with-param>
                        <ctl:with-param name="xmlToCache">
                          <xsl:copy-of select="$bootstrap.soap.post" />
                        </ctl:with-param>
                      </ctl:call-function>

                      <xsl:variable name="bootstrap.restful">
                        <ctl:call-function name="wmtsBootstrap:bootstrap.restful">
                          <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
                          <ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
                          <ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
                        </ctl:call-function>
                      </xsl:variable>
                      <ctl:call-function name="ctl:putLogCache">
                        <ctl:with-param name="id">bootstraprestful</ctl:with-param>
                        <ctl:with-param name="xmlToCache">
                          <xsl:copy-of select="$bootstrap.restful" />
                        </ctl:with-param>
                      </ctl:call-function>

                      <ctl:call-test name="wmts:CommonOperations.main">
                        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
                        <ctl:with-param name="bootstrap.kvp.get" select="$bootstrap.kvp.get" />
                        <ctl:with-param name="bootstrap.kvp.post" select="$bootstrap.kvp.post" />
                        <ctl:with-param name="bootstrap.xml.post" select="$bootstrap.xml.post" />
                        <ctl:with-param name="bootstrap.soap.post" select="$bootstrap.soap.post" />
                        <ctl:with-param name="bootstrap.restful" select="$bootstrap.restful" />
                      </ctl:call-test>

                      <ctl:call-test name="wmts:GetCapabilities.main">
                        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
                        <ctl:with-param name="bootstrap.kvp.get" select="$bootstrap.kvp.get" />
                        <ctl:with-param name="bootstrap.kvp.post" select="$bootstrap.kvp.post" />
                        <ctl:with-param name="bootstrap.xml.post" select="$bootstrap.xml.post" />
                        <ctl:with-param name="bootstrap.soap.post" select="$bootstrap.soap.post" />
                        <ctl:with-param name="bootstrap.restful" select="$bootstrap.restful" />
                      </ctl:call-test>

                      <ctl:call-test name="wmts:GetTile.main">
                        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
                        <ctl:with-param name="bootstrap.kvp.get" select="$bootstrap.kvp.get" />
                        <ctl:with-param name="bootstrap.kvp.post" select="$bootstrap.kvp.post" />
                        <ctl:with-param name="bootstrap.xml.post" select="$bootstrap.xml.post" />
                        <ctl:with-param name="bootstrap.soap.post" select="$bootstrap.soap.post" />
                        <ctl:with-param name="bootstrap.restful" select="$bootstrap.restful" />
                      </ctl:call-test>

                      <ctl:call-test name="wmts:GetFeatureInfo.main">
                        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
                        <ctl:with-param name="bootstrap.kvp.get" select="$bootstrap.kvp.get" />
                        <ctl:with-param name="bootstrap.kvp.post" select="$bootstrap.kvp.post" />
                        <ctl:with-param name="bootstrap.xml.post" select="$bootstrap.xml.post" />
                        <ctl:with-param name="bootstrap.soap.post" select="$bootstrap.soap.post" />
                        <ctl:with-param name="bootstrap.restful" select="$bootstrap.restful" />
                      </ctl:call-test>

                      <ctl:call-test name="wmts:SimpleProfile.main">
                        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
                      </ctl:call-test>

                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:variable name="wmts.main.elapsed" select="ctl:elapsedTime('wmts.main')"/>
      <ctl:message>wmts.main.elapsed [<xsl:value-of select="$wmts.main.elapsed"/>] milliseconds</ctl:message>
    </ctl:code>
  </ctl:test>

  <ctl:test name="wmts:CommonOperations.main" isConformanceClass="true" isBasic="true">
    <ctl:param name="wmts.capabilities.doc">WMTS capabilities document</ctl:param>
    <ctl:param name="bootstrap.kvp.get" />
    <ctl:param name="bootstrap.kvp.post" />
    <ctl:param name="bootstrap.xml.post" />
    <ctl:param name="bootstrap.soap.post" />
    <ctl:param name="bootstrap.restful" />

    <ctl:assertion>The server satisfies all CommonOperations requirements for all supported bindings.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="selected">UNUSED</xsl:variable>

      <ctl:call-test name="wmts:CommonOperations.Mandatory.KVP.GET">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <!-- Other encodings than KVP.GET are deactivated -->
      <!--<ctl:call-test name="wmts:CommonOperations.Mandatory.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:CommonOperations.Mandatory.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:CommonOperations.Mandatory.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:CommonOperations.Mandatory.RESTful">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.restful" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>-->

    </ctl:code>
  </ctl:test>

  <ctl:test name="wmts:GetCapabilities.main" isConformanceClass="true" isBasic="true">
    <ctl:param name="wmts.capabilities.doc">WMTS capabilities document</ctl:param>
    <ctl:param name="bootstrap.kvp.get" />
    <ctl:param name="bootstrap.kvp.post" />
    <ctl:param name="bootstrap.xml.post" />
    <ctl:param name="bootstrap.soap.post" />
    <ctl:param name="bootstrap.restful" />

    <ctl:assertion>The server satisfies all GetCapabilities requirements for all supported bindings.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="selected">UNUSED</xsl:variable>

      <ctl:call-test name="wmts:GetCapabilities.Mandatory.KVP.GET">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <!-- <ctl:call-test name="wmts:GetCapabilities.Implemented.KVP.GET">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get"/>
        <ctl:with-param name="selected" select="$selected"/>
      </ctl:call-test> -->

      <!-- Other encodings than KVP.GET are deactivated -->
      <!--<ctl:call-test name="wmts:GetCapabilities.Mandatory.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetCapabilities.Implemented.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetCapabilities.Mandatory.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetCapabilities.Implemented.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetCapabilities.Mandatory.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetCapabilities.Implemented.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetCapabilities.Mandatory.RESTful">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.restful" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>-->

    </ctl:code>
  </ctl:test>

  <ctl:test name="wmts:GetTile.main" isConformanceClass="true" isBasic="true">
    <ctl:param name="wmts.capabilities.doc">WMTS capabilities document</ctl:param>
    <ctl:param name="bootstrap.kvp.get" />
    <ctl:param name="bootstrap.kvp.post" />
    <ctl:param name="bootstrap.xml.post" />
    <ctl:param name="bootstrap.soap.post" />
    <ctl:param name="bootstrap.restful" />

    <ctl:assertion>The server satisfies all GetTile requirements for all supported bindings.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="selected">UNUSED</xsl:variable>

      <ctl:call-test name="wmts:GetTile.Mandatory.KVP.GET">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <!-- <ctl:call-test name="wmts:GetTile.Implemented.KVP.GET">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get"/>
        <ctl:with-param name="selected" select="$selected"/>
      </ctl:call-test> -->

      <!-- Other encodings than KVP.GET are deactivated -->
      <!--<ctl:call-test name="wmts:GetTile.Mandatory.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetTile.Implemented.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetTile.Mandatory.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetTile.Implemented.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetTile.Mandatory.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetTile.Implemented.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetTile.Mandatory.RESTful">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.restful" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>
      <ctl:call-test name="wmts:GetTile.Implemented.RESTful">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.restful" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>-->
    </ctl:code>
  </ctl:test>

  <ctl:test name="wmts:GetFeatureInfo.main" isConformanceClass="true" isBasic="false">
    <ctl:param name="wmts.capabilities.doc">WMTS capabilities document</ctl:param>
    <ctl:param name="bootstrap.kvp.get" />
    <ctl:param name="bootstrap.kvp.post" />
    <ctl:param name="bootstrap.xml.post" />
    <ctl:param name="bootstrap.soap.post" />
    <ctl:param name="bootstrap.restful" />

    <ctl:assertion>The server satisfies all GetFeatureInfo requirements for all supported bindings.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="selected">UNUSED</xsl:variable>

      <!--<ctl:call-test name="wmts:GetFeatureInfo.Implemented.KVP.GET">
            <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
            <ctl:with-param name="bootstrap" select="$bootstrap.kvp.get" />
            <ctl:with-param name="selected" select="$selected" />
          </ctl:call-test> -->

      <!-- Other encodings than KVP.GET are deactivated -->
      <!--<ctl:call-test name="wmts:GetFeatureInfo.Implemented.KVP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.kvp.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetFeatureInfo.Implemented.XML.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.xml.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetFeatureInfo.Implemented.SOAP.POST">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.soap.post" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>

      <ctl:call-test name="wmts:GetFeatureInfo.Implemented.RESTful">
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
        <ctl:with-param name="bootstrap" select="$bootstrap.restful" />
        <ctl:with-param name="selected" select="$selected" />
      </ctl:call-test>-->
    </ctl:code>
  </ctl:test>

  <ctl:test name="wmts:SimpleProfile.main" isConformanceClass="true" isBasic="true">
    <ctl:param name="wmts.capabilities.doc">WMTS capabilities document</ctl:param>
    <ctl:assertion>The server satisfies all SimpleProfile requirements for all supported bindings.</ctl:assertion>
    <ctl:code>
      <ctl:call-test name="wmts:SimpleProfile.Schematron">
          <ctl:with-param name="doc" select="$wmts.capabilities.doc" />
      </ctl:call-test>
    </ctl:code>
  </ctl:test>

</ctl:package>