<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
  xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml">

<!-- note:  tests are grouped by operation and type by containment in group elements created by bootstrap.xml functions.
				If you change a test type, you need to move it to its new group in the appropriate bootstrap function. -->
				
<ctl:test name="wmts:GetTile.Mandatory.KVP.GET" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetTile Tests for KVP GET binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Mandatory.KVP.GET</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Implemented.KVP.GET" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetTile Tests for KVP GET binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Implemented.KVP.GET</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Mandatory.KVP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetTile Tests for KVP POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Mandatory.KVP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/KVP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Implemented.KVP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetTile Tests for KVP POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Implemented.KVP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/KVP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Mandatory.XML.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetTile Tests for XML POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Mandatory.XML.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/XML binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Implemented.XML.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetTile Tests for XML POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Implemented.XML.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/XML binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Mandatory.SOAP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetTile Tests for SOAP POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Mandatory.SOAP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/SOAP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Implemented.SOAP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetTile Tests for SOAP POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Implemented.SOAP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/SOAP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Mandatory.RESTful" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetTile Tests for RESTful binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Mandatory.RESTful</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] REST binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetTile.Implemented.RESTful" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetTile Tests for RESTful binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetTile.Implemented.RESTful</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] REST binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>


<ctl:test name="wmts:Server.KVP.GET.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the server returns a tile in response to a valid KVP GET GetTile request for each tile from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP GET GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Mandatory">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>	
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in response to a valid KVP GET GetTile request for each tile from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP GET GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Optional">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document; except when tested as missing;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameterwith a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	15.  the response entity contains a locator attribute value of the name of the missing parameter.
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory KVP GET GetTile parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Missing">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value not listed in the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "layer".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Layer">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "TileMatrixSet".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrixSet">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	13.  the response entity contains a locator attribute value of "TileMatrix".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrix">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileRow".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileCol".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "Style".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Style">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	14.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	15.  the response entity is a schema-valid ows:Exception document.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.SampleDimension.Value">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value of "default".
	15.  the server returns a tile from a Layer with a sample dimension with a default value in response to the KVP GET GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Default.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;	
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value of "current".
	15.  the server returns a tile from a Layer with a sample dimension with a current value in response to the KVP GET GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Current.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in the MIME type corresponding to the requested Format from each format for each Layer (and sample dimension, if applicable) offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid KVP GET GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Valid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter with a MIME type format value not advertised in the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a schema-valid ows:Exception document for an invalid (unadvertised) format for each Layer (and sample dimension, if applicable) offered by the server.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of "format".
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that the responses returned by a WMTS server to KVP GET GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Invalid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Invalid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile with the width and height of the returned image equal to the advertised TileWidth and TileHeight from each TileMatrix for each TileMatrixSet for each Layer, and for each sample dimension of Layers with Dimensions. offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid KVP GET GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Valid.Tile.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
            <!-- get all supported image formats from capabilities doc -->
            <xsl:for-each select="distinct-values($wmts.capabilities.doc//wmts:Layer/wmts:Format/text())">
              <ctl:call-test name="wmts:GetTileMatrixByImageFormat">
							  <ctl:with-param name="tileURL" select="$tileURL"/>
							  <ctl:with-param name="wmtsVersion" select="$wmtsVersion"/>
							  <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
                <ctl:with-param name="http-method">GET</ctl:with-param>
                <ctl:with-param name="image-format" select="." />
						  </ctl:call-test>
            </xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

  <ctl:test name="wmts:GetTileMatrixByImageFormat">
    <ctl:param name="tileURL">GetTile endpoint</ctl:param>
    <ctl:param name="wmtsVersion">WMTS version (expected to be 1.0.0)</ctl:param>
    <ctl:param name="wmts.capabilities.doc">Service capabilities document</ctl:param>
    <ctl:param name="http-method">HTTP request method</ctl:param>
    <ctl:param name="image-format">Image media type</ctl:param>
    <ctl:assertion>A request to retrieve a tiled map layer produces a correctly formatted response.</ctl:assertion>
    <ctl:comment>The called function sets a fail or skipped verdict if any service response violates some constraint.</ctl:comment>
    <ctl:code>
      <ctl:message>Requested image format: <xsl:value-of select="$image-format"/></ctl:message>
      <ctl:call-function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Size">
        <ctl:with-param name="tileURL" select="$tileURL"/>
        <ctl:with-param name="version" select="$wmtsVersion"/>
        <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
        <ctl:with-param name="method" select="$http-method" />
        <ctl:with-param name="image-format" select="$image-format" />
      </ctl:call-function>
    </ctl:code>
  </ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Transparency" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document for a format that supports transparency, e.g. image/png;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the requested entity is a tile with NODATA.
	16.  the server returns a tile with NODATA in the requestred format that supports transparency, e.g. image/png as a transparent image.</ctl:assertion>
	<ctl:comment>Verify that the returned tile has transparent color for NODATA values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetTile.Valid.Tile.Transparency</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Transparency">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Transparency not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetTile.Valid.Tile.Transparency test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the server returns a tile in response to a valid KVP POST GetTile request for each tile from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP POST GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Mandatory">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in response to a valid KVP POST GetTile request for each tile from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP POST GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Optional">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document, except when tested as missing;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameterwith a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	15.  the response entity contains a locator attribute value of the name of the missing parameter.
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory KVP POST GetTile parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Missing">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
    2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value not listed in the Service Metadata document;
    5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the response entity is a schema-valid ows:Exception document.
    14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
    15.  the response entity contains a locator attribute value of "layer".
    16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Layer">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "TileMatrixSet".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrixSet">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	13.  the response entity contains a locator attribute value of "TileMatrix".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
							<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrix">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileRow".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileCol".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "Style".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Style">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	14.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	15.  the response entity is a schema-valid ows:Exception document.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.SampleDimension.Value">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value of "default".
	15.  the server returns a tile from a Layer with a sample dimension with a default value in response to the KVP POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP POST GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Default.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>	
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value of "current".
	15.  the server returns a tile from a Layer with a sample dimension with a current value in response to the KVP POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP POST GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Current.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
    2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
    5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
    14.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
    15.  the server returns a tile in the MIME type corresponding to the requested Format from each format for each Layer (and sample dimension, if applicable) offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid KVP POST GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Valid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter with a MIME type format value not advertised in the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a schema-valid ows:Exception document for an invalid (unadvertised) format for each Layer (and sample dimension, if applicable) offered by the server.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of "format".
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that the responses returned by a WMTS server to KVP POST GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Invalid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Invalid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile with the width and height of the returned image equal to the advertised TileWidth and TileHeight from each TileMatrix for each TileMatrixSet for each Layer, and for each sample dimension of Layers with Dimensions. offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid KVP POST GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Valid.Tile.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
            <!-- get all supported image formats from capabilities doc -->
            <xsl:for-each select="distinct-values($wmts.capabilities.doc//wmts:Layer/wmts:Format/text())">
              <ctl:call-test name="wmts:GetTileMatrixByImageFormat">
							  <ctl:with-param name="tileURL" select="$tileURL"/>
							  <ctl:with-param name="wmtsVersion" select="$wmtsVersion"/>
							  <ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
                <ctl:with-param name="http-method">POST</ctl:with-param>
                <ctl:with-param name="image-format" select="." />
						  </ctl:call-test>
            </xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Transparency" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
    2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
    5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6. the request entity is a valid KVP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document for a format that supports transparency, e.g. image/png;
    7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
    14.  the request entity for a layer with sample dimensions is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
    15.  the requested entity is a tile with NODATA.
    16.  the server returns a tile with NODATA in the requestred format that supports transparency, e.g. image/png as a transparent image.</ctl:assertion>
	<ctl:comment>Verify that the returned tile has transparent color for NODATA values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetTile.Valid.Tile.Transparency</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Transparency">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Transparency not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetTile.Valid.Tile.Transparency test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&lt;&lt;ows:Identifier&lt; value for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&lt;&lt;Style&lt;&lt;owsIdentifier&lt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&lt;&lt;Format&lt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&lt;&lt;TileMatrixSetLink&lt;&lt;TileMatrixSet&lt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&lt;&lt;TileMatrix&lt;&lt;owsIdentifier&lt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&lt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&lt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the server returns a tile in response to a valid XML POST GetTile request for each tile from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.	</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid XML POST GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Mandatory">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14. the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in response to a valid XML POST GetTile request for each tile from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid XML POST GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Optional">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document, except when tested as missing;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameterwith a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	15.  the response entity contains a locator attribute value of the name of the missing parameter.
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory XML POST GetTile parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Missing">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value not listed in the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "layer".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.Layer">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "TileMatrixSet".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.TileMatrixSet">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	13.  the response entity contains a locator attribute value of "TileMatrix".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
							<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.TileMatrix">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileRow".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a schema-valid ows:Exception document.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileCol".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a schema-valid ows:Exception document.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "Style".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Style">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	14.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	15.  the response entity is a schema-valid ows:Exception document.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.SampleDimension.Value">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
    2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
    5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
    14.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a value of "default".
    15.  the server returns a tile from a Layer with a sample dimension with a default value in response to the XML POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid XML POST GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Default.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a value of "current".
	15.  the server returns a tile from a Layer with a sample dimension with a current value in response to the XML POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid XML POST GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Current.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in the MIME type corresponding to the requested Format from each format for each Layer (and sample dimension, if applicable) offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid XML POST GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Valid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Valid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter with a MIME type format value not advertised in the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a schema-valid ows:Exception document for an invalid (unadvertised) format for each Layer (and sample dimension, if applicable) offered by the server.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of "format".
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that the responses returned by a WMTS server to XML POST GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Invalid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Invalid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile with the width and height of the returned image equal to the advertised TileWidth and TileHeight from each TileMatrix for each TileMatrixSet for each Layer, and for each sample dimension of Layers with Dimensions. offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid XML POST GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Valid.Tile.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Valid.Tile.Size">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Transparency" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document for a format that supports transparency, e.g. image/png;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the requested entity is a tile with NODATA.
	16.  the server returns a tile with NODATA in the requestred format that supports transparency, e.g. image/png as a transparent image.</ctl:assertion>
	<ctl:comment>Verify that the returned tile has transparent color for NODATA values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetTile.Valid.Tile.Transparency</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetTile.Valid.Tile.Transparency">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Transparency not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetTile.Valid.Tile.Transparency test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3. the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, in response to a valid SOAP POST GetTile request for each tile from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid SOAP POST GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Mandatory">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when> 
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, in response to a valid SOAP POST GetTile request for each tile from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid SOAP POST GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Optional">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document; except when tested as missing;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameterwith a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	14.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	15.  the response entity contains a locator attribute value of the name of the missing parameter.
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory SOAP POST GetTile parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Missing">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value not listed in the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "layer".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.Layer">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.	 the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "TileMatrixSet".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.TileMatrixSet">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	12.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	13.  the response entity contains a locator attribute value of "TileMatrix".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
							<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.TileMatrix">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6. the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileRow".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	12.  the response entity contains an exceptionCode attribute value of "TileOutOfRange".
	13.  the response entity contains a locator attribute value of "TileCol".
	14.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	14.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	15.  the response entity contains a locator attribute value of "Style".
	16.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Style">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	15.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	16.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	17.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	18.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.SampleDimension.Value">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value of "default".
	15.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, from a Layer with a sample dimension with a default value in response to the SOAP POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid SOAP POST GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Default.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value of "current".
	15.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, from a Layer with a sample dimension with a current value in response to the SOAP POST GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid SOAP POST GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Current.SampleDimension">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, in the MIME type corresponding to the requested Format from each format for each Layer (and sample dimension, if applicable) offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid SOAP POST GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Valid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter with a MIME type format value not advertised in the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns exceptions to requests for invalid (unadvertised) formats for each Layer (and sample dimension, if applicable) offered by the server.
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "format".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that the responses returned by a WMTS server to SOAP POST GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Invalid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Format">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Invalid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, with the width and height of the returned image equal to the advertised TileWidth and TileHeight from each TileMatrix for each TileMatrixSet for each Layer, and for each sample dimension of Layers with Dimensions. offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid SOAP POST GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Valid.Tile.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Size">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Transparency" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document for a format that supports transparency, e.g. image/png;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12. the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity for a layer with sample dimensions is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the requested entity is a tile with NODATA.
	16.  the server returns a tile in a SOAP 1.2 envelope, base-64 encoded if it is binary, with NODATA in the requestred format that supports transparency, e.g. image/png as a transparent image.</ctl:assertion>
	<ctl:comment>Verify that the returned tile has transparent color for NODATA values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetTile.Valid.Tile.Transparency</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Transparency">
							<ctl:with-param name="tileURL" select="$tileURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Transparency not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetTile.Valid.Tile.Transparency test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template for layers with no sample dimensions, or with sample dimensions with a default dimension;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.	  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the server returns a tile in response to a valid RESTful GetTile request for each tile from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid RESTful GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Mandatory">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4. the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the server returns a tile in response to a valid RESTful GetTile request for each tile from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.
		</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid RESTful GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Optional">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template for layers with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable, except when tested as missing;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template, except when tested as missing;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable, except when tested as missing;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable, except when tested as missing;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable, except when tested as missing;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable, except when tested as missing;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing;
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing;
	10.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that if a mandatory RESTful GetTile parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Missing">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with an invalid mandatory Layer identifier value not provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.Layer">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; identifier value not listed in the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.TileMatrixSet">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; identifier value not listed in the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.TileMatrix">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol parameter with a TileCol index value outside the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invaild.Tile.Style">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value that is not specified in one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Invalid.SampleDimension.Value"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value of "default";
	12.  the server returns a tile from a Layer with a sample dimension with a default value in response to the RESTful GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid RESTful GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Default.SampleDimension"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value of "current";
	12.  the server returns a tile from a Layer with a sample dimension with a default value in response to the RESTful GetTile request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid RESTful GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Current.SampleDimension"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Valid.Tile.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the server returns a tile in the MIME type corresponding to the requested Format from each format for each Layer (and sample dimension, if applicable) offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid RESTful GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Valid.Tile.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Format"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Valid.Tile.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Valid.Tile.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Valid.Tile.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the server returns a tile with the width and height of the returned image equal to the advertised TileWidth and TileHeight from each TileMatrix for each TileMatrixSet for each Layer, and for each sample dimension of Layers with Dimensions. offered by the server.</ctl:assertion>
	<ctl:comment>Test that the tiles returned by a WMTS server in response to valid RESTful GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Valid.Tile.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Size"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Valid.Tile.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Valid.Tile.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetTile.Valid.Tile.Transparency" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the requested entity is a tile with NODATA.
	13.  the server returns a tile with NODATA in the requestred format that supports transparency, e.g. image/png as a transparent image.</ctl:assertion>
	<ctl:comment>Verify that the returned tile has transparent color for NODATA values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetTile.Valid.Tile.Transparency</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Transparency"> 
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetTile.Valid.Tile.Transparency not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetTile.Valid.Tile.Transparency test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

</ctl:package>