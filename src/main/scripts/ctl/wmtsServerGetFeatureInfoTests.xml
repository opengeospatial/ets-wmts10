<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
    xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml"
>

<!-- note:  tests are grouped by operation and type are by containment in group elements created by bootstrap.xml functions.
				If you change a test type, you need to move it to its new group in the appropriate bootstrap function. -->
				
<ctl:test name="wmts:GetFeatureInfo.Implemented.KVP.GET" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetFeatureInfo Tests for KVP GET binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetFeatureInfo.Implemented.KVP.GET</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetFeatureInfo.Implemented.KVP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetFeatureInfo Tests for KVP POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetFeatureInfo.Implemented.KVP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/KVP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetFeatureInfo.Implemented.XML.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetFeatureInfo Tests for XML POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetFeatureInfo.Implemented.XML.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/XML binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetFeatureInfo.Implemented.SOAP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetFeatureInfo Tests for SOAP POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetFeatureInfo.Implemented.SOAP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/SOAP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetFeatureInfo.Implemented.RESTful" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetFeatureInfo Tests for RESTful binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetFeatureInfo.Implemented.RESTful</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] REST binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>


<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid KVP GET GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, from each TileMatrix from each TileMatrixSet for the Layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GET GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Mandatory">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	17.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	18.  the server returns FeatureInfo in response to a valid KVP GET GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats and sample dimensions, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GET GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Optional">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension from the Service Metadata document, except when tested as missing;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	14,  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document, except when tested as missing;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	18.  the response entity contains a locator attribute value of the name of the missing parameter.
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory KVP GET GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Missing">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value not equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "layer".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".

	</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for a TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrixSet".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrixSet">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	12,  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	13,  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrix".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrix">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11. the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileRow".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileCol".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "Style".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Style">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	17.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	18.  the response entity is a schema-valid ows:Exception document.
	19.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	20.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	21.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.SampleDimension.Value">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a value of "default".
	17.  the server returns FeatureInfo from a Layer with a sample dimension with a default value in response to the KVP GET GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GET GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Default.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	17.  the request entity is a valid KVP GET GetFeatureInfo request with an optional sample dimensions parameter with a value of "current".
	18.  the server returns FeatureInfo from a Layer with a sample dimension with a current value in response to the KVP GET GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GET GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Current.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter wwith a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with no &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	12.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with any value;
	15.  the response entity is a schema-valid ows:Exception document.
	16.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	17.  the response entity contains a locator attribute value of "GetFeatureInfo".
	18.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.NonQueryable.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid KVP GET GetFeatureInfo request for each offered InfoFormat for each Layer with a FeatureInfo document of the requested InfoFormat MIME type.</ctl:assertion>
	<ctl:comment>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Valid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;	
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is not one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "PointIJOutOfRange".
	18.  the response entity contains a locator attribute value of the InfoFormat.
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Row.J&gt; elements;
   5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9. the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value greater than the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    16.  the response entity is a schema-valid ows:Exception document.
    17.  the response entity contains an exceptionCode attribute value of "PointIJOutOfRange".
    18.  the response entity contains a locator attribute value of "J".
    19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Row.J">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Col.I&gt; elements;
	5.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory I parameter with a column index value greater than the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP GET GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "I".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Col.I">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid KVP POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, from each TileMatrix from each TileMatrixSet for the Layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP POST GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Mandatory">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	17.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	18.  the server returns FeatureInfo in response to a valid KVP POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats and sample dimensions, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP POST GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Optional">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension, except when tested as missing;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document, except when tested as missing;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	18.  the response entity contains a locator attribute value of the name of the missing parameter.
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory KVP POST GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Missing">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value not equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "layer".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for a TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrixSet".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrixSet">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrix".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrix">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileRow".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileCol".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "Style".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Style">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	17.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	18.  the response entity is a schema-valid ows:Exception document.
	19.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	20.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	21.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.SampleDimension.Value">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	17.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "default".
	18.  the server returns FeatureInfo from a Layer with a sample dimension with a default value in response to the KVP POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP POST GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Default.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	17.  the request entity is a valid KVP POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "current".
	18.  the server returns FeatureInfo from a Layer with a sample dimension with a current value in response to the KVP POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid KVP POST GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Current.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter wwith a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with no &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with any value;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.NonQueryable.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid KVP POST GetFeatureInfo request for each offered InfoFormat for each Layer with a FeatureInfo document of the requested InfoFormat MIME type.</ctl:assertion>
	<ctl:comment>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Valid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15. the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is not one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Row.J&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value greater than the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14. the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "J".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Row.J">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Col.I&gt; elements;
	5.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory I parameter with a column index value greater than the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid KVP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "I".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Col.I">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid XML POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, from each TileMatrix from each TileMatrixSet for the Layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid XML POST GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Mandatory">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	17.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	18.  the server returns FeatureInfo in response to a valid XML POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats and sample dimensions, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid XML POST GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Optional">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension, except when tested as missing;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document, except when tested as missing;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	18.  the response entity contains a locator attribute value of the name of the missing parameter.
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory XML POST GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Missing">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value not equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "layer".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for a TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrixSet".
	17. the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.TileMatrixSet">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	11.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
	12.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrix".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.TileMatrix">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileRow".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a schema-valid ows:Exception document.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileCol".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "Style".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Style">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	17.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	18.  the response entity is a schema-valid ows:Exception document.
	19.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	20.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	21.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.SampleDimension.Value">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
    5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    16.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
    the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "default".
    17.  the server returns FeatureInfo from a Layer with a sample dimension with a default value in response to the XML POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid XML POST GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Default.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	17.  the request entity is a valid XML POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "current".
	18.  the server returns FeatureInfo from a Layer with a sample dimension with a current value in response to the XML POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid XML POST GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Current.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.NonQueryable.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter wwith a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with no &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with any value;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.NonQueryable.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.NonQueryable.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.NonQueryable.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.NonQueryable.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Valid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the server returns FeatureInfo in response to a valid XML POST GetFeatureInfo request for each offered InfoFormat for each Layer with a FeatureInfo document of the requested InfoFormat MIME type.</ctl:assertion>
	<ctl:comment>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Valid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Valid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Valid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Valid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is not one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Row.J&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value greater than the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "J".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Pixel.Row.J">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Col.I&gt; elements;
	5.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory I parameter with a column index value greater than the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid XML POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a schema-valid ows:Exception document.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "I".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Pixel.Col.I">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension;
    5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    16.  the server returns a FeatureInfo document wrapped in the SOAP version 1.2 envelope in response to a valid SOAP POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, from each TileMatrix from each TileMatrixSet for the Layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid SOAP POST GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Mandatory">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function> 
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for info about a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	17.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	18.  the server returns a FeatureInfo document wrapped in the SOAP version 1.2 envelope in response to a valid SOAP POST GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats and sample dimensions, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid SOAP POST GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Optional">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements and with no sample dimensions, or with sample dimensions with a default dimension, except when tested as missing;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document, except when tested as missing;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document, except when tested as missing;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document, except when tested as missing;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document, except when tested as missing;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	18.  the response entity contains a locator attribute value of the name of the missing parameter.
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that if a mandatory SOAP POST GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Missing">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value not equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "layer".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value not listed in the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for a TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileMatrixSet".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.TileMatrixSet">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
    5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value not listed in the Service Metadata document;
    9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
    10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
    11.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for some TileMatrix from the Service Metadata document;
    12.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for some TileMatrix from the Service Metadata document;
    13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    14.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
    15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
    16.  the response entity contains a locator attribute value of "TileMatrix".
    17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.TileMatrix">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileRow".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value outside of the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document;
	11.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	12.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	14.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	15.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	16.  the response entity contains a locator attribute value of "TileCol".
	17.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "Style".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Style">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a name that is specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;ows:Identifier&gt; in the Service Metadata document;
	17.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a value that is not specified in a &lt;Contents&gt;&lt;Layer&gt;&lt;Dimension&gt;&lt;Value&gt; in the Service Metadata document for that sample dimension.
	18.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	19.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	20.  the response entity contains a locator attribute value of the name of the sample dimension for which an invalid value was supplied in the request.
	21.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.SampleDimension.Value">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
    5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    15. the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    16.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
    17.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "default".
    18.  the server returns a FeatureInfo document wrapped in the SOAP version 1.2 envelope from a Layer with a sample dimension with a default value in response to the SOAP POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid SOAP POST GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Default.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a name specified in the Service Metadata document;
	17.  the request entity is a valid SOAP POST GetFeatureInfo request with an optional sample dimensions parameter with a value of "current".
	18.  the server returns a FeatureInfo document wrapped in the SOAP version 1.2 envelope from a Layer with a sample dimension with a current value in response to the SOAP POST GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid SOAP POST GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Current.SampleDimension">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter wwith a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with no &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with any value;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.NonQueryable.Layer">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
    2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
    3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
    4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
    5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
    6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
    7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
    8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
    9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
    12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
    13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
    15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
    16.  the server returns a FeatureInfo document wrapped in the SOAP version 1.2 envelope in response to a valid SOAP POST GetFeatureInfo request for each offered InfoFormat for each Layer with a FeatureInfo document of the requested InfoFormat MIME type.</ctl:assertion>
	<ctl:comment>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Valid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;InfoFormat&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11. the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is not one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "OperationNotSupported".
	18.  the response entity contains a locator attribute value of "GetFeatureInfo".
	19.  the HTTP status code value is set to 501, corresponding to the message "Not Implemented".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.InfoFormat">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Row.J&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value greater than the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16. the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "J".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Pixel.Row.J">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="featureInfoURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory request parameter with a value of GetFeatureInfo;
	2.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document for a layer with &lt;Pixel.Col.I&gt; elements;
	5.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory I parameter with a column index value greater than the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
`	15.  the request entity is a valid SOAP POST GetFeatureInfo request with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	16.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	17.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	18.  the response entity contains a locator attribute value of "I".
	19.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Pixel.Col.I">
							<ctl:with-param name="featureInfoURL" select="$featureInfoURL"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template for a layer with no sample dimensions, or with sample dimensions with a default dimension;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the server returns FeatureInfo in response to a valid RESTful GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, from each TileMatrix from each TileMatrixSet for the Layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid RESTful GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Mandatory">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	15.  the server returns FeatureInfo in response to a valid RESTful GetFeatureInfo request for sample pixels from each tile from each Layer with InfoFormats and sample dimensions, in each style for the layer, in each image format for the layer, in each InfoFormat for the Layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid RESTful GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Optional">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Missing" type="MandatoryIfImplemented">	
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template for a layer with no sample dimensions, or with sample dimensions with a default dimension;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable, except when tested as missing;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template, except when tested as missing;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable, except when tested as missing;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable, except when tested as missing;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable, except when tested as missing;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable, except when tested as missing;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values, except when tested as missing;
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values, except when tested as missing;
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that if a mandatory RESTful GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Missing">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Layer" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with an invalid mandatory Layer identifier value not provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Layer</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Layer">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Layer not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Layer test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; identifier value not listed in the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.TileMatrixSet">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.TileMatrix" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; identifier value not listed in the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.TileMatrix</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.TileMatrix">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.TileMatrix not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.TileMatrix test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow parameter with a TileRow index value outside of the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7. the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol parameter with a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	9.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	11.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow parameter with a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol parameter with a TileCol index value outside the TileMatrixLimits MinTileCol and MaxTileCol values for the TileMatrix of the tile in the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	9.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	11. the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Style" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style parameter with a style identifier value not listed in the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	13.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Tile.Style</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Style">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Style not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Tile.Style test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value that is not specified in one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	15.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.SampleDimension.Value">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Default.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value of "default";
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	15.  the server returns FeatureInfo from a Layer with a sample dimension with a default value in response to the RESTful GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid RESTful GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Default.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Default.SampleDimension">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Default.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Default.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Current.SampleDimension" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value of "current";
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	15.  the server returns FeatureInfo from a Layer with a sample dimension with a current value in response to the RESTful GetFeatureInfo request.</ctl:assertion>
	<ctl:comment>Test that a WMTS server can return tiles in response to valid RESTful GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Current.SampleDimension</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Current.SampleDimension">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Current.SampleDimension not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Current.SampleDimension test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Valid.InfoFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value from one of the &lt;InfoFormat&gt;s for the specified Layer provided in the ResourceURL template from the Service Metadata document;
	15.  the server returns FeatureInfo in response to a valid RESTful GetFeatureInfo request for each offered InfoFormat for each Layer with a FeatureInfo document of the requested InfoFormat MIME type.</ctl:assertion>
	<ctl:comment>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Valid.InfoFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Valid.InfoFormat">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Valid.InfoFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Valid.InfoFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value greater than the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value from zero to the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	15.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Pixel.Row.J">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5. the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetFeatureInfo request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory J parameter with a row index value from zero to the value of &lt;TileHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "J" URL template variable;
	13.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory I parameter with a column index value greater than the value of &lt;TileWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "I" URL template variable;
	14.  the request entity is a valid RESTful GetFeatureInfo request URL with the mandatory infoFormat parameter with an InfoFormat value that is one of the &lt;InfoFormat&gt;s for the specified Layer from the Service Metadata document;
	15.  the HTTP status code value is set to indicate an error.</ctl:assertion>
	<ctl:comment>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Pixel.Col.I">
							<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

</ctl:package>