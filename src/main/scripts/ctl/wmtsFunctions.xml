<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" 
xmlns:fn="http://www.w3.org/2005/xpath-functions"
xmlns:gml="http://www.opengis.net/gml" 
xmlns:html="http://www.w3.org/1999/xhtml" 
xmlns:ogc="http://www.opengis.net/ogc"
xmlns:ows="http://www.opengis.net/ows/1.1" 
xmlns:parsers="http://www.occamlab.com/te/parsers" 
xmlns:saxon="http://saxon.sf.net/" 
xmlns:tep="http://teamengine.sourceforge.net/parsers" 
xmlns:xi="http://www.w3.org/2001/XInclude" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xml="http://www.w3.org/XML/1998/namespace" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:wmts="http://www.opengis.net/wmts/1.0" 
xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml" 
xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml" 
xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml" 
xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml">

	<!-- 2011-10-28  PwD  everything specifically supporting client tests commented out for future development -->

	<ctl:function name="wmtsFunctions:isNormativeSchema">
		<ctl:param name="schemaLocation"/>
		<ctl:description>Tests that the schema location is the normative wmts.xsd</ctl:description>
		<ctl:code>
			<xsl:value-of select="contains($schemaLocation,'wmts.xsd')"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:allLayerLegendURLCorrectResource">
		<ctl:param name="wmts.capabilities.doc">WMTS Capabilities Document</ctl:param>
		<ctl:description>Performs tests on all LegendURL to support Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource and wmtsBootstrap:bootstrap. </ctl:description>
		<ctl:code>
			<!-- <xsl:message>wcd <xsl:value-of select="node-name($wmts.capabilities.doc)"/></xsl:message> -->
			<xsl:variable name="result">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Style/wmts:LegendURL]">
					<xsl:variable name="layer" select="."/>
					<xsl:for-each select="wmts:Style/wmts:LegendURL">
						<xsl:variable name="legend" select="."/>
						<xsl:variable name="correct" select="wmtsFunctions:layerLegendURLCorrectResource($wmts.capabilities.doc, $layer, $legend)"/>
						<!-- <xsl:message>all layer <xsl:value-of select="$layer/ows:identifier"/> legend <xsl:value-of select="$legend/@xlink:href"/> correct <xsl:value-of select="$correct"/></xsl:message> -->
						<xsl:if test="not($correct = 'true')">
							<fail/>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<!-- <xsl:message>result <xsl:copy-of select="$result"/> not($result/fail) <xsl:value-of select="not($result/fail)"/></xsl:message> -->
			<xsl:value-of select="not($result/fail)"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:layerLegendURLCorrectResource">
		<ctl:param name="wmts.capabilities.doc">WMTS Capabilities Document</ctl:param>
		<ctl:param name="layer">Layer in capabilities document with LegendURL</ctl:param>
		<ctl:param name="legendURL">LegendURL in Layer</ctl:param>
		<ctl:description>Performs tests on one LegendURL to support Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource and wmtsBootstrap:bootstrap. </ctl:description>
		<ctl:code>
			<xsl:variable name="imageFormat" select="ctl:getImageType($legendURL/@xlink:href)"/>
			<xsl:variable name="format" select="wwwFunctions:image-format($legendURL/@format)"/>
			<xsl:variable name="tileMatrixSets">
				<xsl:for-each select="$layer/wmts:TileMatrixSetLink/wmts:TileMatrixSet">
					<xsl:value-of select="."/>
					<xsl:if test="not(position() = last())">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="minScaleDenominator" select="wmtsFunctions:validScaleDenominator($wmts.capabilities.doc, $tileMatrixSets,$legendURL/@minScaleDenominator)"/>
			<xsl:variable name="maxScaleDenominator" select="wmtsFunctions:validScaleDenominator($wmts.capabilities.doc, $tileMatrixSets,$legendURL/@maxScaleDenominator)"/>
			<xsl:variable name="imageWidth" select="ctlFunctions:getImageWidth($legendURL/@xlink:href)"/>
			<xsl:variable name="imageHeight" select="ctlFunctions:getImageHeight($legendURL/@xlink:href)"/>
			<!--		<xsl:message>xlink:href <xsl:value-of select="$legendURL/@xlink:href"/> format <xsl:value-of select="$legendURL/@format"/> minScaleDenominator <xsl:value-of select="$legendURL/@minScaleDenominator"/> maxScaleDenominator <xsl:value-of select="$legendURL/@maxScaleDenominator"/> width <xsl:value-of select="$legendURL/@width"/> height <xsl:value-of select="$legendURL/@height"/> imageFormat <xsl:value-of select="$imageFormat"/> format <xsl:value-of select="$format"/> tms <xsl:value-of select="$tileMatrixSets"/> mnsd <xsl:value-of select="$minScaleDenominator"/> masd <xsl:value-of select="$maxScaleDenominator"/> imageWidth <xsl:value-of select="$imageWidth"/> imageHeight <xsl:value-of select="$imageHeight"/></xsl:message> -->
			<xsl:variable name="result">
				<xsl:if test="not ($imageFormat)">
					<ctl:message>No image format found for LegendURL</ctl:message>
					<fail/>
				</xsl:if>
				<xsl:if test="not (ends-with(normalize-space($legendURL/@format), normalize-space($imageFormat)))">
					<ctl:message>Layer <xsl:value-of select="$layer/ows:Identifier"/> image format found for LegendURL <xsl:value-of select="$imageFormat"/> does not match specified format <xsl:value-of select="$legendURL/@format"/>
					</ctl:message>
					<fail/>
				</xsl:if>
				<xsl:if test="$legendURL/@minScaleDenominator and $minScaleDenominator != 'true' ">
					<ctl:message>Layer <xsl:value-of select="$layer/ows:Identifier"/> minScaleDenominator <xsl:value-of select="$legendURL/@minScaleDenominator"/> not found for TileMatrix from any TileMatrix set for Layer.</ctl:message>
					<fail/>
				</xsl:if>
				<xsl:if test="$legendURL/@maxScaleDenominator and $maxScaleDenominator != 'true' ">
					<ctl:message>Layer <xsl:value-of select="$layer/ows:Identifier"/> maxScaleDenominator <xsl:value-of select="$legendURL/@maxScaleDenominator"/> not found for TileMatrix from any TileMatrix set for Layer.</ctl:message>
					<fail/>
				</xsl:if>
				<xsl:if test="$legendURL/@width and $imageWidth != $legendURL/@width">
					<ctl:message>Layer <xsl:value-of select="$layer/ows:Identifier"/> image width found for LegendURL <xsl:value-of select="$imageWidth"/> does not match specified width <xsl:value-of select="$legendURL/@width"/>
					</ctl:message>
					<fail/>
				</xsl:if>
				<xsl:if test="$legendURL/@height and $imageHeight != $legendURL/@height">
					<ctl:message>Layer <xsl:value-of select="$layer/ows:Identifier"/> image height found for LegendURL <xsl:value-of select="$imageHeight"/> does not match specified height <xsl:value-of select="$legendURL/@height"/>
					</ctl:message>
					<fail/>
				</xsl:if>
			</xsl:variable>
			<xsl:variable name="return" select="not($result/fail)"/>
			<!-- <xsl:message>result <xsl:value-of select="$return"/></xsl:message> -->
			<xsl:value-of select="$return"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:validScaleDenominator">
		<ctl:param name="wmts.capabilities.doc">WMTS Capabilities Document</ctl:param>
		<ctl:param name="tileMatrixSets">TileMatrixSets for Layer in capabilities document with LegendURL, as comma separated list</ctl:param>
		<ctl:param name="scaleDenominator">Scale denominator to validate for Layer</ctl:param>
		<ctl:description>Tests whether scaleDenominator is specified in a TileMatrix for specified TileMatrixSets; returns true or false.</ctl:description>
		<ctl:code>
			<xsl:variable name="isValid" select="some $sd in $wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[some $tms in tokenize($tileMatrixSets,',') satisfies ows:Identifier = $tms]/wmts:TileMatrix/wmts:ScaleDenominator satisfies $sd = $scaleDenominator"/>
			<!-- <xsl:message>tms <xsl:value-of select="$tileMatrixSets"/> count tms <xsl:value-of select="count($tileMatrixSets)"/> sd <xsl:value-of select="$scaleDenominator"/> isValid <xsl:value-of select="$isValid"/></xsl:message> -->
			<xsl:value-of select="$isValid"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmts:testMenus">
		<ctl:param name="bootstrap">bootstrap document of elements containing test prerequisite check results</ctl:param>
		<ctl:param name="interface">Server.{binding} KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Presents menus of checkboxes and radio buttons for server tests whose prerequisites were met during bootstrap are presented for user selection.Returns a document fragment with elements that indicate selected tests.</ctl:description>
		<ctl:code>
			<!--			<xsl:message>testMenus bs <xsl:copy-of select="$bootstrap"/></xsl:message> -->
			<xsl:variable name="group-form-values">
				<ctl:form width="1200" height="400">
					<body>
						<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server <xsl:value-of select="substring-after($interface, 'Server.')"/> Profile</h2>
						<p/>
						<blockquote>
							<table width="1000" height="320" border="1" padding="4" bgcolor="#00ffff" align="center">
								<colgroup span="3" width="25%"/>
								<colgroup span="3" width="25%"/>
								<colgroup span="3" width="25%"/>
								<colgroup span="3" width="25%"/>
								<tr>
									<th colspan="12" align="center">Test Group Selection</th>
								</tr>
								<tr>
									<td colspan="12" align="center">Click radio buttons for test selection within groups, then click "OK"</td>
								</tr>
								<tr>
									<th colspan="3" align="center">Common Operations</th>
									<th colspan="3" align="center">Get Capabilities</th>
									<th colspan="3" align="center">Get Tile</th>
									<th colspan="3" align="center">Get Feature Info</th>
								</tr>
								<xsl:choose>
									<xsl:when test="$bootstrap/getCapabilitiesKVPGET = 'true' or $bootstrap/getTileKVPGET = 'true' or $bootstrap/getFeatureInfoKVPGET = 'true' ">
										<tr>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesKVPGET = 'true' ">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPGETtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPGETtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPGETtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesKVPGET = 'true' ">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPGETtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPGETtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPGETtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getTileKVPGET = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPGETtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPGETtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPGETtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getFeatureInfoKVPGET = 'true' ">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPGETtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPGETtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPGETtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
										</tr>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$bootstrap/getCapabilitiesKVPPOST = 'true' or $bootstrap/getTileKVPPOST = 'true' or $bootstrap/getFeatureInfoKVPPOST = 'true' ">
										<tr>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesKVPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsKVPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesKVPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesKVPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getTileKVPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileKVPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getFeatureInfoKVPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoKVPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
										</tr>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$bootstrap/getCapabilitiesXMLPOST = 'true' or $bootstrap/getTileXMLPOST = 'true' or $bootstrap/getFeatureInfoXMLPOST = 'true' ">
										<tr>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesXMLPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsXMLPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsXMLPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsXMLPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesXMLPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesXMLPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesXMLPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesXMLPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getTileXMLPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileXMLPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileXMLPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileXMLPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getFeatureInfoXMLPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoXMLPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoXMLPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoXMLPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
										</tr>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$bootstrap/getCapabilitiesSOAPPOST = 'true' or $bootstrap/getTileSOAPPOST = 'true' or $bootstrap/getFeatureInfoSOAPPOST = 'true' ">
										<tr>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesSOAPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsSOAPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsSOAPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsSOAPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesSOAPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesSOAPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesSOAPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesSOAPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getTileSOAPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileSOAPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileSOAPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileSOAPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getFeatureInfoSOAPPOST = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoSOAPPOSTtests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoSOAPPOSTtests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoSOAPPOSTtests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
										</tr>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="$bootstrap/getCapabilitiesRESTful = 'true' or $bootstrap/getTileRESTful = 'true' or $bootstrap/GetFeatureInfoRESTful = 'true' ">
										<tr>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesRESTful = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsRESTfulTests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsRESTfulTests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerCommonOperationsRESTfulTests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getCapabilitiesRESTful = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesRESTfulTests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40"/>
													<!-- nothing else to select for restful <td nowrap="nowrap" width="40"><input type="radio" name="whichServerGetCapabilitiesRESTfulTests" value="selected">Selected</input></td> -->
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetCapabilitiesRESTfulTests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getTileRESTful = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileRESTfulTests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileRESTfulTests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetTileRESTfulTests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:choose>
												<xsl:when test="$bootstrap/getFeatureInfoRESTful = 'true'">
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoRESTfulTests" checked="true" value="all">All</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoRESTfulTests" value="selected">Selected</input>
													</td>
													<td nowrap="nowrap" width="40">
														<input type="radio" name="whichServerGetFeatureInfoRESTfulTests" value="none">None</input>
													</td>
												</xsl:when>
												<xsl:otherwise>
													<td nowrap="nowrap" colspan="3">Not Available  - prerequisites not met</td>
												</xsl:otherwise>
											</xsl:choose>
										</tr>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<tr>
									<td colspan="12" align="right">
										<input type="submit" value="OK"/>
									</td>
								</tr>
							</table>
						</blockquote>
					</body>
				</ctl:form>
			</xsl:variable>
			<xsl:variable name="testServerKVPGET">
				<xsl:if test="$interface = 'Server.KVP.GET' "><xsl:text>on</xsl:text></xsl:if>
			</xsl:variable> 
			<xsl:variable name="testServerKVPPOST">
				<xsl:if test="$interface = 'Server.KVP.POST' "><xsl:text>on</xsl:text></xsl:if>
			</xsl:variable> select=/>
			<xsl:variable name="testServerXMLPOST">
				<xsl:if test="$interface = 'Server.XML.POST' "><xsl:text>on</xsl:text></xsl:if>
			</xsl:variable> 
			<xsl:variable name="testServerSOAPPOST">
				<xsl:if test="$interface = 'Server.SOAP.POST' "><xsl:text>on</xsl:text></xsl:if>
			</xsl:variable>
			<xsl:variable name="testServerRESTful">
				<xsl:if test="$interface = 'Server.RESTful' "><xsl:text>on</xsl:text></xsl:if>
			</xsl:variable> 
			<!-- <ctl:message select="concat('interface ', $interface, ' kvpget ', $testServerKVPGET)"/> -->
			<xsl:choose>
				<xsl:when test="$testServerKVPGET = 'on' or $testServerKVPPOST = 'on' or $testServerXMLPOST = 'on' or $testServerSOAPPOST = 'on' or $testServerRESTful = 'on' ">
					<ctl:message>Get options to run tests</ctl:message>
					<xsl:variable name="selected">
						<xsl:element name="sel">
							<xsl:choose>
								<xsl:when test="$testServerKVPGET">
									<!-- <xsl:message>server KVP GET ON</xsl:message> -->
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsKVPGETtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsKVPGETtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsMenu">
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesKVPGETtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesKVPGETtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesMenu">
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileKVPGETtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileKVPGETtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileMenu">
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoKVPGETtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoKVPGETtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoMenu">
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<!-- <xsl:message>server KVP GET OFF</xsl:message>		-->
									<xsl:variable name="sel">
										<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetTileAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.GET</ctl:with-param>
										</ctl:call-function>
									</xsl:variable>
									<xsl:copy-of select="$sel/*/*"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:choose>
								<xsl:when test="$testServerKVPPOST">
									<!--	<xsl:message>server KVP POST ON</xsl:message> -->
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsKVPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsKVPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsMenu">
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesKVPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesKVPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesMenu">
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileKVPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileKVPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileMenu">
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoKVPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoKVPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoMenu">
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<!-- <xsl:message>server KVP POST OFF</xsl:message> -->
									<xsl:variable name="sel">
										<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetTileAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">KVP.POST</ctl:with-param>
										</ctl:call-function>
									</xsl:variable>
									<xsl:copy-of select="$sel/*/*"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:choose>
								<xsl:when test="$testServerKVPPOST">
									<!-- <xsl:message>server XML POST ON</xsl:message> -->
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsXMLPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsXMLPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsMenu">
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesXMLPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesXMLPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesMenu">
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileXMLPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileXMLPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileMenu">
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoXMLPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoXMLPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoMenu">
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<!--	<xsl:message>server XML POST OFF</xsl:message> -->
									<xsl:variable name="sel">
										<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetTileAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">XML.POST</ctl:with-param>
										</ctl:call-function>
									</xsl:variable>
									<xsl:copy-of select="$sel/*/*"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:choose>
								<xsl:when test="$testServerSOAPPOST">
									<!-- <xsl:message>server SOAP POST ON</xsl:message> -->
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsSOAPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsSOAPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsMenu">
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesSOAPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesSOAPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesMenu">
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileSOAPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileSOAPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileMenu">
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoSOAPPOSTtests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoSOAPPOSTtests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoMenu">
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<!--	<xsl:message>server SOAP POST OFF</xsl:message> -->
									<xsl:variable name="sel">
										<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetCapabilitiesAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetTileAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">SOAP.POST</ctl:with-param>
										</ctl:call-function>
									</xsl:variable>
									<xsl:copy-of select="$sel/*/*"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:choose>
								<xsl:when test="$testServerRESTful">
									<!--	<xsl:message>server RESTful ON</xsl:message> -->
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsRESTfulTests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerCommonOperationsRESTfulTests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsMenu">
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetCapabilitiesRESTfulTests'] = 'all' ">
											<xsl:variable name="sel">
												<xsl:element name="sel">
													<xsl:element name="Server.RESTful.GetCapabilities.Request.Mandatory.Selected">true</xsl:element>
												</xsl:element>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<xsl:element name="sel">
													<xsl:element name="Server.RESTful.GetCapabilities.Request.Mandatory.Selected">false</xsl:element>
												</xsl:element>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileRESTfulTests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetTileRESTfulTests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileMenu">
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetTileAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:choose>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoRESTfulTests'] = 'all' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">true</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:when test="$group-form-values/values/value[@key='whichServerGetFeatureInfoRESTfulTests'] = 'selected' ">
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoMenu">
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="sel">
												<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
													<ctl:with-param name="allOrNone">false</ctl:with-param>
													<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
												</ctl:call-function>
											</xsl:variable>
											<xsl:copy-of select="$sel/*/*"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<!--	<xsl:message>server RESTful OFF</xsl:message> -->
									<xsl:variable name="sel">
										<ctl:call-function name="wmts:serverCommonOperationsAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
										</ctl:call-function>
										<xsl:element name="sel">
											<xsl:element name="Server.RESTful.GetCapabilities.Request.Mandatory.Selected">false</xsl:element>
										</xsl:element>
										<ctl:call-function name="wmts:serverGetTileAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
										</ctl:call-function>
										<ctl:call-function name="wmts:serverGetFeatureInfoAllOrNone">
											<ctl:with-param name="allOrNone">false</ctl:with-param>
											<ctl:with-param name="interfaceType">RESTful</ctl:with-param>
										</ctl:call-function>
									</xsl:variable>
									<xsl:copy-of select="$sel/*/*"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:element>
					</xsl:variable>
					<!--				
					<xsl:message>selected <xsl:copy-of select="$selected"/></xsl:message>
					<ctl:call-function name="wmtsFunctions:printSelected">
						<ctl:with-param name="selected" select="$selected"/>
					</ctl:call-function> 
	-->
					<xsl:copy-of select="$selected"/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>No test groups selected.</ctl:message>
					<ctl:fail/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverCommonOperationsAllOrNone">
		<ctl:param name="allOrNone">"true" for all or "false" for none</ctl:param>
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Create document fragment with child elements indicating all or none Server Common Operation Tests for specified interfaceType</ctl:description>
		<ctl:code>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.HTTP.Mandatory.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.InvalidQueryString.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:if test="not(starts-with($interfaceType, 'REST'))">
					<xsl:element name="{concat('Server.', $interfaceType, '.InvalidService.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
					<xsl:element name="{concat('Server.', $interfaceType, '.InvalidRequest.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
				</xsl:if>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverCommonOperationsMenu">
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Checkboxes for server Common Operations tests whose prerequisites were met during bootstrap are presented for user selection.</ctl:description>
		<ctl:code>
			<xsl:variable name="gc-form-values">
				<ctl:form width="550" height="450">
					<body>
						<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server <xsl:value-of select="$interfaceType"/> Profile</h2>
						<p/>
						<blockquote>
							<table width="350" height="350" border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<th align="center">Server <xsl:value-of select="$interfaceType"/> Common Operations Test Selection</th>
								</tr>
								<tr>
									<td align="center">Click checkboxes of Server Common Operations tests to execute, then click "OK"</td>
								</tr>
								<tr>
									<td width="250">
										<input type="checkbox" name="mandatoryHTTPprotocolUsage.Selected">Mandatory HTTP Protocol Usage</input>
									</td>
								</tr>
								<tr>
									<td width="250">
										<input type="checkbox" name="invalidQueryStringMandatory.Selected">Invalid Query String Mandatory</input>
									</td>
								</tr>
								<xsl:if test="not(starts-with($interfaceType, 'REST'))">
									<tr>
										<td width="250">
											<input type="checkbox" name="invalidServiceMandatory.Selected">Invalid Service Mandatory</input>
										</td>
									</tr>
									<tr>
										<td width="250">
											<input type="checkbox" name="invalidRequestMandatory.Selected">Invalid Request Mandatory</input>
										</td>
									</tr>
								</xsl:if>
								<tr>
									<td align="right">
										<input type="submit" value="OK"/>
									</td>
								</tr>
							</table>
						</blockquote>
					</body>
				</ctl:form>
			</xsl:variable>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.HTTP.Mandatory.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='mandatoryHTTPprotocolUsage.Selected'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.InvalidQueryString.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidQueryStringMandatory.Selected'] = 'on')"/>
				</xsl:element>
				<xsl:if test="not(starts-with($interfaceType, 'REST'))">
					<xsl:element name="{concat('Server.', $interfaceType, '.InvalidService.Selected')}">
						<xsl:value-of select="string($gc-form-values/values/value[@key='invalidServiceMandatory.Selected'] = 'on')"/>
					</xsl:element>
					<xsl:element name="{concat('Server.', $interfaceType, '.InvalidRequest.Selected')}">
						<xsl:value-of select="string($gc-form-values/values/value[@key='invalidRequestMandatory.Selected'] = 'on')"/>
					</xsl:element>
				</xsl:if>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetCapabilitiesAllOrNone">
		<ctl:param name="allOrNone">"true" for all or "false" for none</ctl:param>
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Create document fragment with child elements indicating all or none Server GetCapabilities Tests for specified interfaceType</ctl:description>
		<ctl:code>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Mandatory.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.NoService.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.InvalidService.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptVersions.Valid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptVersions.Invalid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:if test="starts-with($interfaceType, 'KVP')">
					<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.CaseInsensitive.KVP.Names.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
				</xsl:if>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.All.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.ServiceIdentification.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.ServiceProvider.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.OperationsMetadata.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Contents.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Themes.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Multiple.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Invalid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Missing.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.UpdateSequence.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptFormats.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.XML.Well.Formed.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.SchemaReferenced.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.SchemaValid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.AdvertisedFormat.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.OnlineResource.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Encoding.Constraint.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.Identifiers.Unique.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Resource.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<!--
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				-->
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Theme.LayerRef.Valid.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetCapabilitiesMenu">
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Checkboxes for server GetCapabilities tests whose prerequisites were met during bootstrap are presented for user selection.</ctl:description>
		<ctl:code>
			<xsl:variable name="gc-form-values">
				<ctl:form width="900" height="900">
					<body>
						<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server <xsl:value-of select="$interfaceType"/> Profile</h2>
						<p/>
						<blockquote>
							<table width="800" height="800" border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<th colspan="2" align="center">Server <xsl:value-of select="$interfaceType"/> GetCapabilities Test Selection</th>
								</tr>
								<tr>
									<td colspan="2" align="center">Click checkboxes of Server GetCapabilities tests to execute, then click "OK"</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="mandatoryParameters">Mandatory Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="noServiceParameter">No Service Parameter</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidServiceParameter">Invalid Service Parameter</input>
									</td>
									<xsl:choose>
										<xsl:when test="starts-with($interfaceType, 'KVP')">
											<td width="300">
												<input type="checkbox" name="caseInsensitiveKVPnames">Case Insensitive KVP Names</input>
											</td>
										</xsl:when>
										<xsl:otherwise>
											<td/>
										</xsl:otherwise>
									</xsl:choose>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="acceptVersionsValidParameterValue">Accept Versions Valid Parameter Value</input>
									</td>
									<td width="300">
										<input type="checkbox" name="acceptVersionsInvalidParameterValue">Accept Versions Invalid Parameter Value</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalSectionsAll">Optional Sections - All</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalSectionsServiceIdentification">Optional Sections - Service Identification</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalSectionsServiceProvider">Optional Sections - Service Provider</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalSectionsServiceMetadata">Optional Sections - Service Metadata</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalSectionsContents">Optional Sections - Contents</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalsectionsThemes">Optional Sections - Themes</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalSectionsMultiple">Optional Sections - Contents, Themes</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalSectionsBogus">Optional Sections - Bogus</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalSectionsMissing">Optional Sections - Missing</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalUpdateSequence">Optional Update Sequence</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="optionalAcceptFormats">Optional Accept Formats</input>
									</td>
									<td width="300">
										<input type="checkbox" name="servicesMetadataDocumentXMLwellFormed">Services Metadata Document XML Well-Formed</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="servicesMetadataDocumentReferencesNormativeSchema">Services Metadata Document References Normative Schema</input>
									</td>
									<td width="300">
										<input type="checkbox" name="servicesMetadataDocumentSchemaValid">Services Metadata Document is Schema Valid</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="advertisedFormatApplicationXML">Advertised Format application/xml</input>
									</td>
									<td width="300">
										<input type="checkbox" name="onlineResourceOnlyResourcePrefix">Online Resource Only Resource Prefix</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="includesGetEncodingConstraint">Includes Encoding Constraint</input>
									</td>
									<td width="300">
										<input type="checkbox" name="layerIdentifiersUnique">Layer Identifiers Unique</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="noLayersContainsOtherSourceURL">No Layers Response Contains Other Source URL</input>
									</td>
									<td width="300">
										<input type="checkbox" name="styleIdentifiersUnique">Style Identifiers Unique</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="layerLegendURLsCorrectResources">Layer Legend URLs are Correct Resources</input>
									</td>
									<td width="300">
										<input type="checkbox" name="layerLegendURLsCorrectFormats">LayerLegend URLs are Correct Formats</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="layerLegendURLsCorrectSizes">Layer Legend URLs are Correct Sizes</input>
									</td>
									<td width="300">
										<input type="checkbox" name="dimensionIdentifiersUnique">Dimension Identifiers Are Unique</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="layerTileMatrixSetsValid">Layer Tile Matrix Sets Are Valid</input>
									</td>
									<td width="300">
										<input type="checkbox" name="tileMatrixSetIdentifiersUnique">Tile Matrix Set Identifiers Are Unique</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="tileMatrixIdentifiersUnique">Tile Matrix Identifiers Are Unique</input>
									</td>
									<td width="300">
										<input type="checkbox" name="tileMatrixSetScaleDenomincatorsUnique">Tile Matrix Set Scale Denominators Are Unique</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="tileMatrixSetWellKnownScaleSetsCompatible">Tile Matrix Set Well Known Scale Sets Are Compatible</input>
									</td>
									<td width="300">
										<input type="checkbox" name="themeLayerRefValid">Theme Layer References Are Valid</input>
									</td>
								</tr>
								<tr>
									<td colspan="2" align="right">
										<input type="submit" value="OK"/>
									</td>
								</tr>
							</table>
						</blockquote>
					</body>
				</ctl:form>
			</xsl:variable>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Mandatory.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='mandatoryParameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.NoService.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='noServiceParameter'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.InvalidService.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidServiceParameter'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptVersions.Valid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='acceptVersionsValidParameterValue'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptVersions.Invalid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='acceptVersionsInvalidParameterValue'] = 'on')"/>
				</xsl:element>
				<xsl:if test="starts-with($interfaceType, 'KVP')">
					<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.CaseInsensitive.KVP.Names.Selected')}">
						<xsl:value-of select="string($gc-form-values/values/value[@key='caseInsensitiveKVPnames'] = 'on')"/>
					</xsl:element>
				</xsl:if>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.All.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsAll'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.ServiceIdentification.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsServiceIdentification'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.ServiceProvider.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsServiceProvider'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.OperationsMetadata.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsServiceMetadata'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Contents.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsContents'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Themes.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalsectionsThemes'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Multiple.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsMultiple'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Invalid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsBogus'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.Sections.Missing.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSectionsMissing'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.UpdateSequence.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalUpdateSequence'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Request.AcceptFormats.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalAcceptFormats'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.XML.Well.Formed.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='servicesMetadataDocumentXMLwellFormed'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.SchemaReferenced.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='servicesMetadataDocumentReferencesNormativeSchema'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.SchemaValid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='servicesMetadataDocumentSchemaValid'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.AdvertisedFormat.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='advertisedFormatApplicationXML'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.OnlineResource.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='onlineResourceOnlyResourcePrefix'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Encoding.Constraint.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='includesGetEncodingConstraint'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.Identifiers.Unique.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='layerIdentifiersUnique'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Resource.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='layerLegendURLsCorrectResources'] = 'on')"/>
				</xsl:element>
				<!--
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='layerLegendURLsCorrectFormats'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='layerLegendURLsCorrectSizes'] = 'on')"/>
				</xsl:element>
				-->
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='layerTileMatrixSetsValid'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='tileMatrixSetIdentifiersUnique'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='tileMatrixIdentifiersUnique'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='tileMatrixSetScaleDenomincatorsUnique'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='tileMatrixSetWellKnownScaleSetsCompatible'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetCapabilities.Response.Theme.LayerRef.Valid.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='themeLayerRefValid'] = 'on')"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetTileAllOrNone">
		<ctl:param name="allOrNone">"true" for all or "false" for none</ctl:param>
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Create document fragment with child elements indicating all or none Server GetTile Tests for specified interfaceType</ctl:description>
		<ctl:code>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Mandatory.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Optional.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Missing.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Layer.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.TileMatrixSet.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.TileMatrix.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Style.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.SampleDimension.Value.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Default.SampleDimension.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Current.SampleDimension.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Format.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:if test="$interfaceType != 'RESTful' ">
					<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Format.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
				</xsl:if>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Size.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Transparency.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetTileMenu">
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Checkboxes for server GetTile tests whose prerequisites were met during bootstrap are presented for user selection.</ctl:description>
		<ctl:code>
			<xsl:variable name="gc-form-values">
				<ctl:form width="900" height="650">
					<body>
						<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server <xsl:value-of select="$interfaceType"/> Profile</h2>
						<p/>
						<blockquote>
							<table width="800" height="550" border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<th colspan="2" align="center">Server <xsl:value-of select="$interfaceType"/> GetTile Test Selection</th>
								</tr>
								<tr>
									<td colspan="2" align="center">Click checkboxes of Server GetTile tests to execute, then click "OK"</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="mandatoryParameters">Mandatory Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalSampleDimension">Optional Sample Dimension</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="missing.Parameters">Missing Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidLayer">Invalid Layer</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileMatrixSet">Invalid Tile Matrix Set</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileMatrix">Invalid Tile Matrix</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileRowNoTileMatrixSetLimits">Invalid Tile Row - No Tile Matrix Set Limits</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileColNoTileMatrixSetLimits">Invalid Tile Column - No Tile Matrix Set Limits</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileRowTileMatrixSetLimits">Invalid Tile Row - Tile Matrix Set Limits</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileColTileMatrixSetLimits">Invalid Tile Column - Tile Matrix Set Limits</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileStyle">Invalid Tile Style</input>
									</td>
									<td width="300">
										<input type="checkbox" name="missingOptionalParameters">Missing Optional Parameters</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidSampleDimensionValue">Invalid Sample Dimension Value</input>
									</td>
									<td width="300">
										<input type="checkbox" name="defaultSampleDimension">Default Sample Dimension</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="currentSampleDimension">CurrentSampleDimension</input>
									</td>
									<td width="300">
										<input type="checkbox" name="validTileFormat">Valid Tile Format</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<xsl:choose>
											<xsl:when test="$interfaceType = 'RESTful' ">
												<nbsp/>
											</xsl:when>
											<xsl:otherwise>
												<input type="checkbox" name="invalidTileFormat">Invalid Tile Format</input>
											</xsl:otherwise>
										</xsl:choose>
									</td>
									<td width="300">
										<input type="checkbox" name="validTileSize">Valid Tile Size</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="validTileTransparency">Valid Tile Transparency</input>
									</td>
								</tr>
								<tr>
									<td colspan="2" align="right">
										<input type="submit" value="OK"/>
									</td>
								</tr>
							</table>
						</blockquote>
					</body>
				</ctl:form>
			</xsl:variable>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Mandatory.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='mandatoryParameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Optional.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalSampleDimension'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Missing.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='missing.Parameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Layer.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidLayer'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.TileMatrixSet.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileMatrixSet'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.TileMatrix.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileMatrix'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileRowTileMatrixSetLimits'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileColTileMatrixSetLimits'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Style.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileStyle'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.SampleDimension.Value.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidSampleDimensionValue'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Default.SampleDimension.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='defaultSampleDimension'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Current.SampleDimension.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='currentSampleDimension'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Format.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='validTileFormat'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Invalid.Tile.Format.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileFormat'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Size.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='validTileSize'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetTile.Valid.Tile.Transparency.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='validTileTransparency'] = 'on')"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetFeatureInfoAllOrNone">
		<ctl:param name="allOrNone">"true" for all or "false" for none</ctl:param>
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Create document fragment with child elements indicating all or none Server GetFeatureInfo Tests for specified interfaceType</ctl:description>
		<ctl:code>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Mandatory.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Optional.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Missing.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Layer.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.TileMatrixSet.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.TileMatrix.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Style.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.SampleDimension.Value.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Default.SampleDimension.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Current.SampleDimension.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:if test="$interfaceType != 'RESTful' ">
					<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.NonQueryable.Layer.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
				</xsl:if>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Valid.InfoFormat.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:if test="$interfaceType != 'RESTful' ">
					<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.InfoFormat.Selected')}">
						<xsl:value-of select="$allOrNone"/>
					</xsl:element>
				</xsl:if>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Pixel.Row.J.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Pixel.Col.I.Selected')}">
					<xsl:value-of select="$allOrNone"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmts:serverGetFeatureInfoMenu">
		<ctl:param name="interfaceType">The HTTP service interface type: KVP.GET | KVP.POST | XML.POST | SOAP.POST | RESTful</ctl:param>
		<ctl:description>Checkboxes for server GetTile tests whose prerequisites were met during bootstrap are presented for user selection.</ctl:description>
		<ctl:code>
			<xsl:variable name="gc-form-values">
				<ctl:form width="900" height="650">
					<body>
						<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0 Server <xsl:value-of select="$interfaceType"/> Profile</h2>
						<p/>
						<blockquote>
							<table width="800" height="550" border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<th colspan="2" align="center">Server <xsl:value-of select="$interfaceType"/> GetFeatureInfo Test Selection</th>
								</tr>
								<tr>
									<td colspan="2" align="center">Click checkboxes of Server GetFeatureInfo tests to execute, then click "OK"</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="mandatoryParameters">Mandatory Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="optionalParameters">Optional Parameters</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="missingParameters">Missing Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidLayer">Invalid Layer</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileMatrixSet">Invalid Tile Matrix Set</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileMatrix">Invalid Tile Matrix</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileRowNoTileMatrixSetLimits">Invalid Tile Row - No Tile Matrix Set Limits</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileColNoTileMatrixSetLimits">Invalid Tile Column - No Tile Matrix Set Limits</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidTileRowTileMatrixSetLimits">Invalid Tile Row - Tile Matrix Set Limits</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileColTileMatrixSetLimits">Invalid Tile Column - Tile Matrix Set Limits</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidSampleDimensionValue">Invalid Sample Dimension Value</input>
									</td>
									<td width="300">
										<input type="checkbox" name="defaultSampleDimension">Default Sample Dimension</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="currentSampleDimension">Current Sample Dimension</input>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidTileStyle">Invalid Tile Style</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="missingOptionalParameters">Missing Optional Parameters</input>
									</td>
									<td width="300">
										<input type="checkbox" name="validInfoFormat">Valid InfoFormat</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<xsl:choose>
											<xsl:when test="$interfaceType = 'RESTful' ">
												<nbsp/>
											</xsl:when>
											<xsl:otherwise>
												<input type="checkbox" name="invalidInfoFormat">Invalid InfoFormat</input>
											</xsl:otherwise>
										</xsl:choose>
									</td>
									<td width="300">
										<input type="checkbox" name="invalidPixelRowJ">Invalid Pixel Row J</input>
									</td>
								</tr>
								<tr>
									<td width="300">
										<input type="checkbox" name="invalidPixelColI">Invalid Pixel Column I</input>
									</td>
								</tr>
								<xsl:if test="$interfaceType != 'RESTful' ">
									<tr>
										<td width="300">
											<input type="checkbox" name="nonQueryableLayer">Non Queryable Layer</input>
										</td>
										<td width="300"/>
									</tr>
								</xsl:if>
								<tr>
									<td colspan="2" align="right">
										<input type="submit" value="OK"/>
									</td>
								</tr>
							</table>
						</blockquote>
					</body>
				</ctl:form>
			</xsl:variable>
			<xsl:element name="sel">
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Mandatory.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='mandatoryParameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Optional.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='optionalParameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Missing.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='missingParameters'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Layer.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidLayer'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.TileMatrixSet.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileMatrixSet'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.TileMatrix.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileMatrix'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileRowTileMatrixSetLimits'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileColTileMatrixSetLimits'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Tile.Style.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidTileStyle'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.SampleDimension.Value.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidSampleDimensionValue'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Default.SampleDimension.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='defaultSampleDimension'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Current.SampleDimension.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='currentSampleDimension'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.NonQueryable.Layer.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='nonQueryableLayer'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Valid.InfoFormat.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='validInfoFormat'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.InfoFormat.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidInfoFormat'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Pixel.Row.J.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidPixelRowJ'] = 'on')"/>
				</xsl:element>
				<xsl:element name="{concat('Server.', $interfaceType, '.GetFeatureInfo.Invalid.Pixel.Col.I.Selected')}">
					<xsl:value-of select="string($gc-form-values/values/value[@key='invalidPixelColI'] = 'on')"/>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:interfaceSummary">
		<ctl:param name="selected"/>
		<ctl:code>
			<xsl:element name="sel">
				<xsl:for-each select="$selected/sel/*">
					<xsl:copy-of select="."/>
				</xsl:for-each>
				<!-- Server Interface Summary -->
				<xsl:element name="Server.Interface.Summary.KVP.GET.Selected">
					<xsl:choose>
<!--						<xsl:when test="$selected/sel/Server.KVP.GET.HTTP.Mandatory.Selected = 'true' "> -->
<!--							<xsl:text>true</xsl:text> -->
<!--						</xsl:when> -->
						<xsl:when test="$selected/sel/Server.KVP.GET.InvalidQueryString.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.InvalidRequest.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.NoService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.All.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.Contents.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.Themes.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.Multiple.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.Sections.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.UpdateSequence.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Request.AcceptFormats.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.SchemaReferenced.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.SchemaValid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.OnlineResource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.GetEncoding.Constraint.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<!--
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						-->
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Valid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Invalid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Valid.Tile.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetTile.Valid.Tile.Transparency.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
				<xsl:element name="Server.Interface.Summary.KVP.POST.Selected">
					<xsl:choose>
						<xsl:when test="$selected/sel/Server.KVP.POST.HTTP.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.InvalidQueryString.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.InvalidRequest.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.NoService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.All.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.Contents.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.Themes.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.Multiple.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.Sections.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.UpdateSequence.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Request.AcceptFormats.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.SchemaReferenced.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.SchemaValid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.OnlineResource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.GetEncoding.Constraint.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<!--
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						-->
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Valid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Invalid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Valid.Tile.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetTile.Valid.Tile.Transparency.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style.Selected= 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
				<xsl:element name="Server.Interface.Summary.XML.POST.Selected">
					<xsl:choose>
						<xsl:when test="$selected/sel/Server.XML.POST.HTTP.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.InvalidQueryString.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.InvalidRequest.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.NoService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.All.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.Contents.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.Themes.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.Multiple.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.Sections.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.UpdateSequence.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Request.AcceptFormats.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.XML.Well.Formed.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.SchemaReferenced.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.SchemaValid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.AdvertisedFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.OnlineResource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.GetEncoding.Constraint.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<!--
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						-->
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Valid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Invalid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Valid.Tile.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetTile.Valid.Tile.Transparency.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.NonQueryable.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Valid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
				<xsl:element name="Server.Interface.Summary.SOAP.POST.Selected">
					<xsl:choose>
						<xsl:when test="$selected/sel/Server.SOAP.POST.HTTP.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.InvalidQueryString.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.InvalidRequest.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.NoService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.InvalidService.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.All.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.Contents.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.Themes.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.Sections.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.UpdateSequence.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Request.AcceptFormats.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced.Selected= 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.SchemaValid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.OnlineResource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.GetEncoding.Constraint.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<!--
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						-->
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Valid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Invalid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Valid.Tile.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetTile.Valid.Tile.Transparency.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
				<xsl:element name="Server.Interface.Summary.RESTful.Selected">
					<xsl:choose>
						<xsl:when test="$selected/sel/Server.RESTful.HTTP.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.InvalidQueryString.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetCapabilities.Request.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Invalid.SampleDimension.Value.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Valid.Tile.Format.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Valid.Tile.Size.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetTile.Valid.Tile.Transparency.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Mandatory.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Optional.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Missing.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.TileMatrix.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Tile.Style.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Default.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Current.SampleDimension.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.NonQueryable.Layer.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Valid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.InfoFormat.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:when test="$selected/sel/Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I.Selected = 'true' ">
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
			</xsl:element>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:printSelected">
		<ctl:param name="selected"/>
		<ctl:param name="interface"/>
		<ctl:code>
			<xsl:for-each select="$selected/sel/*">
				<xsl:variable name="nodeName" select="name(.)"/>
				<xsl:if test="starts-with($nodeName, $interface)">
					<ctl:message>
						<xsl:value-of select="node-name(.)"/>:<xsl:value-of select="."/>
					</ctl:message>
				</xsl:if>
			</xsl:for-each>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:invokeSelectedTests">
		<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
		<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
		<ctl:param name="selected">Selected tests in XML</ctl:param>
		<ctl:param name="testGroupElementName">Name of test group element in bootstrap that contains tests to be invoked.</ctl:param>
		<ctl:description>Invoke selected WMTS tests</ctl:description>
		<ctl:code>
			<ctl:message select="concat('wmtsFunctions:invokeSelectedTests for group ', $testGroupElementName)"/>
			<xsl:variable name="kvpGetCapabilitiesURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			<xsl:variable name="postGetCapabilitiesURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			<xsl:variable name="kvpGetTileURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			<xsl:variable name="postGetTileURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			<xsl:variable name="kvpGetFeatureInfoURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			<xsl:variable name="postGetFeatureInfoURL" select="$wmts.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeatureInfo']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			<xsl:variable name="restfulServiceMetadataURL" select="$wmts.capabilities.doc//wmts:ServiceMetadataURL/@xlink:href"/>

			<xsl:variable name="testGroupElement" select="$bootstrap/*[local-name() = $testGroupElementName]"/>
			<!-- <ctl:message select="concat('bootstrap ', local-name($bootstrap), ' tge ', local-name($testGroupElement), ' sel ', local-name($selected))"/> -->
			<xsl:for-each select="$testGroupElement/*[starts-with(local-name(.),'Server')]">
				<xsl:variable name="metPrerequisites" select="."/>
				<xsl:variable name="testName" select="substring-before(local-name(.),'.Prerequisites')"/>
				<xsl:variable name="testSelectedName" select="concat($testName,'.Selected')"/>
        <xsl:variable name="testSelected" >true</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($testSelected) or $testSelected = '' ">
						<ctl:message>ERROR: prereq name: <xsl:value-of select="local-name(.)"/> met prereqs <xsl:value-of select="$metPrerequisites"/> does not match selected name <xsl:value-of select="$testSelectedName"/> selected no value: <xsl:value-of select="$testSelected"/>
						</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- <xsl:variable name="callTestName" select="concat('wmts:',$testName)"/> can't pass attribute value template; must hard code choice -->
						<ctl:call-function name="ctl:startStopwatch">
							<ctl:with-param name="watchName">test.execution</ctl:with-param>
						</ctl:call-function>
						<ctl:message select="concat('Test wmts:', $testName, ' met prerequisites: ', $metPrerequisites, ' test selected: ', $testSelected)"/>						
						<xsl:choose>

<!-- 							<xsl:when test="$testName = 'Server.KVP.GET.HTTP.Mandatory' " > -->
<!-- 								<ctl:call-test name="wmts:Server.KVP.GET.HTTP.Mandatory"> -->
<!-- 									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>  -->
<!-- 									<ctl:with-param name="selected" select="$testSelected"/> -->
<!-- 									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/> -->
<!-- 								</ctl:call-test> -->
<!-- 							</xsl:when> -->

							<xsl:when test="$testName = 'Server.KVP.GET.InvalidQueryString' " >
								<ctl:call-test name="wmts:Server.KVP.GET.InvalidQueryString">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.InvalidService' " >
								<ctl:call-test name="wmts:Server.KVP.GET.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
							
							<xsl:when test="$testName = 'Server.KVP.GET.InvalidRequest' " >
								<ctl:call-test name="wmts:Server.KVP.GET.InvalidRequest">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.NoService' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.NoService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.InvalidService' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.All' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.All">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.Contents' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Contents">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.Themes' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Themes">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.Multiple' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Multiple">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.Invalid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.Sections.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.UpdateSequence' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.UpdateSequence">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="updateSequence" select="$bootstrap/updateSequence"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Request.AcceptFormats' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptFormats">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="acceptFormats" select="$bootstrap/acceptFormats"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.SchemaReferenced' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.SchemaReferenced">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.SchemaValid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.SchemaValid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.OnlineResource' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.OnlineResource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<!--xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when-->

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$kvpGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Optional' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.Layer' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.TileMatrixSet' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.TileMatrix' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
					
							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.Tile.Style' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.SampleDimension.Value' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
		
							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Default.SampleDimension' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Current.SampleDimension' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Valid.Tile.Format' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Invalid.Tile.Format' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Invalid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Valid.Tile.Size' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetTile.Valid.Tile.Transparency' ">
								<ctl:call-test name="wmts:Server.KVP.GET.GetTile.Valid.Tile.Transparency">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$kvpGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Optional' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.NonQueryable.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Valid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Row.J">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I' " >
								<ctl:call-test name="wmts:Server.KVP.GET.GetFeatureInfo.Invalid.Pixel.Col.I">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$kvpGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.HTTP.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.POST.HTTP.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.InvalidQueryString' " >
								<ctl:call-test name="wmts:Server.KVP.POST.InvalidQueryString">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.InvalidService' " >
								<ctl:call-test name="wmts:Server.KVP.POST.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.InvalidRequest' " >
								<ctl:call-test name="wmts:Server.KVP.POST.InvalidRequest">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.NoService' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.NoService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.InvalidService' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>								
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.All' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.All">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.Contents' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Contents">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.Themes' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Themes">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.Multiple' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Multiple">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.Invalid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>									
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.Sections.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>									
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.UpdateSequence' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.UpdateSequence">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="updateSequence" select="$bootstrap/updateSequence"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Request.AcceptFormats' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptFormats">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="acceptFormats" select="$bootstrap/acceptFormats"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.SchemaReferenced' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.SchemaReferenced">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.SchemaValid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.SchemaValid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.OnlineResource' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.OnlineResource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<!--xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when-->

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Optional' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.Layer' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
 
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.TileMatrixSet' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.TileMatrix' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
			
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.Tile.Style' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.SampleDimension.Value' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Default.SampleDimension' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Current.SampleDimension' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Valid.Tile.Format' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>
		
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Invalid.Tile.Format' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Invalid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
			
							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Valid.Tile.Size' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetTile.Valid.Tile.Transparency' ">
								<ctl:call-test name="wmts:Server.KVP.POST.GetTile.Valid.Tile.Transparency">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Mandatory' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Optional' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Missing' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.NonQueryable.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Valid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Row.J">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I' " >
								<ctl:call-test name="wmts:Server.KVP.POST.GetFeatureInfo.Invalid.Pixel.Col.I">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>


							<xsl:when test="$testName = 'Server.XML.POST.HTTP.Mandatory' " >
								<ctl:call-test name="wmts:Server.XML.POST.HTTP.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.InvalidQueryString' " >
								<ctl:call-test name="wmts:Server.XML.POST.InvalidQueryString">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.InvalidService' " >
								<ctl:call-test name="wmts:Server.XML.POST.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.InvalidRequest' " >
								<ctl:call-test name="wmts:Server.XML.POST.InvalidRequest">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Mandatory' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.NoService' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.NoService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.InvalidService' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.All' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.All">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>
	
							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.Contents' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Contents">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.Themes' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Themes">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.Multiple' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Multiple">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.Invalid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>	
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.Sections.Missing' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaType" select="string(url)"/>	
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.UpdateSequence' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.UpdateSequence">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="updateSequence" select="$bootstrap/updateSequence"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Request.AcceptFormats' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptFormats">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="acceptFormats" select="$bootstrap/acceptFormats"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.XML.Well.Formed' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.XML.Well.Formed">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.SchemaReferenced' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.SchemaReferenced">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.SchemaValid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.SchemaValid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.AdvertisedFormat' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.AdvertisedFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.OnlineResource' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.OnlineResource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Encoding.Constraint' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Encoding.Constraint">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<!--xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when-->

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Mandatory' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Optional' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Missing' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Valid.Tile.Format' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Invalid.Tile.Format' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Invalid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Valid.Tile.Size' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetTile.Valid.Tile.Transparency' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetTile.Valid.Tile.Transparency">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Mandatory' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Optional' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Missing' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.NonQueryable.Layer' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.NonQueryable.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Valid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Valid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I' " >
								<ctl:call-test name="wmts:Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.HTTP.Mandatory' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.HTTP.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.InvalidQueryString' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.InvalidQueryString">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.InvalidService' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.InvalidRequest' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.InvalidRequest">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Mandatory' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.NoService' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.NoService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.InvalidService' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.InvalidService">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.All' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.All">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.Contents' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Contents">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.Themes' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Themes">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.Sections.Missing' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.UpdateSequence' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.UpdateSequence">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="updateSequence" select="$bootstrap/updateSequence"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Request.AcceptFormats' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptFormats">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="acceptFormats" select="$bootstrap/acceptFormats"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.SchemaValid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.SchemaValid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.OnlineResource' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.OnlineResource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<!--xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when-->

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$postGetCapabilitiesURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Mandatory' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Optional' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Missing' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Valid.Tile.Format' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Invalid.Tile.Format' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Invalid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Valid.Tile.Size' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetTile.Valid.Tile.Transparency' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetTile.Valid.Tile.Transparency">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="tileURL" select="$postGetTileURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Mandatory' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Optional' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Missing' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/>
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I' " >
								<ctl:call-test name="wmts:Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="featureInfoURL" select="$postGetFeatureInfoURL"/>
									<ctl:with-param name="wmtsVersion" select="$bootstrap/wmtsVersion"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.HTTP.Mandatory' " >
								<ctl:call-test name="wmts:Server.RESTful.HTTP.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$restfulServiceMetadataURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.InvalidQueryString' " >
								<ctl:call-test name="wmts:Server.RESTful.InvalidQueryString">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$restfulServiceMetadataURL"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetCapabilities.Request.Mandatory' " >
								<ctl:call-test name="wmts:Server.RESTful.GetCapabilities.Request.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="capabilitiesURL" select="$restfulServiceMetadataURL"/>
									<ctl:with-param name="wmtsSchemaPath" select="$bootstrap/wmtsSchemaPath"/>
									<ctl:with-param name="wmtsSchemaType" select="$bootstrap/wmtsSchemaType"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Mandatory' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Optional' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Missing' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>
						
							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Valid.Tile.Format' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Valid.Tile.Format">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Valid.Tile.Size' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Valid.Tile.Size">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetTile.Valid.Tile.Transparency' " >
								<ctl:call-test name="wmts:Server.RESTful.GetTile.Valid.Tile.Transparency">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Mandatory' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Mandatory">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Optional' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Optional">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Missing' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Missing">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Layer' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Layer">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.TileMatrix' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.TileMatrix">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Tile.Style' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Tile.Style">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Default.SampleDimension' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Default.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Current.SampleDimension' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Current.SampleDimension">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>
						
							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Valid.InfoFormat' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Valid.InfoFormat">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

							<xsl:when test="$testName = 'Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I' " >
								<ctl:call-test name="wmts:Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I">
									<ctl:with-param name="metPrerequisites" select="$metPrerequisites"/> 
									<ctl:with-param name="selected" select="$testSelected"/>
									<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc"/>
									<ctl:with-param name="exceptionReportSchemaPath" select="$bootstrap/exceptionReportSchemaPath"/>
								</ctl:call-test>
							</xsl:when>

						</xsl:choose>
						<xsl:variable name="test.execution.elapsed" select="ctl:elapsedTime('test.execution')"/>
						<ctl:message select="concat('Test wmts:', $testName, ' elapsed: ', $test.execution.elapsed, ' milliseconds')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:getScaleDenominators">
		<ctl:param name="wmts.capabilities.elt"/>
		<ctl:param name="tileMatrixSetNames">comma separated list of tile matrix set names</ctl:param>
		<ctl:return>comma separated list of scale denominators for the TileMatrices in the TileMatrixSet with the specified name.</ctl:return>
		<ctl:description>Gets the tile matrix scale denominators for a tile matrix set.</ctl:description>
		<ctl:code>
			<xsl:variable name="tileMatrixSetNameList" select="tokenize($tileMatrixSetNames, ',')"/>
			<xsl:variable name="scaleDenominators">
				<xsl:for-each select="$tileMatrixSetNameList">
					<xsl:variable name="tileMatrixSetName" select="."/>
					<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.elt/wmts:Capabilities/wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetName]"/>
					<xsl:choose>
						<xsl:when test="not($tileMatrixSet) or $tileMatrixSet = '' ">
							<xsl:text/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="string-join(for $s in $tileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator return string($s), ',')"/>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:text>,</xsl:text>
				</xsl:for-each>
			</xsl:variable>
			<xsl:value-of select="$scaleDenominators"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:checkCRSforWellKnownScaleSet">
		<ctl:param name="tileMatrixSetId"/>
		<ctl:param name="supportedCRS"/>
		<ctl:param name="wellKnownScaleSet"/>
		<ctl:return>string(true|false)</ctl:return>
		<ctl:description>Checks whether or not wellKnownScaleSet matches supportedCRS as defined in table in WMTS specification.Annex E.</ctl:description>
		<ctl:code>
			<xsl:variable name="crs84">urn:ogc:def:crs:OGC:1.3:CRS84</xsl:variable>
			<xsl:variable name="epsg6">urn:ogc:def:crs:EPSG:6.18:3:3857</xsl:variable>
			<xsl:choose>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale' ">
					<xsl:choose>
						<xsl:when test="$supportedCRS = $crs84">
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is the supported CRS for Well Known Scale Set ', $wellKnownScaleSet)"/>
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is not the supported CRS for Well Known Scale Set ', $wellKnownScaleSet, '&#010;&#009;&#009;&#009; - supported CRS is ', $crs84)"/>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel' ">
					<xsl:choose>
						<xsl:when test="$supportedCRS  = $crs84">
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is the supported CRS for Well Known Scale Set ', $wellKnownScaleSet)"/>
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is not the supported CRS for Well Known Scale Set ', $wellKnownScaleSet, '&#010;&#009;&#009;&#009; - supported CRS is ', $crs84)"/>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad' ">
					<xsl:choose>
						<xsl:when test="$supportedCRS  = $crs84">
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is the supported CRS for Well Known Scale Set ', $wellKnownScaleSet)"/>
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is not the supported CRS for Well Known Scale Set ', $wellKnownScaleSet, '&#010;&#009;&#009;&#009; - supported CRS is ', $crs84)"/>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible' ">
					<xsl:choose>
						<xsl:when test="$supportedCRS = $epsg6 ">
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is the supported CRS for Well Known Scale Set ', $wellKnownScaleSet)"/>
							<xsl:text>true</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat('TileMatrixSet ', $tileMatrixSetId, ' CRS ', $supportedCRS, ' is not the supported CRS for Well Known Scale Set ', $wellKnownScaleSet, '&#010;&#009;&#009;&#009; - supported CRS is ', $epsg6)"/>
							<xsl:text>false</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:scaleDenominatorsForWellKnownScaleSet">
		<ctl:param name="wellKnownScaleSet">URN of well known scale set</ctl:param>
		<ctl:return>comma separated list of scale denominators</ctl:return>
		<ctl:description>Provides scale denominators for wellKnownScaleSets defined in table in WMTS specification.Annex E.</ctl:description>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale' ">
					<xsl:text>500000000.0,250000000.0,100000000.0,50000000.0,25000000.0,10000000.0,5000000.0,2500000.0,1000000.0,500000.0,250000.0,100000.0,50000.0,25000.0,10000.0,5000.0,2500.0,1000.0,500.0,250.0,100.0</xsl:text>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel' ">
					<xsl:text>795139219.9519541,397569609.9759771,198784804.9879885,132523203.3253257,66261601.66266284,33130800.83133142,13252320.33253257,6626160.166266284,3313080.083133142,1656540.041566571,552180.0138555236,331308.0083133142,110436.0027711047,55218.00138555237,33130.80083133142,11043.60027711047,3313.080083133142,1104.360027711047</xsl:text>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad' ">
					<xsl:text>559082264.0287178,279541132.0143589,139770566.0071794,69885283.00358972,34942641.50179486,17471320.75089743,8735660.375448715,4367830.187724357,2183915.093862179,1091957.546931089,545978.7734655447,272989.3867327723,136494.6933663862,68247.34668319309,34123.67334159654,17061.83667079827,8530.918335399136,4265.459167699568,2132.729583849784</xsl:text>
				</xsl:when>
				<xsl:when test="$wellKnownScaleSet = 'urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible' ">
					<xsl:text>559082264.0287178,279541132.0143589,139770566.0071794,69885283.00358972,34942641.50179486,17471320.75089743,8735660.375448715,4367830.187724357,2183915.093862179,1091957.546931089,545978.7734655447,272989.3867327723,136494.6933663862,68247.34668319309,34123.67334159654,17061.83667079827,8530.918335399136,4265.459167699568,2132.729583849784</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text>,</xsl:text>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:checkScaleDenominatorsAgainstWellKnownScaleSet">
		<ctl:param name="wellKnownScaleSet">URN of well known scale set</ctl:param>
		<ctl:param name="scaleDenominators">comma separated list of Tile Matrix scale denominators to check</ctl:param>
		<ctl:return>string(true|false)</ctl:return>
		<ctl:description>Compares scaleDenominators against those of specified wellKnownScaleSet</ctl:description>
		<ctl:code>
			<xsl:variable name="wellKnownScaleDenominators" select="wmtsFunctions:scaleDenominatorsForWellKnownScaleSet($wellKnownScaleSet)"/>
			<xsl:choose>
				<xsl:when test="$wellKnownScaleDenominators = ',' ">
					<!-- <ctl:message select="concat('No scale denominators are available for well known scale set ', $wellKnownScaleSet, ' which is unknown.')"/> -->
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="scaleDenominatorsList" select="tokenize($scaleDenominators, ',')"/>
					<xsl:variable name="sortedScaleDenominators">
						<xsl:perform-sort select="$scaleDenominatorsList">
							<xsl:sort select="number(.)" order="descending"/>
						</xsl:perform-sort>
					</xsl:variable>
					<xsl:variable name="sortedList" select="tokenize($sortedScaleDenominators, '\s')"/>
					<xsl:variable name="wellKnownList" select="tokenize($wellKnownScaleDenominators, ',')"/>
					<xsl:variable name="numToTest" select="fn:min((count($sortedList), count($wellKnownList)))"/>
					<xsl:variable name="eps" select="number(.000001)"/>
					<!--
					<ctl:message select="concat('scale Denominators ', $scaleDenominators)"/>
					<ctl:message select="concat('scaleDenominatorsList ', string-join($scaleDenominatorsList, ','))"/>
					<ctl:message select="concat('sortedList ', string-join($sortedList, ','))"/>
					<ctl:message select="concat('numToTest ', $numToTest)"/>
-->
							<xsl:variable name="results">
								<xsl:for-each select="1 to $numToTest">
									<xsl:variable name="pos" select="."/>
									<xsl:variable name="sd" select="number($sortedList[$pos])"/>
									<xsl:variable name="wk" select="number($wellKnownList[$pos])"/>
									<!-- <ctl:message select="concat('Position ', $pos, ' scale denominator ', $sd, ' well known ', $wk)"/> -->
									<xsl:choose>
										<xsl:when test="fn:abs($sd - $wk) gt $eps">
											<ctl:message select="concat('Scale Denominator ', $sd, ' in position ', $pos, ' sorted descending does not match corresponding value ', $wk, ' for well known scale set ', $wellKnownScaleSet)"/>
											<xsl:text>false|</xsl:text>
										</xsl:when>
									</xsl:choose>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="contains($results, 'false')">
									<xsl:text>false</xsl:text>
								</xsl:when>
								<xsl:otherwise>
									<xsl:text>true</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:sequenceDimensionsValues">
		<ctl:param name="layer">wmts:Layer element from bootstrap capabilities document with one or more wmts:Dimension elements</ctl:param>
		<ctl:param name="dimensionNames">comma separated list of initially all, subsequently remaining dimension names in layer</ctl:param>
		<ctl:param name="prefix">initially empty, subsequently a # separated list of * separated lists of dimension, value, e.g. d1,v1*d2,v1*d3,v1#d1,v1*d2,v1*d3,v2# ...</ctl:param>
		<ctl:return>a # separated list of * separated lists of dimension, value, e.g. d1,v1*d2,v1*d3,v1#d1,v1*d2,v1*d3,v2# ...</ctl:return>
		<ctl:description>Recursive function to convert wmts:Layer/wmts:Dimension/wmts:Value elements into token separated list of lists of lists containing combinations of dimensions and values.</ctl:description>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$dimensionNames = '' ">
					<xsl:value-of select="concat($prefix, '#')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="dimensionNameList" select="tokenize($dimensionNames, ',')"/>
					<xsl:variable name="dimensionName" select="$dimensionNameList[1]"/>
					<xsl:variable name="dimension" select="$layer/wmts:Dimension[ows:Identifier = $dimensionName]"/>
					<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
					<xsl:variable name="remainingDimensionNameList" select="subsequence($dimensionNameList, 2)"/>
					<xsl:for-each select="$dimension/wmts:Value">
						<xsl:variable name="value" select="."/>
						<xsl:variable name="newPrefix">
							<xsl:choose>
								<xsl:when test="$prefix = '' ">
									<xsl:value-of select="concat($dimensionId, ',', $value)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($prefix, '*', $dimensionId, ',', $value)"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="string-join($remainingDimensionNameList, ',')"/>
							<ctl:with-param name="prefix" select="$newPrefix"/>
						</ctl:call-function>
					</xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Request.Mandatory">
		<ctl:param name="serviceURL">capabilitiesURL without trailing ?</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
		<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
		<ctl:description>Issue GetCapabilities request with mandatory parameters; check for a Service Metadata document containing all sections. </ctl:description>
		<ctl:code>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>
						<xsl:value-of select="$method"/>
					</ctl:method>
					<ctl:param name="service">WMTS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="AcceptVersions">1.0.0</ctl:param>
					<parsers:XMLValidatingParser>
						<parsers:schemas>
							<parsers:schema type="url">http://www.w3.org/2001/xml.xsd</parsers:schema>
							<parsers:schema>
								<xsl:attribute name="type"><xsl:value-of select="$wmtsSchemaType"/></xsl:attribute>
								<xsl:value-of select="$wmtsSchemaPath"/>
							</parsers:schema>
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Request.Mandatory">
				<ctl:with-param name="response" select="$response"/>
			</ctl:call-function>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Request.Mandatory">
		<ctl:param name="serviceURL">capabilitiesURL without trailing ?</ctl:param>
		<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
		<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
		<ctl:description>Issue GetCapabilities request with mandatory parameters; check for a Service Metadata document containing all sections. </ctl:description>
		<ctl:code>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:body>
						<GetCapabilities service="WMTS" xmlns="http://www.opengis.net/wmts/1.0"/>
					</ctl:body>
					<parsers:XMLValidatingParser>
						<parsers:schemas>
							<parsers:schema type="url">http://www.w3.org/2001/xml.xsd</parsers:schema>
							<parsers:schema>
								<xsl:attribute name="type"><xsl:value-of select="$wmtsSchemaType"/></xsl:attribute>
								<xsl:value-of select="$wmtsSchemaPath"/>
							</parsers:schema>
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Request.Mandatory">
				<ctl:with-param name="response" select="$response"/>
			</ctl:call-function>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Request.Mandatory">
		<ctl:param name="serviceURL">capabilitiesURL without trailing ?</ctl:param>
		<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
		<ctl:description>Issue GetCapabilities request with mandatory parameters; check for a Service Metadata document containing all sections. </ctl:description>
		<ctl:code>
			<xsl:variable name="response">
				<ctl:soap-request version="1.2" charset="utf-8">
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:body>
						<GetCapabilities service="WMTS" xmlns="http://www.opengis.net/wmts/1.0" />
					</ctl:body>
					<parsers:HTTPParser>
						<parsers:parse>
							<parsers:SOAPParser return="content"/>
						</parsers:parse>
					</parsers:HTTPParser>	
				</ctl:soap-request>
			</xsl:variable>
			<xsl:variable name="code" select="$response/response/status/@code"/>
			<ctl:message select="concat('HTTP status code: ', $code)"/>
			<xsl:variable name="content" select="$response/response/content"/>
			<xsl:variable name="wmts.capabilities.doc" select="$content/wmts:Capabilities"/>
			<ctl:call-function name="ctl:startStopwatch">
				<ctl:with-param name="watchName">capabilities.validation</ctl:with-param>
			</ctl:call-function>
			<xsl:variable name="results">
				<ctl:call-function name="ctlFunctions:XMLschemaValidate">
					<ctl:with-param name="doc"><xsl:copy-of select="$wmts.capabilities.doc"/></ctl:with-param>
					<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
				</ctl:call-function>
			</xsl:variable>
			<xsl:variable name="capabilities.validation.elapsed" select="ctl:elapsedTime('capabilities.validation')"/>
			<xsl:choose>
				<xsl:when test="count($results/*) &gt; 0">
					<ctl:message>Capabilities document failed schema validation; capabilities.validation.elapsed [<xsl:value-of select="$capabilities.validation.elapsed"/>] milliseconds</ctl:message>
					<ctl:message>results: <xsl:copy-of select="$results"/></ctl:message>
					<ctl:fail/> 
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Capabilities.validation.elapsed [' , $capabilities.validation.elapsed, '] milliseconds.  Capabilities response is valid, continuing...')"/>
					<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Request.Mandatory">
						<ctl:with-param name="response" select="$content"/>
					</ctl:call-function>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetCapabilities.Request.Mandatory">
		<ctl:param name="serviceURL">capabilitiesURL without trailing ?</ctl:param>
		<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
		<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
		<ctl:description>Issue GetCapabilities request with mandatory parameters; check for a Service Metadata document containing all sections. </ctl:description>
		<ctl:code>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<parsers:XMLValidatingParser>
						<parsers:schemas>
							<parsers:schema type="url">http://www.w3.org/2001/xml.xsd</parsers:schema>
							<parsers:schema>
								<xsl:attribute name="type"><xsl:value-of select="$wmtsSchemaType"/></xsl:attribute>
								<xsl:value-of select="$wmtsSchemaPath"/>
							</parsers:schema>
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Request.Mandatory">
				<ctl:with-param name="response" select="$response"/>
			</ctl:call-function>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Request.Mandatory">
		<ctl:param name="response">capabilities response from XMLValidatingParser</ctl:param>
		<ctl:description>>Check GetCapabilites request with mandatory parameters response, that it is valid and contains all sections.</ctl:description>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="not($response/*)">
					<ctl:message>FAILURE: Missing or invalid response entity; should have been a WMTS Capabilities document.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Response entity is a valid WMTS Capabilities document</ctl:message>
					<xsl:variable name="capabilitiesElement" select="$response/wmts:Capabilities"/>
					<xsl:choose>
						<xsl:when test="$capabilitiesElement">
							<ctl:message>Capabilities document root element is wmts:Capabilities.</ctl:message>
							<xsl:variable name="serviceIdentificationElement" select="$capabilitiesElement/ows:ServiceIdentification"/>
							<xsl:choose>
								<xsl:when test="$serviceIdentificationElement">
									<ctl:message>Capabilities Document contains required ows:ServiceIdentification element.</ctl:message>
									<xsl:variable name="serviceProviderElement" select="$capabilitiesElement/ows:ServiceProvider"/>
									<xsl:choose>
										<xsl:when test="$serviceProviderElement">
											<ctl:message>Capabilities Document contains required ows:ServiceProvider element.</ctl:message>
											<xsl:variable name="operationsMetadataElement" select="$capabilitiesElement/ows:OperationsMetadata"/>
											<xsl:choose>
												<xsl:when test="$operationsMetadataElement">
													<ctl:message>Capabilities Document contains required ows:OperationsMetadata element. </ctl:message>
													<xsl:variable name="contentsElement" select="$capabilitiesElement/wmts:Contents"/>
													<xsl:choose>
														<xsl:when test="$contentsElement">
															<ctl:message>Capabilities Document contains required wmts:Contents element.</ctl:message>
															<ctl:message>Capabilities Document contains all required sections</ctl:message>
															<ctl:pass/>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message>Capabilities Document is missing required wmts:Contents element.</ctl:message>
															<ctl:fail/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<ctl:message>Capabilities Document is missing required ows:OperationsMetadata element.</ctl:message>
													<ctl:fail/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message>Capabilities Document is missing required ows:ServiceProvider element.</ctl:message>
											<ctl:fail/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>CapabilitiesDocument is missing required ows:ServiceIdentification element.</ctl:message>
									<ctl:fail/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Capabilities document root element is not wmts:Capabilities.</ctl:message>
							<ctl:fail/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Layer.Identifiers.Unique">
		<ctl:param name="capabilities.elt"/>
		<ctl:code>
			<xsl:variable name="nonblankIdentifiers" select="every $i in $capabilities.elt/wmts:Contents/wmts:Layer/ows:Identifier satisfies string($i) != '' "/>
			<xsl:variable name="numLayersIdentifiers" select="count($capabilities.elt/wmts:Contents/wmts:Layer/ows:Identifier)"/>
			<xsl:variable name="numDistinctLayersIdentifiers" select="count(distinct-values($capabilities.elt/wmts:Contents/wmts:Layer/ows:Identifier))"/>
			<xsl:variable name="uniqueIdentifiers" select="$numLayersIdentifiers = $numDistinctLayersIdentifiers"/>
			<xsl:variable name="results">
				<xsl:choose>
					<xsl:when test="$nonblankIdentifiers">
						<ctl:message>There are no blank layer identifiers in the response.</ctl:message>
						<xsl:text>true|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Some layer identifier in the response is blank.</ctl:message>
						<xsl:text>false|</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$numLayersIdentifiers = 0">
						<ctl:message>There are no identified layers in the response.</ctl:message>
						<ctl:text>false|</ctl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('There are ', $numLayersIdentifiers, ' identified layers in the response.')"/>
						<ctl:text>true|</ctl:text>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$uniqueIdentifiers">
						<ctl:message select="concat('There are ', $numDistinctLayersIdentifiers, ' different layer identifiers in the response, so all the identified layers have different identifiers')"/>
						<xsl:text>true|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('There are ', $numDistinctLayersIdentifiers, ' different layer identifiers in the response, so some identified layers have the same identifiers')"/>
						<xsl:text>false|</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the metadata for each of the LegendURL resources is correct. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the metadata for each of the LegendURL resources is correct. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the metadata for each of the LegendURL resources is correct. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that the metadata for each of the LegendURL resources is correct. </ctl:description>
		<ctl:code>
			<xsl:variable name="numLayerLegendURL" select="count($capabilities.elt/wmts:Contents/wmts:Layer/wmts:Style/wmts:LegendURL)"/>
			<xsl:choose>
				<xsl:when test="$numLayerLegendURL = 0">
					<ctl:message>Test skipped:  There are no wmts:LegendURL elements in the response, so the capabiltiy is considered to be not implemented.</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="results">
						<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:Layer[wmts:Style[wmts:LegendURL]]">
							<xsl:variable name="layer" select="."/>
							<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
							<!-- <ctl:message select="concat('Checking LegendURL resources for layer ', $layerId)"/> -->
							<xsl:for-each select="$layer/wmts:Style">
								<xsl:variable name="style" select="."/>
								<xsl:variable name="styleId" select="$style/ows:Identifier"/>
								<!-- <ctl:message select="concat('Checking LegendURL resources for style ', $styleId)"/> -->
								<xsl:for-each select="$style/wmts:LegendURL">
									<xsl:variable name="legendURL" select="."/>
									<xsl:variable name="minScaleDenominator" select="$legendURL/@minScaleDenominator"/>
									<xsl:variable name="maxScaleDenominator" select="$legendURL/@maxScaleDenominator"/>
									<xsl:variable name="error" select="concat('Error on LegendURL resource for layer ', $layerId, ' style ', $styleId, ': ')"/>
									<xsl:variable name="format" select="$legendURL/@format"/>
									<xsl:variable name="isImageFormat" select="string(wwwFunctions:image-format($format))"/>
									<xsl:if test="$isImageFormat != 'true' ">
										<ctl:message select="concat('Format ', $format, ' is not an image format ')"/>
										<xsl:text>false|</xsl:text>
									</xsl:if>
									<xsl:variable name="imageURI" select="$legendURL/@xlink:href"/>
									<xsl:choose>
										<xsl:when test="not($imageURI) or $imageURI = '' or not(starts-with($imageURI, 'http://'))">
											<ctl:message select="concat($error, 'Blank or invalid Image URI ', $imageURI)"/>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="imageFormat" select="concat('image/',ctlFunctions:getImageFormat($imageURI))"/>
											<xsl:if test="$imageFormat != $format">
												<ctl:message select="concat($error, 'Actual image format ', $imageFormat, ' does not match LegendURL format ', $format)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:variable name="tileMatrixSetNames" select="string-join(for $t in $layer/wmts:TileMatrixSetLink/wmts:TileMatrixSet return string($t), ',')"/>
											<xsl:variable name="scaleDenominators" select="wmtsFunctions:getScaleDenominators($capabilities.elt, $tileMatrixSetNames)"/>
											<!-- <xsl:message>scaleDenominators: <xsl:value-of select="$scaleDenominators"/></xsl:message> -->
											<xsl:if test="not(contains($scaleDenominators, $minScaleDenominator))">
												<ctl:message select="concat($error, 'MinScaleDenominator not found in scale Denominators for tile matrix sets ', $tileMatrixSetNames)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="not(contains($scaleDenominators, $maxScaleDenominator))">
												<ctl:message select="concat($error, 'MaxScaleDenominator not found in scale Denominators for tile matrix sets ', $tileMatrixSetNames)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:variable name="width" select="$legendURL/@width"/>
											<xsl:variable name="imageWidth" select="ctlFunctions:getImageWidth($imageURI)"/>
											<xsl:if test="$imageWidth != width">
												<ctl:message select="concat($error, 'Actual image width ', $imageWidth, ' does not match LegendURL width ', $width)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:variable name="height" select="$legendURL/@height"/>
											<xsl:variable name="imageHeight" select="ctlFunctions:getImageHeight($imageURI)"/>
											<xsl:if test="$imageHeight != $height">
												<ctl:message select="concat($error, 'Actual image height ', $imageHeight, ' does not match LegendURL height ', $height)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="contains($results, 'false')">
							<ctl:message>[FAILURE] Test failed.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Test passed:  LegendURL resources are correct.</ctl:message>
							<ctl:pass/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions.KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions.XML.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions.SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:description>
		<ctl:code>
			<xsl:variable name="numLayerLegendURL" select="count($capabilities.elt/wmts:Contents/wmts:Layer/wmts:Style/wmts:LegendURL)"/>
			<xsl:choose>
				<xsl:when test="$numLayerLegendURL = 0">
					<ctl:message>Test skipped: There are no wmts:LegendURL elements in the response, so the capabiltiy is considered to be not implemented.</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="results">
						<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:Layer[wmts:Style[wmts:LegendURL]]">
							<xsl:variable name="layer" select="."/>
							<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
							<!-- <ctl:message select="concat('Checking LegendURL resources for layer ', $layerId)"/> -->
							<xsl:for-each select="$layer/wmts:Style">
								<xsl:variable name="style" select="."/>
								<xsl:variable name="styleId" select="$style/ows:Identifier"/>
								<!-- <ctl:message select="concat('Checking LegendURL resources for style ', $styleId)"/> -->
								<xsl:for-each select="$style/wmts:LegendURL">
									<xsl:variable name="legendURL" select="."/>
									<xsl:variable name="minScaleDenominator" select="$legendURL/@minScaleDenominator"/>
									<xsl:variable name="maxScaleDenominator" select="$legendURL/@maxScaleDenominator"/>
									<ctl:message select="concat('Checking LegendURL resources for layer ', $layerId, ' style ', $styleId, ' minScaleDenominator ', $minScaleDenominator, ' maxScaleDenominator ', $maxScaleDenominator)"/>
									<xsl:variable name="format" select="$legendURL/@format"/>
									<xsl:variable name="isImageFormat" select="string(wwwFunctions:image-format($format))"/>
									<xsl:if test="$isImageFormat != 'true' ">
										<ctl:message select="concat('Format ', $format, ' is not an image format ')"/>
										<xsl:text>false|</xsl:text>
									</xsl:if>
									<xsl:variable name="imageURI" select="$legendURL/@xlink:href"/>
									<xsl:choose>
										<xsl:when test="not($imageURI) or $imageURI = '' or not(starts-with($imageURI, 'http://'))">
											<ctl:message select="concat('Blank or invalid Image URI ', $imageURI)"/>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="imageFormat" select="concat('image/',ctlFunctions:getImageFormat($imageURI))"/>
											<xsl:if test="$imageFormat != $format">
												<ctl:message select="concat('Actual image format ', $imageFormat, ' does not match LegendURL format ', $format)"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="contains($results, 'false')">
							<ctl:message>Test failed.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Test passed:  LegendURL resources are correct.</ctl:message>
							<ctl:pass/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the size of the LegendURL resource is the advertised width and the advertised height.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the size of the LegendURL resource is the advertised width and the advertised height.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that the size of the LegendURL resource is the advertised width and the advertised height.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
		
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that the size of the LegendURL resource is the advertised width and the advertised height.</ctl:description>
		<ctl:code>
			<xsl:variable name="numLayerLegendURL" select="count($capabilities.elt/wmts:Contents/wmts:Layer/wmts:Style/wmts:LegendURL)"/>
			<xsl:choose>
				<xsl:when test="$numLayerLegendURL = 0">
					<ctl:message>Test skipped: There are no wmts:LegendURL elements in the response, so the capabiltiy is considered to be not implemented.</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="results">
						<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:Layer[wmts:Style[wmts:LegendURL]]">
							<xsl:variable name="layer" select="."/>
							<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
							<!-- <ctl:message select="concat('Checking LegendURL resources for layer ', $layerId)"/> -->
							<xsl:for-each select="$layer/wmts:Style">
								<xsl:variable name="style" select="."/>
								<xsl:variable name="styleId" select="$style/ows:Identifier"/>
								<!-- <ctl:message select="concat('Checking LegendURL resources for style ', $styleId)"/> -->
								<xsl:for-each select="$style/wmts:LegendURL">
									<xsl:variable name="legendURL" select="."/>
									<xsl:variable name="minScaleDenominator" select="$legendURL/@minScaleDenominator"/>
									<xsl:variable name="maxScaleDenominator" select="$legendURL/@maxScaleDenominator"/>
									<ctl:message select="concat('Checking LegendURL resources for layer ', $layerId, ' style ', $styleId, ' minScaleDenominator ', $minScaleDenominator, ' maxScaleDenominator ', $maxScaleDenominator)"/>
									<xsl:variable name="imageURI" select="$legendURL/@xlink:href"/>
									<xsl:choose>
										<xsl:when test="not($imageURI) or $imageURI = '' or not(starts-with($imageURI, 'http://'))">
											<ctl:message select="concat('Blank or invalid Image URI ', $imageURI)"/>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="width" select="$legendURL/@width"/>
											<xsl:variable name="imageWidth" select="ctlFunctions:getImageWidth($imageURI)"/>
											<xsl:if test="$imageWidth != width">
												<ctl:message select="concat('Actual image width ', $imageWidth, ' does not match LegendURL width ', $width, ' for layer')"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:variable name="height" select="$legendURL/@height"/>
											<xsl:variable name="imageHeight" select="ctlFunctions:getImageHeight($imageURI)"/>
											<xsl:if test="$imageHeight != $height">
												<ctl:message select="concat('Actual image height ', $imageHeight, ' does not match LegendURL height ', $height,  ' for layer')"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="contains($results, 'false')">
							<ctl:message>Test failed.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Test passed:  LegendURL resources are correct.</ctl:message>
							<ctl:pass/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:description>
		<ctl:code>
			<xsl:variable name="tileMatrixSetNames" select="string-join(for $i in $capabilities.elt/wmts:Contents/wmts:TileMatrixSet/ows:Identifier return string($i), ',')"/>
			<xsl:variable name="results">
				<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:Layer">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="layerTileMatrixSetNames" select="string-join(for $t in $layer/wmts:TileMatrixSetLink/wmts:TileMatrixSet return string($t), ',')"/>
					<xsl:variable name="layerTileMatrixSetNameList" select="tokenize($layerTileMatrixSetNames, ',')"/>
					<xsl:for-each select="$layerTileMatrixSetNameList">
						<xsl:variable name="layerTileMatrixSetName" select="."/>
						<xsl:if test="not(contains($tileMatrixSetNames, $layerTileMatrixSetName))">
							<ctl:message select="concat('Layer ', $layerId, ' TileMatrixSet name ', $layerTileMatrixSetName, ' is not one of ', $tileMatrixSetNames)"/>
							<xsl:text>false|</xsl:text>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed:  Layer TileMatrixSet link names are correct.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:description>
		<ctl:code>
			<xsl:variable name="nonblankIdentifiers" select="every $i in $capabilities.elt/wmts:Contents/wmts:TileMatrixSet/ows:Identifier satisfies string($i) != '' "/>
			<xsl:variable name="numTileMatrixSetIdentifiers" select="count($capabilities.elt/wmts:Contents/wmts:TileMatrixSet/ows:Identifier)"/>
			<xsl:variable name="numDistinctTileMatrixSetIdentifiers" select="count(distinct-values($capabilities.elt/wmts:Contents/wmts:TileMatrixSet/ows:Identifier))"/>
			<xsl:variable name="uniqueIdentifiers" select="$numTileMatrixSetIdentifiers = $numDistinctTileMatrixSetIdentifiers"/>
			<xsl:variable name="results">
				<xsl:choose>
					<xsl:when test="$nonblankIdentifiers">
						<ctl:message>There are no blank tile matrix set identifiers in the response.</ctl:message>
						<xsl:text>true|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Some tile matrix set identifier in the response is blank.</ctl:message>
						<xsl:text>false|</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$numTileMatrixSetIdentifiers = 0">
						<ctl:message>There are no identified tile matrix sets in the response.</ctl:message>
						<ctl:text>false|</ctl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('There are ', $numTileMatrixSetIdentifiers, ' identified tile matrix sets in the response.')"/>
						<ctl:text>true|</ctl:text>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$uniqueIdentifiers">
						<ctl:message select="concat('There are ', $numDistinctTileMatrixSetIdentifiers, ' different tile matrix set identifiers in the response, so all the identified tile matrix sets have different identifiers')"/>
						<xsl:text>true|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('There are ', $numDistinctTileMatrixSetIdentifiers, ' different tile matrix set identifiers in the response, so some  identified tile matrix sets have the same identifiers')"/>
						<xsl:text>false|</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrix elements have different non empty identifiers within each TileMatrixSet. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrix elements have different non empty identifiers within each TileMatrixSet. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that TileMatrix elements have different non empty identifiers within each TileMatrixSet. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that TileMatrix elements have different non empty identifiers within each TileMatrixSet. </ctl:description>
		<ctl:code>
			<xsl:variable name="results">
				<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:TileMatrixSet">
					<xsl:variable name="tileMatrixSet" select="."/>
					<xsl:variable name="tileMatrixSetId" select="$tileMatrixSet/ows:Identifier"/>
					<xsl:variable name="nonblankIdentifiers" select="every $i in $tileMatrixSet/wmts:TileMatrix/ows:Identifier satisfies string($i) != '' "/>
					<xsl:variable name="numTileMatrixIdentifiers" select="count($tileMatrixSet/wmts:TileMatrix/ows:Identifier)"/>
					<xsl:variable name="numDistinctTileMatrixIdentifiers" select="count(distinct-values($tileMatrixSet/wmts:TileMatrix/ows:Identifier))"/>
					<xsl:variable name="uniqueIdentifiers" select="$numTileMatrixIdentifiers = $numDistinctTileMatrixIdentifiers"/>
					<xsl:if test="not($nonblankIdentifiers)">
						<ctl:message select="concat('Some tile matrix identifier in the tile matrix set ', $tileMatrixSetId, ' is blank.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
					<xsl:if test="$numTileMatrixIdentifiers = 0">
						<ctl:message select="concat('There are no identified tile matrix elements in the tile matrix set ', $tileMatrixSetId, '.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
					<xsl:if test="not($uniqueIdentifiers)">
						<ctl:message select="concat('Some tile matrix identifiers in the tile matrix set ', $tileMatrixSetId, ' are duplicates.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed:  TileMatrix elements have different non empty identifiers within each TileMatrixSet.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:description>
		<ctl:code>
			<xsl:variable name="results">
				<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:TileMatrixSet">
					<xsl:variable name="tileMatrixSet" select="."/>
					<xsl:variable name="tileMatrixSetId" select="$tileMatrixSet/ows:Identifier"/>
					<xsl:variable name="nonblankScaleDenominators" select="every $d in $tileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator satisfies string($d) != '' "/>
					<xsl:variable name="numTileMatrixScaleDenominators" select="count($tileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator)"/>
					<xsl:variable name="numDistinctTileMatrixScaleDenominators" select="count(distinct-values($tileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator))"/>
					<xsl:variable name="uniqueScaleDenominators" select="$numTileMatrixScaleDenominators = $numDistinctTileMatrixScaleDenominators"/>
					<xsl:if test="not($nonblankScaleDenominators)">
						<ctl:message select="concat('Some tile matrix scale denominator in the tile matrix set ', $tileMatrixSetId, ' is blank.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
					<xsl:if test="$numTileMatrixScaleDenominators = 0">
						<ctl:message select="concat('There are no identified scale denominator elements in the tile matrix set ', $tileMatrixSetId, '.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
					<xsl:if test="not($uniqueScaleDenominators)">
						<ctl:message select="concat('Some tile matrix scale denominators in the tile matrix set ', $tileMatrixSetId, ' are duplicates.')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed:  TileMatrix elements have different non empty scale denominators within each TileMatrixSet.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:description>
		<ctl:code>
			<xsl:variable name="numWellKnownScaleSet" select="count($capabilities.elt/wmts:Contents/wmts:TileMatrixSet/wmts:WellKnownScaleSet)"/>
			<xsl:choose>
				<xsl:when test="$numWellKnownScaleSet = 0">
					<ctl:message>Test skipped:  There are no wmts:WellKnownScaleSet elements in the response, so the capabiltiy is considered to be not implemented.</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="results">
						<xsl:for-each select="$capabilities.elt/wmts:Contents/wmts:TileMatrixSet[wmts:WellKnownScaleSet]">
							<xsl:variable name="tileMatrixSet" select="."/>
							<xsl:variable name="tileMatrixSetId" select="$tileMatrixSet/ows:Identifier"/>
							<xsl:variable name="supportedCRS" select="$tileMatrixSet/ows:SupportedCRS"/>
							<xsl:variable name="wellKnownScaleSet" select="$tileMatrixSet/wmts:WellKnownScaleSet"/>
							<xsl:value-of select="wmtsFunctions:checkCRSforWellKnownScaleSet($tileMatrixSetId, $supportedCRS, $wellKnownScaleSet)"/>
							<xsl:variable name="scaleDenominators" select="string-join(for $s in $tileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator return string($s), ',')"/>
							<ctl:call-function name="wmtsFunctions:checkScaleDenominatorsAgainstWellKnownScaleSet">
								<ctl:with-param name="wellKnownScaleSet" select="$wellKnownScaleSet"/>
								<ctl:with-param name="scaleDenominators" select="$scaleDenominators"/>
							</ctl:call-function>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="contains($results, 'false')">
							<ctl:message>Test failed.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Test passed:  TileMatrixSet Well Known Scale Sets match CRSs and scale denominators.</ctl:message>
							<ctl:pass/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetCapabilities.Response.Theme.LayerRef.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:CapabilitesResponseElement($capabilitiesURL, $method, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Theme.LayerRef.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetCapabilities.Response.Theme.LayerRef.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:XML.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Theme.LayerRef.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetCapabilities.Response.Theme.LayerRef.Valid">
		<ctl:param name="capabilitiesURL"/>
		<ctl:param name="service">OWS service type, e.g. WMTS</ctl:param>
		<ctl:description>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section.</ctl:description>
		<ctl:code>
			<xsl:variable name="capabilities.elt" select="owsFunctions:SOAP.CapabilitesResponseElement($capabilitiesURL, $service)"/>
			<xsl:if test="exists($capabilities.elt)">
				<ctl:call-function name="wmtsFunctions:check.GetCapabilities.Response.Theme.LayerRef.Valid">
					<ctl:with-param name="capabilities.elt" select="$capabilities.elt"/>
				</ctl:call-function>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:check.GetCapabilities.Response.Theme.LayerRef.Valid">
		<ctl:param name="capabilities.elt"/>
		<ctl:description>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section.</ctl:description>
		<ctl:code>
			<xsl:variable name="layerNames" select="string-join(for $i in $capabilities.elt/wmts:Contents/wmts:Layer/ows:Identifier return string($i), ',')"/>
			<xsl:variable name="results">
				<xsl:for-each select="$capabilities.elt/wmts:Themes/wmts:Theme/wmts:LayerRef">
					<xsl:variable name="layerRef" select="."/>
					<xsl:if test="not(contains($layerNames, $layerRef))">
						<ctl:message select="concat('LayerRef ', $layerRef, ' is not the identifier of a Layer in this capabilities document')"/>
						<xsl:text>false|</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed:  Theme layer references are correct.</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:minTileRow">
		<ctl:param name="tileMatrixLimits">wmts:TileMatrixLimits element</ctl:param>
		<ctl:code>
			<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
			<xsl:choose>
				<xsl:when test="$matrixLimits">
					<xsl:value-of select="xsd:integer($tileMatrixLimits/wmts:MinTileRow)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="xsd:integer(0)"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:maxTileRow">
		<ctl:param name="tileMatrixLimits">wmts:TileMatrixLimits element</ctl:param>
		<ctl:param name="tileMatrix">wmts:TileMatrix element</ctl:param>
		<ctl:code>
			<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
			<xsl:choose>
				<xsl:when test="$matrixLimits">
					<xsl:value-of select="xsd:integer($tileMatrixLimits/wmts:MaxTileRow)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="xsd:integer($tileMatrix/wmts:MatrixHeight) - 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:minTileCol">
		<ctl:param name="tileMatrixLimits">wmts:TileMatrixLimits element</ctl:param>
		<ctl:code>
			<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
			<xsl:choose>
				<xsl:when test="$matrixLimits">
					<xsl:value-of select="xsd:integer($tileMatrixLimits/wmts:MinTileCol)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="xsd:integer(0)"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:maxTileCol">
		<ctl:param name="tileMatrixLimits">wmts:TileMatrixLimits element</ctl:param>
		<ctl:param name="tileMatrix">wmts:TileMatrix element</ctl:param>
		<ctl:code>
			<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
			<xsl:choose>
				<xsl:when test="$matrixLimits">
					<xsl:value-of select="xsd:integer($tileMatrixLimits/wmts:MaxTileCol)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="xsd:integer($tileMatrix/wmts:MatrixWidth) - 1"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:getTileRows">
		<ctl:param name="minTileRow"/>
		<ctl:param name="midTileRow"/>
		<ctl:param name="maxTileRow"/>
		<ctl:code>
			<xsl:value-of select="$minTileRow"/>
			<xsl:if test="$midTileRow != $minTileRow">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$midTileRow"/>
			</xsl:if>
			<xsl:if test="$maxTileRow != $midTileRow">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$maxTileRow"/>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:getTileCols">
		<ctl:param name="minTileCol"/>
		<ctl:param name="midTileCol"/>
		<ctl:param name="maxTileCol"/>
		<ctl:code>
			<xsl:value-of select="$minTileCol"/>
			<xsl:if test="$midTileCol != $minTileCol">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$midTileCol"/>
			</xsl:if>
			<xsl:if test="$maxTileCol != $midTileCol">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$maxTileCol"/>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:getTileJs">
		<ctl:param name="minTileJ"/>
		<ctl:param name="midTileJ"/>
		<ctl:param name="maxTileJ"/>
		<ctl:code>
			<xsl:value-of select="$minTileJ"/>
			<xsl:if test="$midTileJ != $minTileJ">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$midTileJ"/>
			</xsl:if>
			<xsl:if test="$maxTileJ != $midTileJ">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$maxTileJ"/>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:getTileIs">
		<ctl:param name="minTileI"/>
		<ctl:param name="midTileI"/>
		<ctl:param name="maxTileI"/>
		<ctl:code>
			<xsl:value-of select="$minTileI"/>
			<xsl:if test="$midTileI != $minTileI">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$midTileI"/>
			</xsl:if>
			<xsl:if test="$maxTileI != $midTileI">
				<xsl:text>,</xsl:text>
				<xsl:value-of select="$maxTileI"/>
			</xsl:if>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:makeXMLpostGetTileRequest">
		<ctl:param name="version">WMTS version</ctl:param>
		<ctl:param name="layer"/>
		<ctl:param name="style"/>
		<ctl:param name="format"/>
		<ctl:param name="dimensionNames">comma separated list of dimension names, or empty if not applicable.</ctl:param>
		<ctl:param name="dimensionValues">comma separated list of dimension values for dimension names, or empty if none. </ctl:param>
		<ctl:param name="tileMatrixSet"/>
		<ctl:param name="tileMatrix"/>
		<ctl:param name="tileRow"/>
		<ctl:param name="tileCol"/>
		<ctl:description>Create an XML POST wmts:GetTile request document.  Execute xsl:attribute elements to assign them values in absence of attribute value template capability. Omits elements for blank parameters for use in missing parameter tests. </ctl:description>
		<ctl:code>
			<xsl:variable name="dimensionNamesList" select="tokenize($dimensionNames, ',')"/>
			<xsl:variable name="dimensionValuesList" select="tokenize($dimensionValues, ',')"/>
			<xsl:variable name="numDimensions" select="count($dimensionNamesList)"/>
			<wmts:GetTile service="WMTS" xmlns:wmts="http://www.opengis.net/wmts/1.0">
				<xsl:attribute name="version"><xsl:value-of select="$version"/></xsl:attribute>
				<xsl:if test="$layer != '' ">
					<wmts:Layer><xsl:value-of select="$layer"/></wmts:Layer>
				</xsl:if>
				<xsl:if test="$style != '' ">
					<wmts:Style><xsl:value-of select="$style"/></wmts:Style>
				</xsl:if>
				<xsl:if test="$format != '' ">
					<wmts:Format><xsl:value-of select="$format"/></wmts:Format>				
				</xsl:if>
				<xsl:for-each select="1 to $numDimensions">
					<xsl:variable name="pos" select="."/>
					<xsl:variable name="dimensionName" select="$dimensionNamesList[$pos]"/>
					<xsl:variable name="dimensionValue" select="$dimensionValuesList[$pos]"/>
					<wmts:DimensionNameValue>
						<xsl:attribute name="name"><xsl:value-of select="$dimensionName"/></xsl:attribute>
						<xsl:value-of select="$dimensionValue"/>
					</wmts:DimensionNameValue>
				</xsl:for-each>
				<xsl:if test="$tileMatrixSet != '' ">
					<wmts:TileMatrixSet><xsl:value-of select="$tileMatrixSet"/></wmts:TileMatrixSet>
				</xsl:if>
				<xsl:if test="$tileMatrix != '' ">
					<wmts:TileMatrix><xsl:value-of select="$tileMatrix"/></wmts:TileMatrix>
				</xsl:if>
				<xsl:if test="$tileRow != '' ">
					<wmts:TileRow><xsl:value-of select="$tileRow"/></wmts:TileRow>
				</xsl:if>
				<xsl:if test="$tileCol != '' ">
					<wmts:TileCol><xsl:value-of select="$tileCol"/></wmts:TileCol>
				</xsl:if>
			</wmts:GetTile> 
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Mandatory">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP GET GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                          <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                          <xsl:for-each select="$layer/wmts:Format[$formatPos]">
                             <xsl:variable name="format" select="."/>
                             <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                             <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                             <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>
														<xsl:value-of select="$method"/>
													</ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetTile</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('Test failed. Server.KVP.', upper-case($method), '.GetTile.Mandatory')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Mandatory')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Mandatory">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid XML POST GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
            <xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
											<xsl:variable name="dimensionNames"/>
											<xsl:variable name="dimensionValues"/>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed: Server.XML.POST.GetTile.Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed: Server.XML.POST.GetTile.Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
 
	<ctl:function name="wmtsFunctions:SOAP.GetTile.Mandatory">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid SOAP POST GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
											<xsl:variable name="dimensionNames"/>
											<xsl:variable name="dimensionValues"/>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>					
											</xsl:variable>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
											<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
											<xsl:variable name="instruction">
												<parsers:ImageParser>
													<parsers:type/>
													<parsers:height/>
													<parsers:width/>
												</parsers:ImageParser>
											</xsl:variable>
											<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
											<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
											<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
											<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
											<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
											<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
											<xsl:if test="number($width) = -1 or number($height) = -1">
												<ctl:message>Error: Could not read the image size.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<!-- 
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $format)) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
												<ctl:message>Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $imageFormat) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											-->
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed: Server.SOAP.POST.GetTile.Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed: Server.SOAP.POST.GetTile.Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Mandatory">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid RESTful GetTile requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  <!-- these must all have default -->
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
                                          <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                                <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                                <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix) + 1) idiv 2"/>
                                                <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
													<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
													<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
													<xsl:variable name="colList" select="tokenize($cols, ',')"/>
													<xsl:for-each select="$rowList">
														<xsl:variable name="row" select="."/>
														<xsl:for-each select="$colList">
															<xsl:variable name="col" select="."/>  
															<!-- <ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/> -->
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																	<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>  <!-- include HTTPParser to get status code --> 
																		<parsers:parse>
																			<parsers:ImageParser>
																				<parsers:type/>
																				<parsers:height/>
																				<parsers:width/>
																			</parsers:ImageParser>
																		</parsers:parse>
																	</parsers:HTTPParser> 
																</ctl:request> 
															</xsl:variable>
															<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message> -->
															<xsl:choose>
																<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																	<ctl:message>Error: Could not read the image format.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																	<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																	<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																	<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																	<xsl:variable name="code" select="$response/response/status/@code"/>
																	<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>										
																	<xsl:if test="number($width) = -1 or number($height) = -1">
																		<ctl:message>Error: Could not read the image size.</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	<!--
																	<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
																		<ctl:message>Error: imageFormat of image != request format</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	-->
																</xsl:otherwise>
															</xsl:choose>															
														</xsl:for-each>
													</xsl:for-each> 
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.  RESTful GetTile Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  RESTful GetTile Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Optional">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid KVP GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<!-- <ctl:message select="concat('dimensionsValues: ', $dimensionsValues)"/> -->
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:for-each select="$dimensionsValuesList">
										<xsl:variable name="dimsVals" select="."/>
										<xsl:if test="$dimsVals != '' ">
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimensionsValues ', $dimsVals)"/>
											<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>
														<xsl:value-of select="$method"/>
													</ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetTile</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<xsl:for-each select="$dimsValsList">
														<xsl:variable name="dv" select="."/>
														<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
														<xsl:variable name="value" select="substring-after($dv, ',')"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimension"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:for-each>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('Test failed. Server.KVP.', upper-case($method), '.GetTile.Optional')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetTile.Optional')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Optional">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid XML POST GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<!-- <ctl:message select="concat('dimensionsValues: ', $dimensionsValues)"/> -->
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:for-each select="$dimensionsValuesList">
										<xsl:variable name="dimsVals" select="."/>
										<xsl:if test="$dimsVals != '' ">
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimensionsValues ', $dimsVals)"/>
											<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$dimsValsList">
													<xsl:variable name="dv" select="."/>
													<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
													<xsl:value-of select="$dimension"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$dimsValsList">
													<xsl:variable name="dv" select="."/>
													<xsl:variable name="value" select="substring-after($dv, ',')"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.  Server.XML.POST.GetTile.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Optional">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid SOAP POST GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<!-- <ctl:message select="concat('dimensionsValues: ', $dimensionsValues)"/> -->
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:for-each select="$dimensionsValuesList">
										<xsl:variable name="dimsVals" select="."/>
										<xsl:if test="$dimsVals != '' ">
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimensionsValues ', $dimsVals)"/>
											<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$dimsValsList">
													<xsl:variable name="dv" select="."/>
													<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
													<xsl:value-of select="$dimension"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$dimsValsList">
													<xsl:variable name="dv" select="."/>
													<xsl:variable name="value" select="substring-after($dv, ',')"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>					
											</xsl:variable>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
											<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
											<xsl:variable name="instruction">
												<parsers:ImageParser>
													<parsers:type/>
													<parsers:height/>
													<parsers:width/>
												</parsers:ImageParser>
											</xsl:variable>
											<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
											<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
											<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
											<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
											<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
											<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
											<xsl:if test="number($width) = -1 or number($height) = -1">
												<ctl:message>Error: Could not read the image size.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<!-- 
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $format)) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
												<ctl:message>Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $imageFormat) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											-->
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.  Server.SOAP.POST.GetTile.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetTile.Optional">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles advertised in its Service Metadata document in response to valid RESTful GetTile requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<!-- <ctl:message select="concat('dimensionsValues: ', $dimensionsValues)"/> -->
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
                                            <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                            <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                                            <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                                <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix) + 1) idiv 2"/>
                                                <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:for-each select="$dimensionsValuesList">
														<xsl:variable name="dimsVals" select="."/>
														<xsl:if test="$dimsVals != '' ">
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimensionsValues ', $dimsVals)"/>
															<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$dimsValsList">
																	<xsl:variable name="dv" select="."/>
																	<!-- <xsl:variable name="dimension" select="substring-before($dv, ',')"/> -->
																	<xsl:variable name="value" select="substring-after($dv, ',')"/>
																	<!-- <ctl:message select="concat('dv: ', $dv, ' dimension: ', $dimension, ' value: ', $value)"/> -->
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<!-- <ctl:message select="concat('dimensionValues: ', $dimensionValues)"/> -->
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>  <!-- include HTTPParser to get status code --> 
																		<parsers:parse>
																			<parsers:ImageParser>
																				<parsers:type/>
																				<parsers:height/>
																				<parsers:width/>
																			</parsers:ImageParser>
																		</parsers:parse>
																	</parsers:HTTPParser> 
																</ctl:request> 
															</xsl:variable>
															<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message> -->
															<xsl:choose>
																<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																	<ctl:message>Error: Could not read the image format.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																	<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																	<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																	<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																	<xsl:variable name="code" select="$response/response/status/@code"/>
																	<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>										
																	<xsl:if test="number($width) = -1 or number($height) = -1">
																		<ctl:message>FAILURE: Could not read the image size.</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	<!--
																	<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
																		<ctl:message>Error: imageFormat of image != request format</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	-->
																</xsl:otherwise>
															</xsl:choose>															
														</xsl:if>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>	
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.  Server.RESTful.GetTile.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.RESTful.GetTile.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Missing">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory KVP GetTile parameter is missing from an otherwise valid request, the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select=" 'layer', 'style', 'format', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol' ">
										<xsl:variable name="missingParameter" select="."/>
										<xsl:variable name="message">
											<xsl:text>layer </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'layer' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$layerId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> style </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'style' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$styleId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> format </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'format' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$format"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> TileMatrixSet </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrixSet' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixSetId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> has limits </xsl:text>
											<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
											<xsl:text> TileMatrix </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrix' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> row </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileRow' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$row"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> col </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileCol' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$col"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:value-of select="$dimensionsMessage"/>
										</xsl:variable>
										<ctl:message select="$message"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>
													<xsl:value-of select="$method"/>
												</ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetTile</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<xsl:if test="not($missingParameter = 'layer')">
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'style')">
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'format')">
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'TileMatrixSet')">
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'TileMatrix')">
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'TileRow')">
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
												</xsl:if>
												<xsl:if test="not($missingParameter = 'TileCol')">
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
												</xsl:if>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
													<ctl:with-param name="locators">
														<xsl:value-of select="$missingParameter"/>
													</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetTile.Missing')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Missing')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetTile.Missing">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory KVP GetTile parameter is missing from an otherwise valid request, the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select=" 'layer', 'style', 'format', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol' ">
										<xsl:variable name="missingParameter" select="."/>
										<xsl:variable name="message">
											<xsl:text>layer </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'layer' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$layerId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> style </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'style' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$styleId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> format </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'format' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$format"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> TileMatrixSet </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrixSet' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixSetId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> has limits </xsl:text>
											<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
											<xsl:text> TileMatrix </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrix' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> row </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileRow' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$row"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> col </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileCol' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$col"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:value-of select="$dimensionsMessage"/>
										</xsl:variable>
										<ctl:message select="$message"/>
										<xsl:variable name="layerP">
											<xsl:if test="not($missingParameter = 'layer')">
												<xsl:value-of select="$layerId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="styleP">
											<xsl:if test="not($missingParameter = 'style')">
												<xsl:value-of select="$styleId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="formatP">
											<xsl:if test="not($missingParameter = 'format')">
												<xsl:value-of select="$format"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileMatrixSetP">
											<xsl:if test="not($missingParameter = 'TileMatrixSet')">
												<xsl:value-of select="$tileMatrixSetId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileMatrixP">
											<xsl:if test="not($missingParameter = 'TileMatrix')">
												<xsl:value-of select="$tileMatrixId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileRowP">
											<xsl:if test="not($missingParameter = 'TileRow')">
												<xsl:value-of select="$row"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileColP">
											<xsl:if test="not($missingParameter = 'TileCol')">
												<xsl:value-of select="$col"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerP, $styleP, $formatP, $dimensionNames, $dimensionValues, $tileMatrixSetP, $tileMatrixP, $tileRowP, $tileColP)"/>
										<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
													<ctl:with-param name="locators">
														<xsl:value-of select="$missingParameter"/>
													</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Missing">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory KVP GetTile parameter is missing from an otherwise valid request, the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select=" 'layer', 'style', 'format', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol' ">
										<xsl:variable name="missingParameter" select="."/>
										<xsl:variable name="message">
											<xsl:text>layer </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'layer' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$layerId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> style </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'style' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$styleId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> format </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'format' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$format"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> TileMatrixSet </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrixSet' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixSetId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> has limits </xsl:text>
											<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
											<xsl:text> TileMatrix </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileMatrix' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$tileMatrixId"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> row </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileRow' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$row"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:text> col </xsl:text>
											<xsl:choose>
												<xsl:when test="$missingParameter = 'TileCol' ">
													<xsl:text>MISSING </xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of select="$col"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:value-of select="$dimensionsMessage"/>
										</xsl:variable>
										<ctl:message select="$message"/>
										<xsl:variable name="layerP">
											<xsl:if test="not($missingParameter = 'layer')">
												<xsl:value-of select="$layerId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="styleP">
											<xsl:if test="not($missingParameter = 'style')">
												<xsl:value-of select="$styleId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="formatP">
											<xsl:if test="not($missingParameter = 'format')">
												<xsl:value-of select="$format"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileMatrixSetP">
											<xsl:if test="not($missingParameter = 'TileMatrixSet')">
												<xsl:value-of select="$tileMatrixSetId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileMatrixP">
											<xsl:if test="not($missingParameter = 'TileMatrix')">
												<xsl:value-of select="$tileMatrixId"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileRowP">
											<xsl:if test="not($missingParameter = 'TileRow')">
												<xsl:value-of select="$row"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="tileColP">
											<xsl:if test="not($missingParameter = 'TileCol')">
												<xsl:value-of select="$col"/>
											</xsl:if>
										</xsl:variable>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerP, $styleP, $formatP, $dimensionNames, $dimensionValues, $tileMatrixSetP, $tileMatrixP, $tileRowP, $tileColP)"/>
										<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been a soap:Fault/soap:Detail/ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
													<ctl:with-param name="locators">
														<xsl:value-of select="$missingParameter"/>
													</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Missing">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory RESTful GetTile parameter is missing from an otherwise valid request, the server throws an exception.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  <!-- these must all have default -->
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="missingStyleURLtemplate">
												<xsl:choose>
													<xsl:when test="contains($resourceURLtemplate, $styleId)">
														<xsl:value-of select="concat(substring-before($resourceURLtemplate, $styleId), '{style}', substring-after($resourceURLtemplate, $styleId))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$resourceURLtemplate"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable> 
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
															<xsl:variable name="dimensionNoDefault" select="."/>
															<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
															<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:for-each select=" 'style', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol' ">
														<xsl:variable name="missingParameter" select="."/>
														<xsl:variable name="message">
															<xsl:text>layer </xsl:text>
															<xsl:value-of select="$layerId"/>
															<xsl:text> style </xsl:text>
															<xsl:choose>
																<xsl:when test="$missingParameter = 'style' ">
																	<xsl:text>MISSING </xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="$styleId"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:text> format </xsl:text>
															<xsl:value-of select="$format"/>
															<xsl:text> TileMatrixSet </xsl:text>
															<xsl:choose>
																<xsl:when test="$missingParameter = 'TileMatrixSet' ">
																	<xsl:text>MISSING </xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="$tileMatrixSetId"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:text> has limits </xsl:text>
															<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
															<xsl:text> TileMatrix </xsl:text>
															<xsl:choose>
																<xsl:when test="$missingParameter = 'TileMatrix' ">
																	<xsl:text>MISSING </xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="$tileMatrixId"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:text> row </xsl:text>
															<xsl:choose>
																<xsl:when test="$missingParameter = 'TileRow' ">
																	<xsl:text>MISSING </xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="$row"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:text> col </xsl:text>
															<xsl:choose>
																<xsl:when test="$missingParameter = 'TileCol' ">
																	<xsl:text>MISSING </xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="$col"/>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:value-of select="$dimensionsMessage"/>
														</xsl:variable>
														<ctl:message select="$message"/>
														<xsl:variable name="restURL">
															<xsl:choose>
																<xsl:when test="$missingParameter = 'style' ">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$missingStyleURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																		<xsl:with-param name="style">MISSING</xsl:with-param> <!-- missing -->
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:when>
																<xsl:when test="$missingParameter = 'TileMatrixSet' ">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet">MISSING</xsl:with-param> <!-- missing -->
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:when>
																<xsl:when test="$missingParameter = 'TileMatrix' ">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix">MISSING</xsl:with-param> <!-- missing -->
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:when>
																<xsl:when test="$missingParameter = 'TileRow' ">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow">MISSING</xsl:with-param> <!-- missing -->
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:when>
																<xsl:when test="$missingParameter = 'TileCol' ">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol">MISSING</xsl:with-param> <!-- missing -->
																		<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:when>
															</xsl:choose>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:NullParser/>
																	</parsers:parse>
																</parsers:HTTPParser>
																<!--
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
																-->
															</ctl:request>
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="$code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
																				<ctl:with-param name="locators">
																					<xsl:value-of select="$missingParameter"/>
																				</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed. Server.RESTful.GetTile.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Missing</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.Layer">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">layer</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('Test failed.  Server.KVP.', upper-case($method), '.GetTile.Invalid.Layer')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.Layer')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.Layer">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">layer</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>	

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.Layer">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been a soap:Fault/soap:Detail/ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">layer</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>	
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.Layer">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Layer incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="bogusLayerId">BogusForTest</xsl:variable>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="invalidLayerURLtemplate" select="replace($resourceURLtemplate, $layerId, $bogusLayerId)"/>
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="$invalidLayerURLtemplate = $resourceURLtemplate">
											<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain layerId ', $layerId, ' to replace with an invalid value.')"/> 
											<xsl:text>skip|</xsl:text>
										</xsl:when>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<ctl:message select="concat('layer ', $bogusLayerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$invalidLayerURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$styleId"/>
															<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																			<ctl:with-param name="locators">layer</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetTile.Invalid.Layer</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.Layer</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrixSet">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$bogusTileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<!-- 	<ctl:with-param name="exceptionReport" select="$response/response/content/*"/> -->
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrixSet')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrixSet')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.TileMatrixSet">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $bogusTileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<!-- 	<ctl:with-param name="exceptionReport" select="$response/response/content/*"/> -->
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.TileMatrixSet">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $bogusTileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.SOAP.POST.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.SOAP.POST.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.TileMatrixSet">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($resourceURLtemplate,'{TileMatrixSet}'))">
											<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain {TileMatrixSet} parameter to replace with an invalid value.')"/> 
											<xsl:text>skip|</xsl:text>
										</xsl:when>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
													<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$styleId"/>
															<xsl:with-param name="tileMatrixSet" select="$bogusTileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																			<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.TileMatrix">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$bogusTileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrix</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrix')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrix')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.TileMatrix">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $bogusTileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->									
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrix</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.TileMatrix">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $bogusTileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->									
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">TileMatrix</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.SOAP.POST.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.SOAP.POST.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.TileMatrix">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a TileMatrix incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
													<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$styleId"/>
															<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$bogusTileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																			<ctl:with-param name="locators">TileMatrix</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$maxTileRow + 1"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileRow</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Row.TileMatrixSetLimits')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Row.TileMatrixSetLimits')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$maxTileRow + 1"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 		-->														
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileRow</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE]  Test failed.  Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$maxTileRow + 1"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 		-->														
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileRow</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$maxTileRow + 1"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$styleId"/>
															<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																			<ctl:with-param name="locators">TileRow</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$maxTileCol + 1"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileCol</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Col.TileMatrixSetLimits')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Col.TileMatrixSetLimits')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$maxTileCol + 1"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 	-->
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileCol</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$maxTileCol + 1"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 	-->
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
												<ctl:with-param name="locators">TileCol</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, 
    then the server throws an exception with code="TileOutOfRange" (see Table 23, A.3.5.5).</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$maxTileCol + 1"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$styleId"/>
															<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																			<ctl:with-param name="locators">TileCol</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Style">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>
												<xsl:value-of select="$method"/>
											</ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetTile</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">Style</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Style')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Style')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Style">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 	-->
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<!-- <parsers:NullParser/> don't echo response -->
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">Style</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>Test failed.  Server.XML.POST.GetTile.Invalid.Tile.Style</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.Tile.Style</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Style">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
									<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 	-->
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
												<ctl:with-param name="locators">Style</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">400</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Invalid.Tile.Style</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Invalid.Tile.Style</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invaild.Tile.Style"> 
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetTile a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($resourceURLtemplate,'{style}'))">
											<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain {style} parameter to replace with an invalid value.')"/> 
											<xsl:text>skip|</xsl:text>
										</xsl:when>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionsMessage">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="bogusStyleId">BogusForTest</xsl:variable>
													<ctl:message select="concat('layer ', $layerId, ' style ', $bogusStyleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
													<xsl:variable name="dimensionValues">
														<xsl:for-each select="$layer/wmts:Dimension">
															<xsl:variable name="dim" select="."/>
															<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
															<xsl:value-of select="$value"/>
															<xsl:if test="not(position() = last())">
																<xsl:text>,</xsl:text>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="restURL">
														<xsl:call-template name="wmts:RESTfulTemplateProcessor">
															<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
															<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
															<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
															<xsl:with-param name="style" select="$bogusStyleId"/>
															<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
															<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
															<xsl:with-param name="tileRow" select="$row"/>
															<xsl:with-param name="tileCol" select="$col"/>
															<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
															<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
														</xsl:call-template>
													</xsl:variable>
													<ctl:message select="concat('restURL: ', $restURL)"/>
													<xsl:variable name="response">
														<ctl:request>
															<ctl:url>
																<xsl:value-of select="$restURL"/>
															</ctl:url>
															<ctl:method>get</ctl:method>
															<parsers:HTTPParser>
																<parsers:parse>
																	<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																</parsers:parse>
															</parsers:HTTPParser>
														</ctl:request>
													</xsl:variable>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:choose>
														<xsl:when test="$code = '' ">
															<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:when test="$code = '200' ">
															<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																	<xsl:variable name="bestPracticeException">
																		<ctl:call-function name="owsFunctions:validateExceptionReport">
																			<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																			<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																			<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																			<ctl:with-param name="locators">Style</ctl:with-param>
																			<ctl:with-param name="oneOrAll">one</ctl:with-param>
																			<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																		</ctl:call-function>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains($bestPracticeException, 'false')">
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:text>bestPractice</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message select="concat('HTTP Status Code ', $code)"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.TileStyle</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetTile.Invalid.TileStyle</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.TileStyle</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.TileStyle</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.SampleDimension.Value">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<!--<xsl:variable name="serviceURL" select="'http://localhost:8080/wmts/Server.KVP.GET.GetTile.Invalid.SampleDimension.Value.xml'"/>-->
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="value">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>
													<xsl:value-of select="$method"/>
												</ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetTile</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:if>
												</xsl:for-each>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimensionId"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators" select="$dimensionId"/>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.SampleDimension.Value')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.SampleDimension.Value')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.SampleDimension.Value">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>	-->					
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators" select="$dimensionId"/>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.SampleDimension.Value">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>	-->					
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators" select="$dimensionId"/>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Invalid.SampleDimension.Value">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetTile request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">											
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
													<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
														<xsl:variable name="dimension" select="."/>
														<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																	<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																	<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:for-each select="$dimension/wmts:Value[1]">
															<xsl:variable name="value" select="."/>
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$layer/wmts:Dimension">
																	<xsl:variable name="dim" select="."/>
																	<xsl:variable name="value">
																		<xsl:choose>
																			<xsl:when test="position() = $dimensionPos">
																				<xsl:text>BogusForTest</xsl:text>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="$dim/wmts:Value[1]"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable> 
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>														
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>
																		<parsers:parse>
																			<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																		</parsers:parse>
																	</parsers:HTTPParser>
																</ctl:request>
															</xsl:variable>
															<xsl:variable name="code" select="$response/response/status/@code"/>
															<xsl:choose>
																<xsl:when test="$code = '' ">
																	<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:when test="$code = '200' ">
																	<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:choose>
																		<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																			<xsl:variable name="bestPracticeException">
																				<ctl:call-function name="owsFunctions:validateExceptionReport">
																					<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																					<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																					<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																					<ctl:with-param name="locators" select="$dimensionId"/>
																					<ctl:with-param name="oneOrAll">one</ctl:with-param>
																					<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																				</ctl:call-function>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains($bestPracticeException, 'false')">
																					<ctl:message select="concat('HTTP Status Code ', $code)"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:text>bestPractice</xsl:text>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:otherwise>
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Default.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="value">default</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>
													<xsl:value-of select="$method"/>
												</ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetTile</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:if>
												</xsl:for-each>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimensionId"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
												<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
													<parsers:parse>
														<parsers:ImageParser>
															<parsers:type/>
															<parsers:height/>
															<parsers:width/>
														</parsers:ImageParser>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
										<xsl:choose>
											<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
												<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
												<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
												<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
												<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
												<xsl:if test="number($width) = -1 or number($height) = -1">
													<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												<!--
												<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
													<ctl:message>Error: imageFormat of image != request format</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												-->
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Default.SampleDimension')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Default.SampleDimension')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Default.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">default</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
											</xsl:for-each>
											<xsl:value-of select="$dimValue"/>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>		-->				
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
													<parsers:parse>
														<parsers:ImageParser>
															<parsers:type/>
															<parsers:height/>
															<parsers:width/>
														</parsers:ImageParser>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
										<xsl:choose>
											<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
												<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
												<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
												<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
												<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
												<xsl:if test="number($width) = -1 or number($height) = -1">
													<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												<!--
												<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
													<ctl:message>Error: imageFormat of image != request format</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												-->
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Default.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">default</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
											</xsl:for-each>
											<xsl:value-of select="$dimValue"/>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
										<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>		-->				
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>					
										</xsl:variable>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
										<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
										<xsl:variable name="instruction">
											<parsers:ImageParser>
												<parsers:type/>
												<parsers:height/>
												<parsers:width/>
											</parsers:ImageParser>
										</xsl:variable>
										<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
										<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
										<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
										<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
										<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
										<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
										<xsl:if test="number($width) = -1 or number($height) = -1">
											<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
											<xsl:text>false|</xsl:text>
										</xsl:if>
											<!-- 
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $format)) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
												<ctl:message>Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $imageFormat) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											-->
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetTile.Default.SampleDimension">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">											
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
													<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
													<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
														<xsl:variable name="dimension" select="."/>
														<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																	<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																	<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="value">default</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value">
																	<xsl:choose>
																		<xsl:when test="position() = $dimensionPos">
																			<xsl:text>default</xsl:text>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="$dim/wmts:Value[1]"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable> 
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>														
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
																	<parsers:parse>
																		<parsers:ImageParser>
																			<parsers:type/>
																			<parsers:height/>
																			<parsers:width/>
																		</parsers:ImageParser>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request>
														</xsl:variable>
														<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
														<xsl:choose>
															<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																<xsl:variable name="code" select="$response/response/status/@code"/>
																<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>	
																<xsl:if test="number($width) = -1 or number($height) = -1">
																	<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:if>
																<!--
																<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
																	<ctl:message>Error: imageFormat of image != request format</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:if>
																-->
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Current.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="value">current</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>
													<xsl:value-of select="$method"/>
												</ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetTile</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:if>
												</xsl:for-each>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimensionId"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
												<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
													<parsers:parse>
														<parsers:ImageParser>
															<parsers:type/>
															<parsers:height/>
															<parsers:width/>
														</parsers:ImageParser>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
										<xsl:choose>
											<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
												<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
												<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
												<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
												<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
												<xsl:if test="number($width) = -1 or number($height) = -1">
													<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												<!--
												<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
													<ctl:message>Error: imageFormat of image != request format</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												-->
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Current.SampleDimension')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Current.SampleDimension')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Current.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">current</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
											</xsl:for-each>
											<xsl:value-of select="$dimValue"/>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
										<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>	-->					
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
													<parsers:parse>
														<parsers:ImageParser>
															<parsers:type/>
															<parsers:height/>
															<parsers:width/>
														</parsers:ImageParser>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
										<xsl:choose>
											<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
												<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
												<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
												<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
												<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>													
												<xsl:if test="number($width) = -1 or number($height) = -1">
													<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												<!--
												<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
													<ctl:message>Error: imageFormat of image != request format</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:if>
												-->
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Current.SampleDimension">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
									<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
									<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
										<xsl:variable name="dimension" select="."/>
										<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimValue">current</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
											</xsl:for-each>
											<xsl:value-of select="$dimensionId"/>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
											</xsl:for-each>
											<xsl:value-of select="$dimValue"/>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
										<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message>	-->					
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>					
										</xsl:variable>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
										<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
										<xsl:variable name="instruction">
											<parsers:ImageParser>
												<parsers:type/>
												<parsers:height/>
												<parsers:width/>
											</parsers:ImageParser>
										</xsl:variable>
										<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
										<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
										<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
										<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
										<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
										<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
										<xsl:if test="number($width) = -1 or number($height) = -1">
											<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
											<xsl:text>false|</xsl:text>
										</xsl:if>
											<!-- 
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $format)) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
												<ctl:message>Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $imageFormat) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											-->
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetTile.Current.SampleDimension">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return tiles in response to valid KVP GET GetTile requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">											
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="row" select="$midTileRow"/>
													<xsl:variable name="col" select="$midTileCol"/>
													<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
													<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
													<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
														<xsl:variable name="dimension" select="."/>
														<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																	<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																	<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="value">current</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value">
																	<xsl:choose>
																		<xsl:when test="position() = $dimensionPos">
																			<xsl:text>current</xsl:text>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:value-of select="$dim/wmts:Value[1]"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable> 
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>														
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
																	<parsers:parse>
																		<parsers:ImageParser>
																			<parsers:type/>
																			<parsers:height/>
																			<parsers:width/>
																		</parsers:ImageParser>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request>
														</xsl:variable>
														<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message>	-->
														<xsl:choose>
															<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																<xsl:variable name="code" select="$response/response/status/@code"/>
																<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>	
																<xsl:if test="number($width) = -1 or number($height) = -1">
																	<ctl:message>Error: Could not read the image size.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:if>
																<!--
																<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
																	<ctl:message>Error: imageFormat of image != request format</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:if>
																-->
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<!-- /text()[. = 'image/jpeg']  for ImageParser debug -->
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>
														<xsl:value-of select="$method"/>
													</ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetTile</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:for-each>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>parsers:metadata <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
													<!--
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
													<xsl:if test="not(contains($format, $imageFormat))">
														<ctl:message>[FAILURE] Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Format')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Format')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Valid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<!-- /text()[. = 'image/jpeg']  for ImageParser debug -->
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>parsers:metadata <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
													<!--
													<xsl:if test="number($width) = -1 or number($height) = -1">
														<ctl:message>Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
													<xsl:if test="not(contains($format, $imageFormat))">
														<ctl:message>[FAILURE] Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<!-- /text()[. = 'image/jpeg']  for ImageParser debug -->
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>					
											</xsl:variable>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
											<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
											<xsl:variable name="instruction">
												<parsers:ImageParser>
													<parsers:type/>
													<parsers:height/>
													<parsers:width/>
												</parsers:ImageParser>
											</xsl:variable>
											<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
											<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
											<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
											<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
											<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
											<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
											<xsl:if test="number($width) = -1 or number($height) = -1">
												<ctl:message>Error: Could not read the image size.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="not(contains($format, $wmtsImageFormat))">
												<ctl:message>[FAILURE] Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="not(contains($format, $imageFormat))">
												<ctl:message>[FAILURE] Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="not(contains($imageFormat, $wmtsImageFormat))">
												<ctl:message>[FAILURE] Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Format">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid RESTful GetTile requests with the tile formats advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are in the MIME types of the requested formats.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<!-- /text()[. = 'image/jpeg']  for ImageParser debug -->
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">											
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
													<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
													<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
													<xsl:variable name="colList" select="tokenize($cols, ',')"/>
													<xsl:for-each select="$rowList">
														<xsl:variable name="row" select="."/>
														<xsl:for-each select="$colList">
															<xsl:variable name="col" select="."/>
															<xsl:variable name="dimensionsMessage">
																<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																	<xsl:variable name="dimensionNoDefault" select="."/>
																	<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																	<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																	<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																</xsl:for-each>
															</xsl:variable>
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$layer/wmts:Dimension">
																	<xsl:variable name="dim" select="."/>
																	<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>														
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>   
																		<parsers:parse>
																			<parsers:ImageParser>
																				<parsers:type/>
																				<parsers:height/>
																				<parsers:width/>
																			</parsers:ImageParser>
																		</parsers:parse>
																	</parsers:HTTPParser>
																</ctl:request> 
															</xsl:variable>
															<!-- <xsl:message>parsers:metadata <xsl:copy-of select="$response"/></xsl:message>	-->
															<xsl:choose>
																<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																	<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																	<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																	<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																	<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																	<xsl:variable name="code" select="$response/response/status/@code"/>
																	<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
																	<!--
																	<xsl:if test="number($width) = -1 or number($height) = -1">
																		<ctl:message>Error: Could not read the image size.</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	-->
																	<xsl:if test="not(contains($format, $imageFormat))">
																		<ctl:message>[FAILURE] Error: imageFormat of image != request format</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>		
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Invalid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Test that the responses returned by a WMTS server to KVP GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="format">image/bogus</xsl:variable>
						<!-- <ctl:message select="concat(' format ', $format)"/> -->
						<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
						<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
							<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
							<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
							<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
							<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
							<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
							<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
							<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
								<xsl:variable name="tileMatrix" select="."/>
								<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
								<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
								<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
								<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
								<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
								<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
								<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
								<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
								<xsl:variable name="row" select="$midTileRow"/>
								<xsl:variable name="col" select="$midTileCol"/>
								<xsl:variable name="dimensionsMessage">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
										<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
										<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
									</xsl:for-each>
								</xsl:variable>
								<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
								<xsl:variable name="response">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>
											<xsl:value-of select="$method"/>
										</ctl:method>
										<ctl:param name="service">WMTS</ctl:param>
										<ctl:param name="request">GetTile</ctl:param>
										<ctl:param name="version">
											<xsl:value-of select="$version"/>
										</ctl:param>
										<ctl:param name="layer">
											<xsl:value-of select="$layerId"/>
										</ctl:param>
										<ctl:param name="style">
											<xsl:value-of select="$styleId"/>
										</ctl:param>
										<ctl:param name="format">
											<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
										</ctl:param>
										<ctl:param name="TileMatrixSet">
											<xsl:value-of select="$tileMatrixSetId"/>
										</ctl:param>
										<ctl:param name="TileMatrix">
											<xsl:value-of select="$tileMatrixId"/>
										</ctl:param>
										<ctl:param name="TileRow">
											<xsl:value-of select="$row"/>
										</ctl:param>
										<ctl:param name="TileCol">
											<xsl:value-of select="$col"/>
										</ctl:param>
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<ctl:dynamicParam>
												<ctl:name>
													<xsl:value-of select="$dimNoDefaultName"/>
												</ctl:name>
												<ctl:value>
													<xsl:value-of select="$value"/>
												</ctl:value>
											</ctl:dynamicParam>
										</xsl:for-each>
										<parsers:HTTPParser>
											<parsers:parse>
												<!-- <parsers:NullParser/> don't echo response -->
												<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
											</parsers:parse>
										</parsers:HTTPParser>
									</ctl:request>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="not($response/response/content/*)">
										<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:if test="$code != '' ">
											<ctl:message select="concat('HTTP status code ', $code)"/>
										</xsl:if>
										<xsl:text>false|</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="owsFunctions:validateExceptionReport">
											<ctl:with-param name="httpParserExceptionReport" select="$response"/>
											<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
											<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
											<ctl:with-param name="locators">format</ctl:with-param>
											<ctl:with-param name="oneOrAll">one</ctl:with-param>
											<ctl:with-param name="httpStatusCode">400</ctl:with-param>
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Format')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.Tile.Format')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Invalid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Test that the responses returned by a WMTS server to KVP GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="format">image/bogus</xsl:variable>
						<!-- <ctl:message select="concat(' format ', $format)"/> -->
						<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
						<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
							<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
							<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
							<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
							<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
							<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
							<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
							<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
								<xsl:variable name="tileMatrix" select="."/>
								<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
								<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
								<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
								<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
								<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
								<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
								<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
								<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
								<xsl:variable name="row" select="$midTileRow"/>
								<xsl:variable name="col" select="$midTileCol"/>
								<xsl:variable name="dimensionsMessage">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
										<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
										<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
									</xsl:for-each>
								</xsl:variable>
								<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
								<xsl:variable name="dimensionNames">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
										<xsl:value-of select="$dimNoDefaultName"/>
										<xsl:if test="not(position() = last())">
											<xsl:text>,</xsl:text>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="dimensionValues">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
										<xsl:value-of select="$value"/>
										<xsl:if test="not(position() = last())">
											<xsl:text>,</xsl:text>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
								<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
								<xsl:variable name="response">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<xsl:copy-of select="$postBody"/>
										</ctl:body>
										<parsers:HTTPParser>
											<parsers:parse>
												<!-- <parsers:NullParser/> don't echo response -->
												<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
											</parsers:parse>
										</parsers:HTTPParser>
									</ctl:request>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="not($response/response/content/*)">
										<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:if test="$code != '' ">
											<ctl:message select="concat('HTTP status code ', $code)"/>
										</xsl:if>
										<xsl:text>false|</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="owsFunctions:validateExceptionReport">
											<ctl:with-param name="httpParserExceptionReport" select="$response"/>
											<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
											<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
											<ctl:with-param name="locators">format</ctl:with-param>
											<ctl:with-param name="oneOrAll">one</ctl:with-param>
											<ctl:with-param name="httpStatusCode">400</ctl:with-param>
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Invalid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Invalid.Tile.Format">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Test that the responses returned by a WMTS server to KVP GetTile requests with tile formats not advertised in the Service Metadata Document for each layer, and each sample dimension if applicable, are valid exception reports.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="format">image/bogus</xsl:variable>
						<!-- <ctl:message select="concat(' format ', $format)"/> -->
						<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
						<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
							<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
							<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
							<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
							<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
							<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
							<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
							<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
								<xsl:variable name="tileMatrix" select="."/>
								<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
								<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
								<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
								<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
								<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
								<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
								<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
								<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
								<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
								<xsl:variable name="row" select="$midTileRow"/>
								<xsl:variable name="col" select="$midTileCol"/>
								<xsl:variable name="dimensionsMessage">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
										<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
										<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
									</xsl:for-each>
								</xsl:variable>
								<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
								<xsl:variable name="dimensionNames">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
										<xsl:value-of select="$dimNoDefaultName"/>
										<xsl:if test="not(position() = last())">
											<xsl:text>,</xsl:text>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="dimensionValues">
									<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
										<xsl:variable name="dimensionNoDefault" select="."/>
										<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
										<xsl:value-of select="$value"/>
										<xsl:if test="not(position() = last())">
											<xsl:text>,</xsl:text>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
								<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
								<xsl:variable name="response">
									<ctl:soap-request  version="1.2" charset="utf-8">
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:body>
											<xsl:copy-of select="$postBody"/>
										</ctl:body>
										<parsers:HTTPParser>
											<parsers:parse>
												<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
											</parsers:parse>
										</parsers:HTTPParser>
									</ctl:soap-request>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="not($response/response/content/*)">
										<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:if test="$code != '' ">
											<ctl:message select="concat('HTTP status code ', $code)"/>
										</xsl:if>
										<xsl:text>false|</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
											<ctl:with-param name="httpParserExceptionReport" select="$response"/>
											<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
											<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
											<ctl:with-param name="locators">format</ctl:with-param>
											<ctl:with-param name="oneOrAll">one</ctl:with-param>
											<ctl:with-param name="httpStatusCode">400</ctl:with-param>
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Invalid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Invalid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Size">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
    <ctl:param name="image-format">Image media type</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GET GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:description>
		<ctl:code>
      <!-- getSupportedImageTypes() returns comma-delimited list -->
      <xsl:variable name="known-image-types-seq" select="tokenize(ctlFunctions:getSupportedImageTypes(), ',')" />
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
					  <xsl:variable name="format" select="$image-format"/>
						<!-- <ctl:message select="concat('format ', $format)"/> -->
						<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="number($tileMatrix/wmts:TileWidth)"/>
									<xsl:variable name="tileHeight" select="number($tileMatrix/wmts:TileHeight)"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>
														<xsl:value-of select="$method"/>
													</ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetTile</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:for-each>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>                   
											<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
                      <xsl:variable name="image-type" select="$response//header[lower-case(@name) eq 'content-type']"/>
											<xsl:choose>
                        <!-- Check if image subtype is in list of known types -->
                        <xsl:when test="empty(index-of($known-image-types-seq, substring-after($image-type,'/')))">
                          <ctl:message>[SKIP] Unsupported image content type: <xsl:value-of select="$image-type"/></ctl:message>
                          <xsl:text>skip|</xsl:text>
                        </xsl:when>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="parsedImageWidth" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="parsedImageHeight" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $parsedImageWidth, ' height ', $parsedImageHeight, ' HTTP status code ', $code)"/>		
													<xsl:if test="number($parsedImageWidth) = -1 or number($parsedImageHeight) = -1">
														<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<xsl:if test="$parsedImageWidth != $tileWidth">
														<ctl:message select="concat('parsedImageWidth ', $parsedImageWidth, ' does not equal tileWidth ', $tileWidth, ' from capabilities document')"/>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<xsl:if test="$parsedImageHeight != $tileHeight">
														<ctl:message select="concat('parsedImageHeight ', $parsedImageHeight, ' does not equal tileHeight ', $tileHeight, ' from capabilities document')"/>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
        <xsl:when test="contains($results, 'skip')">
					<ctl:message select="concat('Test skipped. Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Size')"/>
					<ctl:skipped />
				</xsl:when>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Size')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Size')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Valid.Tile.Size">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GET GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing XML POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="number($tileMatrix/wmts:TileWidth)"/>
									<xsl:variable name="tileHeight" select="number($tileMatrix/wmts:TileHeight)"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
														<parsers:parse>
															<parsers:ImageParser>
																<parsers:type/>
																<parsers:height/>
																<parsers:width/>
															</parsers:ImageParser>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:choose>
												<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
													<ctl:message>[FAILURE] Error: Could not read the image format.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
													<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
													<xsl:variable name="parsedImageWidth" select="$response/response/content/parsers:ImageParser/parsers:width"/>
													<xsl:variable name="parsedImageHeight" select="$response/response/content/parsers:ImageParser/parsers:height"/>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $parsedImageWidth, ' height ', $parsedImageHeight, ' HTTP status code ', $code)"/>		
													<xsl:if test="number($parsedImageWidth) = -1 or number($parsedImageHeight) = -1">
														<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<xsl:if test="$parsedImageWidth != $tileWidth">
														<ctl:message select="concat('parsedImageWidth ', $parsedImageWidth, ' does not equal tileWidth ', $tileWidth, ' from capabilities document')"/>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<xsl:if test="$parsedImageHeight != $tileHeight">
														<ctl:message select="concat('parsedImageHeight ', $parsedImageHeight, ' does not equal tileHeight ', $tileHeight, ' from capabilities document')"/>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													<!--
													<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
														<ctl:message>Error: imageFormat of image != request format</ctl:message>
														<xsl:text>false|</xsl:text>
													</xsl:if>
													-->
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetTile.Valid.Tile.Size</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetTile.Valid.Tile.Size</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Size">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid KVP GET GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetTile requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="number($tileMatrix/wmts:TileWidth)"/>
									<xsl:variable name="tileHeight" select="number($tileMatrix/wmts:TileHeight)"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
									<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
									<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
									<xsl:variable name="colList" select="tokenize($cols, ',')"/>
									<xsl:for-each select="$rowList">
										<xsl:variable name="row" select="."/>
										<xsl:for-each select="$colList">
											<xsl:variable name="col" select="."/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
												</xsl:for-each>
											</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
											<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> -->
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>					
											</xsl:variable>
											<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
											<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
											<xsl:variable name="instruction">
												<parsers:ImageParser>
													<parsers:type/>
													<parsers:height/>
													<parsers:width/>
												</parsers:ImageParser>
											</xsl:variable>
											<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
											<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
											<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
											<xsl:variable name="parsedImageWidth" select="$response2/parsers:ImageParser/parsers:width"/>
											<xsl:variable name="parsedImageHeight" select="$response2/parsers:ImageParser/parsers:height"/>
											<ctl:message select="concat('response wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $parsedImageWidth, ' height ', $parsedImageHeight, ' HTTP status code ', $code)"/>
											<xsl:if test="number($parsedImageWidth) = -1 or number($parsedImageHeight) = -1">
												<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="$parsedImageWidth != $tileWidth">
												<ctl:message select="concat('parsedImageWidth ', $parsedImageWidth, ' does not equal tileWidth ', $tileWidth, ' from capabilities document')"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="$parsedImageHeight != $tileHeight">
												<ctl:message select="concat('parsedImageHeight ', $parsedImageHeight, ' does not equal tileHeight ', $tileHeight, ' from capabilities document')"/>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<!--
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $format)) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
												<ctl:message>Error: imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent != request format</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											<xsl:if test="string(wwwFunctions:mime-match($wmtsImageFormat, $imageFormat) = 'false' ">
												<ctl:message>Error:  wmtsImageFormat from wmts:BinaryPayload/wmtsFormat !=  imageFormat of image from wmtsBinaryPayload/wmts:BinaryContent</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:if>
											-->
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetTile.Valid.Tile.Size</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetTile.Valid.Tile.Size</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Size">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that the tiles returned by a WMTS server in response to valid RESTful GetTile requests with the tile sizes (TileWidth and TileHeight) advertised in the Service Metadata Document for each TileMatrix in the TileMatrixSet of a Layer, and for each sample dimension of Layers with Dimensions, are the advertised sizes. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
							<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
							<xsl:choose>
								<xsl:when test="$resourceURLtemplate != '' ">
									<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
									<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
									<xsl:choose>
										<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">											
											<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
											<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
											<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
												<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
												<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
												<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
												<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
												<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
												<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
												<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
													<xsl:variable name="tileMatrix" select="."/>
													<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
													<xsl:variable name="tileWidth" select="number($tileMatrix/wmts:TileWidth)"/>
													<xsl:variable name="tileHeight" select="number($tileMatrix/wmts:TileHeight)"/>
													<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
													<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
													<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
													<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
													<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
													<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
													<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
													<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
													<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
													<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
													<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
													<xsl:variable name="colList" select="tokenize($cols, ',')"/>
													<xsl:for-each select="$rowList">
														<xsl:variable name="row" select="."/>
														<xsl:for-each select="$colList">
															<xsl:variable name="col" select="."/>
															<xsl:variable name="dimensionsMessage">
																<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																	<xsl:variable name="dimensionNoDefault" select="."/>
																	<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																	<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																	<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																</xsl:for-each>
															</xsl:variable>
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, $dimensionsMessage)"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$layer/wmts:Dimension">
																	<xsl:variable name="dim" select="."/>
																	<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>														
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>   
																		<parsers:parse>
																			<parsers:ImageParser>
																				<parsers:type/>
																				<parsers:height/>
																				<parsers:width/>
																			</parsers:ImageParser>
																		</parsers:parse>
																	</parsers:HTTPParser>
																</ctl:request> 
															</xsl:variable>
															<!-- <xsl:message>parsers:metadata <xsl:copy-of select="$response"/></xsl:message>	-->
															<xsl:choose>
																<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
																	<ctl:message>Error: Could not read the image format.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
																	<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
																	<xsl:variable name="parsedImageWidth" select="$response/response/content/parsers:ImageParser/parsers:width"/>
																	<xsl:variable name="parsedImageHeight" select="$response/response/content/parsers:ImageParser/parsers:height"/>
																	<xsl:variable name="code" select="$response/response/status/@code"/>
																	<ctl:message select="concat('response imageFormat ', $imageFormat, ' width ', $parsedImageWidth, ' height ', $parsedImageHeight, ' HTTP status code ', $code)"/>		
																	<xsl:if test="number($parsedImageWidth) = -1 or number($parsedImageHeight) = -1">
																		<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	<xsl:if test="$parsedImageWidth != $tileWidth">
																		<ctl:message select="concat('parsedImageWidth ', $parsedImageWidth, ' does not equal tileWidth ', $tileWidth, ' from capabilities document')"/>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	<xsl:if test="$parsedImageHeight != $tileHeight">
																		<ctl:message select="concat('parsedImageHeight ', $parsedImageHeight, ' does not equal tileHeight ', $tileHeight, ' from capabilities document')"/>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	<!--
																	<xsl:if test="string(wwwFunctions:mime-match($imageFormat, $format)) = 'false' ">
																		<ctl:message>Error: imageFormat of image != request format</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:if>
																	-->
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:when>		
										<xsl:otherwise>
											<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
											<xsl:text>false|</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
									<xsl:text>false|</xsl:text>
								</xsl:otherwise>	
							</xsl:choose>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetTile.Valid.Tile.Format</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetTile.Valid.Tile.Transparency">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Verify that the returned tile has transparent color for NODATA values. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="results">
				<xsl:variable name="hasTransparentLayer" select="boolean($wmts.capabilities.doc//wmts:Contents/wmts:Layer[contains(.,'Transparent')])"/>
				<xsl:variable name="layer" select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')] and (contains(.,'Transparent') or not($hasTransparentLayer))][1]"/>
				<xsl:variable name="layerId" select="string($layer/ows:Identifier)"/>
				<xsl:variable name="transparentStyleId" select="string($layer/wmts:Style[contains(.,'Transparent')][1]/ows:Identifier)"/>
				<xsl:variable name="styleId" select="if ($transparentStyleId='') then string($layer/wmts:Style[1]/ows:Identifier) else $transparentStyleId"/>
				<xsl:variable name="format" select="string($layer/wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')][1])"/>
				<xsl:variable name="tileMatrixSetId" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSet"/>
				<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
				<xsl:variable name="tileMatrix" select="$tileMatrixSet/wmts:TileMatrix[1]"/>
				<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
				<xsl:variable name="tileMatrixLimits" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits[1]"/>
				<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
				<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
				<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
				<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
				<xsl:variable name="row" select="$midTileRow"/>
				<xsl:variable name="col" select="$midTileCol"/>
				<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
				<xsl:variable name="response">
					<ctl:request>
						<!-- <ctl:url>http://localhost:8080/teamengine/data/nodataSquare.png</ctl:url> -->
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:method>
							<xsl:value-of select="$method"/>
						</ctl:method>
						<ctl:param name="service">WMTS</ctl:param>
						<ctl:param name="request">GetTile</ctl:param>
						<ctl:param name="version">
							<xsl:value-of select="$version"/>
						</ctl:param>
						<ctl:param name="layer">
							<xsl:value-of select="$layerId"/>
						</ctl:param>
						<ctl:param name="style">
							<xsl:value-of select="$styleId"/>
						</ctl:param>
						<ctl:param name="format">
							<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
						</ctl:param>
						<ctl:param name="TileMatrixSet">
							<xsl:value-of select="$tileMatrixSetId"/>
						</ctl:param>
						<ctl:param name="TileMatrix">
							<xsl:value-of select="$tileMatrixId"/>
						</ctl:param>
						<ctl:param name="TileRow">
							<xsl:value-of select="$row"/>
						</ctl:param>
						<ctl:param name="TileCol">
							<xsl:value-of select="$col"/>
						</ctl:param> 
						<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
							<parsers:parse>
								<parsers:ImageParser>
									<parsers:type/>
									<parsers:height/>
									<parsers:width/>
									<parsers:model value="ARGB">
										<parsers:count bands="A" sample="0x00"/>
									</parsers:model>
								</parsers:ImageParser>
							</parsers:parse>
						</parsers:HTTPParser>
					</ctl:request>
				</xsl:variable>
				<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
				<xsl:choose>
					<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
						<ctl:message>[FAILURE] Error: Could not read the image type.</ctl:message>
						<xsl:text>false|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
						<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
						<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
						<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
						<xsl:variable name="transparentPixelCount" select="$response/response/content/parsers:ImageParser/parsers:model/parsers:count"/>
						<xsl:variable name="code" select="$response/response/status/@code"/>
						<ctl:message select="concat('response image: ', $transparentPixelCount, ' transparent pixels: ', ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>		
						<xsl:choose>
							<xsl:when test="number($width) = -1 or number($height) = -1">
								<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0 and $hasTransparentLayer">
								<ctl:message>[FAILURE] No transparent pixels in layer that contains the word &quot;Transparent&quot;.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0">
								<ctl:message>Indeterminate: No transparent pixels in the image. If there is a layer that supports transparency, identify it by using the word &quot;Transparent&quot; in the layer title, description, or keywords.</ctl:message>
								<xsl:text>indeterminate|</xsl:text>
							</xsl:when>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Transparency')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'indeterminate')">
					<ctl:message select="concat('[WARNING] Test inconclusive: Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Transparency')"/>
					<ctl:warning/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetTile.Valid.Tile.Transparency')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetTile.Valid.Tile.Transparency">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that the returned tile has transparent color for NODATA values. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="results">
				<xsl:variable name="hasTransparentLayer" select="boolean($wmts.capabilities.doc//wmts:Contents/wmts:Layer[contains(.,'Transparent')])"/>
				<xsl:variable name="layer" select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')] and (contains(.,'Transparent') or not($hasTransparentLayer))][1]"/>
				<xsl:variable name="layerId" select="string($layer/ows:Identifier)"/>
				<xsl:variable name="transparentStyleId" select="string($layer/wmts:Style[contains(.,'Transparent')][1]/ows:Identifier)"/>
				<xsl:variable name="styleId" select="if ($transparentStyleId='') then string($layer/wmts:Style[1]/ows:Identifier) else $transparentStyleId"/>
				<xsl:variable name="format" select="string($layer/wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')][1])"/>
				<xsl:variable name="tileMatrixSetId" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSet"/>
				<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
				<xsl:variable name="tileMatrix" select="$tileMatrixSet/wmts:TileMatrix[1]"/>
				<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
				<xsl:variable name="tileMatrixLimits" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits[1]"/>
				<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
				<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
				<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
				<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
				<xsl:variable name="row" select="$midTileRow"/>
				<xsl:variable name="col" select="$midTileCol"/>
				<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
				<xsl:variable name="dimensionNames"></xsl:variable>
				<xsl:variable name="dimensionValues"></xsl:variable>
				<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
				<xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 											
				<xsl:variable name="response">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<xsl:copy-of select="$postBody"/>
						</ctl:body>
						<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
							<parsers:parse>
								<parsers:ImageParser>
									<parsers:type/>
									<parsers:height/>
									<parsers:width/>
									<parsers:transparency/>
									<parsers:model value="ARGB">
										<parsers:count bands="A" sample="0x00"/>
									</parsers:model>
								</parsers:ImageParser>
							</parsers:parse>
						</parsers:HTTPParser>
					</ctl:request>
				</xsl:variable>
				<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
				<xsl:choose>
					<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
						<ctl:message>[FAILURE] Error: Could not read the image type.</ctl:message>
						<xsl:text>false|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
						<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
						<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
						<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
						<xsl:variable name="transparentPixelCount" select="$response/response/content/parsers:ImageParser/parsers:model/parsers:count"/>
						<xsl:variable name="code" select="$response/response/status/@code"/>
						<ctl:message select="concat('response image: ', $transparentPixelCount, ' transparent pixels: ', ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>		
						<xsl:choose>
							<xsl:when test="number($width) = -1 or number($height) = -1">
								<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0 and $hasTransparentLayer">
								<ctl:message>[FAILURE] No transparent pixels in layer that contains the word &quot;Transparent&quot;.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0">
								<ctl:message>Indeterminate: No transparent pixels in the image. If there is a layer that supports transparency, identify it by using the word &quot;Transparent&quot; in the layer title, description, or keywords.</ctl:message>
								<xsl:text>indeterminate|</xsl:text>
							</xsl:when>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="'[FAILURE] Test failed. Server.KVP.XML.GetTile.Valid.Tile.Transparency'"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'indeterminate')">
					<ctl:message select="'[WARNING] Test inconclusive: Server.KVP.XML.GetTile.Valid.Tile.Transparency'"/>
					<ctl:warning/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="'Test passed: Server.KVP.XML.GetTile.Valid.Tile.Transparency'"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetTile.Valid.Tile.Transparency">
		<ctl:param name="tileURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetTile']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that the returned tile has transparent color for NODATA values. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($tileURL)"/>
			<ctl:message select="concat('Issuing GetTile requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="results">
				<xsl:variable name="hasTransparentLayer" select="boolean($wmts.capabilities.doc//wmts:Contents/wmts:Layer[contains(.,'Transparent')])"/>
				<xsl:variable name="layer" select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')] and (contains(.,'Transparent') or not($hasTransparentLayer))][1]"/>
				<xsl:variable name="layerId" select="string($layer/ows:Identifier)"/>
				<xsl:variable name="transparentStyleId" select="string($layer/wmts:Style[contains(.,'Transparent')][1]/ows:Identifier)"/>
				<xsl:variable name="styleId" select="if ($transparentStyleId='') then string($layer/wmts:Style[1]/ows:Identifier) else $transparentStyleId"/>
				<xsl:variable name="format" select="string($layer/wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')][1])"/>
				<xsl:variable name="tileMatrixSetId" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSet"/>
				<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
				<xsl:variable name="tileMatrix" select="$tileMatrixSet/wmts:TileMatrix[1]"/>
				<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
				<xsl:variable name="tileMatrixLimits" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits[1]"/>
				<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
				<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
				<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
				<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
				<xsl:variable name="row" select="$midTileRow"/>
				<xsl:variable name="col" select="$midTileCol"/>
				<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
				<xsl:variable name="dimensionNames"></xsl:variable>
				<xsl:variable name="dimensionValues"></xsl:variable>
				<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetTileRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col)"/>
				<!-- <xsl:message>post Body: <xsl:copy-of select="$postBody"/></xsl:message> 	-->
				<xsl:variable name="response">
					<ctl:soap-request  version="1.2" charset="utf-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<xsl:copy-of select="$postBody"/>
						</ctl:body>
						<parsers:HTTPParser>
							<parsers:parse>
								<parsers:SOAPParser return="content"/>
							</parsers:parse>
						</parsers:HTTPParser>
					</ctl:soap-request>					
				</xsl:variable>
				<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
				<xsl:variable name="code" select="$response/response/status/@code"/>
				<xsl:variable name="wmtsImageFormat" select="$response/response/content/wmts:BinaryPayload/wmts:Format"/> 
				<xsl:variable name="base64Data" select="$response/response/content/wmts:BinaryPayload/wmts:BinaryContent"/> 
				<xsl:variable name="instruction">
					<parsers:ImageParser>
						<parsers:type/>
						<parsers:height/>
						<parsers:width/>
						<parsers:transparency/>
						<parsers:model value="ARGB">
							<parsers:count bands="A" sample="0x00"/>
						</parsers:model>
					</parsers:ImageParser>
				</xsl:variable>
				<xsl:variable name="response2" select="ctlFunctions:ParseBase64ImageData($base64Data, $instruction/*)"/>
				<xsl:variable name="type"  select="$response2/parsers:ImageParser/parsers:type"/>
				<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
				<xsl:variable name="width" select="$response2/parsers:ImageParser/parsers:width"/>
				<xsl:variable name="height" select="$response2/parsers:ImageParser/parsers:height"/>
				<xsl:variable name="transparency" select="$response2/parsers:ImageParser/parsers:transparency"/>
				<xsl:variable name="transparentNodata" select="$response2/parsers:ImageParser/parsers:model/parsers:transparentNodata"/>
				<ctl:message select="concat('response image transparency: ', $transparency, ' transparent nodata (black) pixels: ', $transparentNodata, ' wmtsImageFormat ', $wmtsImageFormat, ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>
				<xsl:choose>
					<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
						<ctl:message>[FAILURE] Error: Could not read the image type.</ctl:message>
						<xsl:text>false|</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
						<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
						<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
						<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
						<xsl:variable name="transparentPixelCount" select="$response/response/content/parsers:ImageParser/parsers:model/parsers:count"/>
						<xsl:variable name="code" select="$response/response/status/@code"/>
						<ctl:message select="concat('response image: ', $transparentPixelCount, ' transparent pixels: ', ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>		
						<xsl:choose>
							<xsl:when test="number($width) = -1 or number($height) = -1">
								<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0 and $hasTransparentLayer">
								<ctl:message>[FAILURE] No transparent pixels in layer that contains the word &quot;Transparent&quot;.</ctl:message>
								<xsl:text>false|</xsl:text>
							</xsl:when>
							<xsl:when test="number($transparentPixelCount) = 0">
								<ctl:message>Indeterminate: No transparent pixels in the image. If there is a layer that supports transparency, identify it by using the word &quot;Transparent&quot; in the layer title, description, or keywords.</ctl:message>
								<xsl:text>indeterminate|</xsl:text>
							</xsl:when>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="'[FAILURE] Test failed. Server.SOAP.GetTile.Valid.Tile.Transparency'"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'indeterminate')">
					<ctl:message select="'[WARNING] Test inconclusive: Server.KVP.SOAP.GetTile.Valid.Tile.Transparency'"/>
					<ctl:warning/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="'Test passed: Server.KVP.SOAP.GetTile.Valid.Tile.Transparency'"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetTile.Valid.Tile.Transparency">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that the returned tile has transparent color for NODATA values. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:variable name="hasTransparentLayer" select="boolean($wmts.capabilities.doc//wmts:Contents/wmts:Layer[contains(.,'Transparent')])"/>
				<xsl:variable name="layer" select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')] and (contains(.,'Transparent') or not($hasTransparentLayer))][1]"/>
				<xsl:variable name="layerId" select="string($layer/ows:Identifier)"/>
				<xsl:variable name="transparentStyleId" select="string($layer/wmts:Style[contains(.,'Transparent')][1]/ows:Identifier)"/>
				<xsl:variable name="styleId" select="if ($transparentStyleId='') then string($layer/wmts:Style[1]/ows:Identifier) else $transparentStyleId"/>
				<xsl:variable name="format" select="string($layer/wmts:Format[starts-with(concat(.,';'),'image/png;') or starts-with(concat(.,';'),'image/gif;')][1])"/>
				<xsl:variable name="tileMatrixSetId" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSet"/>
				<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
				<xsl:variable name="tileMatrix" select="$tileMatrixSet/wmts:TileMatrix[1]"/>
				<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
				<xsl:variable name="tileMatrixLimits" select="$layer/wmts:TileMatrixSetLink[1]/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits[1]"/>
				<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
				<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
				<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
				<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
				<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
				<xsl:variable name="row" select="$midTileRow"/>
				<xsl:variable name="col" select="$midTileCol"/>
				<xsl:variable name="dimensionNames"></xsl:variable>
				<xsl:variable name="dimensionValues"></xsl:variable>
				<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $format, 'tile')"/>
				<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
				<xsl:choose>
					<xsl:when test="$resourceURLtemplate != '' ">
						<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidTileURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
						<xsl:choose>
							<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">		
								<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col)"/>
								<xsl:variable name="restURL">
									<xsl:call-template name="wmts:RESTfulTemplateProcessor">
										<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
										<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
										<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
										<xsl:with-param name="style" select="$styleId"/>
										<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
										<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
										<xsl:with-param name="tileRow" select="$row"/>
										<xsl:with-param name="tileCol" select="$col"/>
										<xsl:with-param name="j"></xsl:with-param> <!-- only for FeatureInfo -->
										<xsl:with-param name="i"></xsl:with-param> <!-- only for FeatureInfo -->
										<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
									</xsl:call-template>
								</xsl:variable>
								<ctl:message select="concat('restURL: ', $restURL)"/>														
								<xsl:variable name="response">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$restURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<parsers:HTTPParser>   <!-- include HTTPParser to get status code -->
											<parsers:parse>
												<parsers:ImageParser>
													<parsers:type/>
													<parsers:height/>
													<parsers:width/>
													<parsers:transparency/>
													<parsers:model value="ARGB">
														<parsers:count bands="A" sample="0x00"/>
													</parsers:model>
												</parsers:ImageParser>
											</parsers:parse>
										</parsers:HTTPParser>
									</ctl:request>
								</xsl:variable>
								<!-- <xsl:message>response <xsl:copy-of select="$response"/></xsl:message>	-->
								<xsl:choose>
									<xsl:when test="not(exists($response/response/content/parsers:ImageParser/parsers:type))">
										<ctl:message>[FAILURE] Error: Could not read the image type.</ctl:message>
										<xsl:text>false|</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="type"  select="$response/response/content/parsers:ImageParser/parsers:type"/>
										<xsl:variable name="imageFormat" select="concat('image/', $type)"/>
										<xsl:variable name="width" select="$response/response/content/parsers:ImageParser/parsers:width"/>
										<xsl:variable name="height" select="$response/response/content/parsers:ImageParser/parsers:height"/>
										<xsl:variable name="transparentPixelCount" select="$response/response/content/parsers:ImageParser/parsers:model/parsers:count"/>
										<xsl:variable name="code" select="$response/response/status/@code"/>
										<ctl:message select="concat('response image: ', $transparentPixelCount, ' transparent pixels: ', ' imageFormat ', $imageFormat, ' width ', $width, ' height ', $height, ' HTTP status code ', $code)"/>		
										<xsl:choose>
											<xsl:when test="number($width) = -1 or number($height) = -1">
												<ctl:message>[FAILURE] Error: Could not read the image size.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:when test="number($transparentPixelCount) = 0 and $hasTransparentLayer">
												<ctl:message>[FAILURE] No transparent pixels in layer that contains the word &quot;Transparent&quot;.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:when test="number($transparentPixelCount) = 0">
												<ctl:message>Indeterminate: No transparent pixels in the image. If there is a layer that supports transparency, identify it by using the word &quot;Transparent&quot; in the layer title, description, or keywords.</ctl:message>
												<xsl:text>indeterminate|</xsl:text>
											</xsl:when>
										</xsl:choose>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>		
							<xsl:otherwise>
								<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
								<xsl:text>false|</xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
						<xsl:text>false|</xsl:text>
					</xsl:otherwise>	
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="'[FAILURE] Test failed. Server.RESTful.GetTile.Valid.Tile.Transparency'"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'indeterminate')">
					<ctl:message select="'[WARNING] Test inconclusive: Server.RESTful.GetTile.Valid.Tile.Transparency'"/>
					<ctl:warning/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="'Test passed: Server.RESTful.GetTile.Valid.Tile.Transparency'"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Mandatory">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <!-- <ctl:message select="concat('style ', $styleId)"/> -->

                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
                          <xsl:variable name="format" select="."/>
                          <!-- <ctl:message select="concat('format ', $format)"/> -->

                          <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                          <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                          <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
                              <xsl:variable name="infoFormat" select="."/>
                              <!-- <ctl:message select="concat('format ', $format)"/> -->
                              <xsl:for-each select="$layer/wmts:InfoFormat">
                                  <xsl:variable name="infoFormat" select="."/>
                                  <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                  <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                  <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
                                      <xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
                                      <xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
                                      <xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
                                      <!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
                                      <xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                      <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                      <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
                                          <xsl:variable name="tileMatrix" select="."/>
                                          <xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
                                          <xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
                                          <xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
                                          <!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
                                          <xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
                                          <xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
                                          <xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
                                          <xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
                                          <xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
                                          <xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
                                          <xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
                                          <xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
                                          <xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
                                          <xsl:variable name="rowList" select="tokenize($rows, ',')"/>
                                          <xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
                                          <xsl:variable name="colList" select="tokenize($cols, ',')"/>
                                          <xsl:variable name="minTileJ">0</xsl:variable>
                                          <xsl:variable name="maxTileJ" select="$tileHeight -1"/>
                                          <xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
                                          <xsl:variable name="minTileI">0</xsl:variable>
                                          <xsl:variable name="maxTileI" select="$tileWidth -1"/>
                                          <xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
                                          <xsl:variable name="js" select="wmtsFunctions:getTileJs($minTileJ, $midTileJ, $maxTileJ)"/>
                                          <xsl:variable name="jList" select="tokenize($js, ',')"/>
                                          <xsl:variable name="is" select="wmtsFunctions:getTileIs($minTileI, $midTileI, $maxTileI)"/>
                                          <xsl:variable name="iList" select="tokenize($is,',')"/>
                                          <xsl:for-each select="$rowList">
                                              <xsl:variable name="row" select="."/>
                                              <xsl:for-each select="$colList">
                                                  <xsl:variable name="col" select="."/>
                                                  <xsl:for-each select="$jList">
                                                      <xsl:variable name="j" select="."/>
                                                      <xsl:for-each select="$iList">
                                                          <xsl:variable name="i" select="."/>
                                                          <ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i)"/>
                                                          <xsl:variable name="response">
                                                              <ctl:request>
                                                                  <ctl:url>
                                                                      <xsl:value-of select="$serviceURL"/>
                                                                  </ctl:url>
                                                                  <ctl:method><xsl:value-of select="$method"/></ctl:method>
                                                                  <ctl:param name="service">WMTS</ctl:param>
                                                                  <ctl:param name="request">GetFeatureInfo</ctl:param>
                                                                  <ctl:param name="version">
                                                                      <xsl:value-of select="$version"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="layer">
                                                                      <xsl:value-of select="$layerId"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="style">
                                                                      <xsl:value-of select="$styleId"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="format">
                                                                      <xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="InfoFormat">
                                                                      <xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="TileMatrixSet">
                                                                      <xsl:value-of select="$tileMatrixSetId"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="TileMatrix">
                                                                      <xsl:value-of select="$tileMatrixId"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="TileRow">
                                                                      <xsl:value-of select="$row"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="TileCol">
                                                                      <xsl:value-of select="$col"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="J">
                                                                      <xsl:value-of select="$j"/>
                                                                  </ctl:param>
                                                                  <ctl:param name="I">
                                                                      <xsl:value-of select="$i"/>
                                                                  </ctl:param>
                                                                  <parsers:HTTPParser/>
                                                              </ctl:request>
                                                          </xsl:variable>

							  <xsl:variable name="code" select="$response/response/status/@code"/>
                                                          <xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
							  <xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

							  <!-- ctl:message select="concat(' Code: ', $code)"/ -->
							  <!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
							  <!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

                                                          <xsl:choose>
                                                              <xsl:when test="$code != '200' ">
                                                                  <ctl:message>Response does not contain Status Code 200.</ctl:message>
                                                                  <xsl:text>false|</xsl:text>
                                                              </xsl:when>

                                                              <xsl:otherwise>
                                                                  <xsl:choose>
                                                                      <xsl:when test="$contentType != $infoFormat ">
                                                                          <ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
									  <xsl:text>false|</xsl:text>
                                                                      </xsl:when>

                                                                      <xsl:otherwise>
                                                                          <xsl:choose>
									     <xsl:when test="$contentLength &lt;= 1 ">
										<ctl:message>Response does not contain any content.</ctl:message>
										<xsl:text>false|</xsl:text>
									     </xsl:when>
									  </xsl:choose>
                                                                      </xsl:otherwise>

                                                                  </xsl:choose>
                                                              </xsl:otherwise>

                                                          </xsl:choose>

                                                      </xsl:for-each>
                                                  </xsl:for-each>
                                              </xsl:for-each>
                                          </xsl:for-each>
                                      </xsl:for-each>
                                  </xsl:for-each>
                              </xsl:for-each>
                          </xsl:for-each>
                        </xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Mandatory')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Mandatory')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:makeXMLpostGetFeatureInfoRequest">
		<ctl:param name="version">WMTS version</ctl:param>
		<ctl:param name="layer"/>
		<ctl:param name="style"/>
		<ctl:param name="format"/>
		<ctl:param name="dimensionNames">comma separated list of dimension names, or empty if not applicable.</ctl:param>
		<ctl:param name="dimensionValues">comma separated list of dimension values for dimension names, or empty if none. </ctl:param>
		<ctl:param name="tileMatrixSet"/>
		<ctl:param name="tileMatrix"/>
		<ctl:param name="tileRow"/>
		<ctl:param name="tileCol"/>
		<ctl:param name="J"/>
		<ctl:param name="I"/>
		<ctl:param name="infoFormat"/>
		<ctl:description>Create an XML POST wmts:GetFeatureInfo request document.  Execute xsl:attribute elements to assign them values in absence of attribute value template capability. Omits elements for blank parameters for use in missing parameter tests. </ctl:description>
		<ctl:code>
			<xsl:variable name="dimensionNamesList" select="tokenize($dimensionNames, ',')"/>
			<xsl:variable name="dimensionValuesList" select="tokenize($dimensionValues, ',')"/>
			<xsl:variable name="numDimensions" select="count($dimensionNamesList)"/>
			<wmts:GetFeatureInfo service="WMTS"  xmlns:wmts="http://www.opengis.net/wmts/1.0">
				<xsl:attribute name="version"><xsl:value-of select="$version"/></xsl:attribute>
				<wmts:GetTile service="WMTS">
					<xsl:attribute name="version"><xsl:value-of select="$version"/></xsl:attribute>
					<xsl:if test="$layer != '' ">
						<wmts:Layer><xsl:value-of select="$layer"/></wmts:Layer>
					</xsl:if>
					<xsl:if test="$style != '' ">
						<wmts:Style><xsl:value-of select="$style"/></wmts:Style>
					</xsl:if>
					<xsl:if test="$format != '' ">
						<wmts:Format><xsl:value-of select="$format"/></wmts:Format>				
					</xsl:if>
					<xsl:for-each select="1 to $numDimensions">
						<xsl:variable name="pos" select="."/>
						<xsl:variable name="dimensionName" select="$dimensionNamesList[$pos]"/>
						<xsl:variable name="dimensionValue" select="$dimensionValuesList[$pos]"/>
						<wmts:DimensionNameValue>
							<xsl:attribute name="name"><xsl:value-of select="$dimensionName"/></xsl:attribute>
							<xsl:value-of select="$dimensionValue"/>
						</wmts:DimensionNameValue>
					</xsl:for-each>
					<xsl:if test="$tileMatrixSet != '' ">
						<wmts:TileMatrixSet><xsl:value-of select="$tileMatrixSet"/></wmts:TileMatrixSet>
					</xsl:if>
					<xsl:if test="$tileMatrix != '' ">
						<wmts:TileMatrix><xsl:value-of select="$tileMatrix"/></wmts:TileMatrix>
					</xsl:if>
					<xsl:if test="$tileRow != '' ">
						<wmts:TileRow><xsl:value-of select="$tileRow"/></wmts:TileRow>
					</xsl:if>
					<xsl:if test="$tileCol != '' ">
						<wmts:TileCol><xsl:value-of select="$tileCol"/></wmts:TileCol>
					</xsl:if>
				</wmts:GetTile> 
				<xsl:if test="$J != '' ">
					<wmts:J><xsl:value-of select="$J"/></wmts:J>
				</xsl:if>
				<xsl:if test="$I != '' ">
					<wmts:I><xsl:value-of select="$I"/></wmts:I>
				</xsl:if>
				<xsl:if test="$infoFormat != '' ">
					<wmts:InfoFormat><xsl:value-of select="$infoFormat"/></wmts:InfoFormat>
				</xsl:if>
			</wmts:GetFeatureInfo>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Mandatory">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <!-- <ctl:message select="concat('style ', $styleId)"/> -->
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
                                <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                    <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                    <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/> 
										<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
										<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
										<xsl:variable name="colList" select="tokenize($cols, ',')"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="js" select="wmtsFunctions:getTileJs($minTileJ, $midTileJ, $maxTileJ)"/> 
										<xsl:variable name="jList" select="tokenize($js, ',')"/>
										<xsl:variable name="is" select="wmtsFunctions:getTileIs($minTileI, $midTileI, $maxTileI)"/> 
										<xsl:variable name="iList" select="tokenize($is,',')"/>
										<xsl:for-each select="$rowList">
											<xsl:variable name="row" select="."/>
											<xsl:for-each select="$colList">
												<xsl:variable name="col" select="."/>
												<xsl:for-each select="$jList">
													<xsl:variable name="j" select="."/>
													<xsl:for-each select="$iList">
														<xsl:variable name="i" select="."/>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i)"/>
														<xsl:variable name="dimensionNames"/>
														<xsl:variable name="dimensionValues"/>
														<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$serviceURL"/>
																</ctl:url>
																<ctl:method>post</ctl:method>
																<ctl:body>
																	<xsl:copy-of select="$postBody"/>
																</ctl:body>
																<parsers:HTTPParser/>
															</ctl:request>
														</xsl:variable>

														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
														<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

														<!-- ctl:message select="concat(' Code: ', $code)"/ -->
														<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
														<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

														<xsl:choose>
														    <xsl:when test="$code != '200' ">
															  <ctl:message>Response does not contain Status Code 200.</ctl:message>
															  <xsl:text>false|</xsl:text>
														    </xsl:when>

														    <xsl:otherwise>
															<xsl:choose>
															      <xsl:when test="$contentType != $infoFormat ">
																  <ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
																  <xsl:text>false|</xsl:text>
															      </xsl:when>

															      <xsl:otherwise>
																  <xsl:choose>
																     <xsl:when test="$contentLength &lt;= 1 ">
																	<ctl:message>Response does not contain any content.</ctl:message>
																	<xsl:text>false|</xsl:text>
																     </xsl:when>
																  </xsl:choose>
															      </xsl:otherwise>

															</xsl:choose>
														    </xsl:otherwise>
														</xsl:choose>

													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Mandatory">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
                                <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/> 
										<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
										<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
										<xsl:variable name="colList" select="tokenize($cols, ',')"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="js" select="wmtsFunctions:getTileJs($minTileJ, $midTileJ, $maxTileJ)"/> 
										<xsl:variable name="jList" select="tokenize($js, ',')"/>
										<xsl:variable name="is" select="wmtsFunctions:getTileIs($minTileI, $midTileI, $maxTileI)"/> 
										<xsl:variable name="iList" select="tokenize($is,',')"/>
										<xsl:for-each select="$rowList">
											<xsl:variable name="row" select="."/>
											<xsl:for-each select="$colList">
												<xsl:variable name="col" select="."/>
												<xsl:for-each select="$jList">
													<xsl:variable name="j" select="."/>
													<xsl:for-each select="$iList">
														<xsl:variable name="i" select="."/>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i)"/>
														<xsl:variable name="dimensionNames"/>
														<xsl:variable name="dimensionValues"/>
														<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
														<xsl:variable name="response">
															<ctl:soap-request  version="1.2" charset="utf-8">
																<ctl:url>
																	<xsl:value-of select="$serviceURL"/>
																</ctl:url>
																<ctl:body>
																	<xsl:copy-of select="$postBody"/>
																</ctl:body>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:SOAPParser return="content"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:soap-request>
														</xsl:variable>

														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
														<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

														<!-- ctl:message select="concat(' Code: ', $code)"/ -->
														<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
														<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

														<xsl:choose>
														    <xsl:when test="$code != '200' ">
															  <ctl:message>Response does not contain Status Code 200.</ctl:message>
															  <xsl:text>false|</xsl:text>
														    </xsl:when>

														    <xsl:otherwise>
															<xsl:choose>
															      <xsl:when test="$contentType != $infoFormat ">
																  <ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
																  <xsl:text>false|</xsl:text>
															      </xsl:when>

															      <xsl:otherwise>
																  <xsl:choose>
																     <xsl:when test="$contentLength &lt;= 1 ">
																	<ctl:message>Response does not contain any content.</ctl:message>
																	<xsl:text>false|</xsl:text>
																     </xsl:when>
																  </xsl:choose>
															      </xsl:otherwise>

															</xsl:choose>
														    </xsl:otherwise>
														</xsl:choose>

													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Mandatory">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid RESTful GetFeatureInfo requests with valid values for mandatory parameters as specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
                  <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                      <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                      <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
	  					<!-- <ctl:message select="concat('style ', $styleId)"/> -->
                          <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                          <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                          <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                              <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                              <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  <!-- these must all have default -->
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
                                                  <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                                  <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                                                  <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                                    <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                                      <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="rows" select="wmtsFunctions:getTileRows($minTileRow, $midTileRow, $maxTileRow)"/>
														<xsl:variable name="rowList" select="tokenize($rows, ',')"/>
														<xsl:variable name="cols" select="wmtsFunctions:getTileCols($minTileCol, $midTileCol, $maxTileCol)"/>
														<xsl:variable name="colList" select="tokenize($cols, ',')"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="js" select="wmtsFunctions:getTileJs($minTileJ, $midTileJ, $maxTileJ)"/> 
														<xsl:variable name="jList" select="tokenize($js, ',')"/>
														<xsl:variable name="is" select="wmtsFunctions:getTileIs($minTileI, $midTileI, $maxTileI)"/> 
														<xsl:variable name="iList" select="tokenize($is,',')"/>
														<xsl:for-each select="$rowList">
															<xsl:variable name="row" select="."/>
															<xsl:for-each select="$colList">
																<xsl:variable name="col" select="."/>
																<xsl:for-each select="$jList">
																	<xsl:variable name="j" select="."/>
																	<xsl:for-each select="$iList">
																		<xsl:variable name="i" select="."/>
																		<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i)"/>
																		<xsl:variable name="restURL">
																			<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																				<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																				<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																				<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																				<xsl:with-param name="style" select="$styleId"/>
																				<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																				<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																				<xsl:with-param name="tileRow" select="$row"/>
																				<xsl:with-param name="tileCol" select="$col"/>
																				<xsl:with-param name="j" select="$j"/>
																				<xsl:with-param name="i" select="$i"/>
																				<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																			</xsl:call-template>
																		</xsl:variable>
																		<ctl:message select="concat('restURL: ', $restURL)"/>
																		<xsl:variable name="response">
																			<ctl:request>
																				<ctl:url>
																					<xsl:value-of select="$restURL"/>
																				</ctl:url>
																				<ctl:method>get</ctl:method>
																				<parsers:HTTPParser/> 
																			</ctl:request>
																		</xsl:variable>

																		<xsl:variable name="code" select="$response/response/status/@code"/>
																		<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
																		<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

																		<!-- ctl:message select="concat(' Code: ', $code)"/ -->
																		<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
																		<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

																		<xsl:choose>
																		    <xsl:when test="$code != '200' ">
																			  <ctl:message>Response does not contain Status Code 200.</ctl:message>
																			  <xsl:text>false|</xsl:text>
																		    </xsl:when>

																		    <xsl:otherwise>
																			<xsl:choose>
																			      <xsl:when test="$contentType != $infoFormat ">
																				  <ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
																				  <xsl:text>false|</xsl:text>
																			      </xsl:when>

																			      <xsl:otherwise>
																				  <xsl:choose>
																				     <xsl:when test="$contentLength &lt;= 1 ">
																					<ctl:message>Response does not contain any content.</ctl:message>
																					<xsl:text>false|</xsl:text>
																				     </xsl:when>
																				  </xsl:choose>
																			      </xsl:otherwise>

																			</xsl:choose>
																		    </xsl:otherwise>
																		</xsl:choose>

																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>		
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Mandatory</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Optional">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <!-- <ctl:message select="concat('style ', $styleId)"/> -->
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
                                <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                    <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                    <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:for-each select="$dimensionsValuesList">
											<xsl:variable name="dimsVals" select="."/>
											<xsl:if test="$dimsVals != '' ">
												<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ',  $j, ' i ', $i, ' dimensionsValues ', $dimsVals)"/>
												<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
												<xsl:variable name="response">
													<ctl:request>
														<ctl:url>
															<xsl:value-of select="$serviceURL"/>
														</ctl:url>
														<ctl:method><xsl:value-of select="$method"/></ctl:method>
														<ctl:param name="service">WMTS</ctl:param>
														<ctl:param name="request">GetFeatureInfo</ctl:param>
														<ctl:param name="version">
															<xsl:value-of select="$version"/>
														</ctl:param>
														<ctl:param name="layer">
															<xsl:value-of select="$layerId"/>
														</ctl:param>
														<ctl:param name="style">
															<xsl:value-of select="$styleId"/>
														</ctl:param>
														<ctl:param name="format">
															<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
														</ctl:param>
														<ctl:param name="infoFormat">
															<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
														</ctl:param>
														<ctl:param name="TileMatrixSet">
															<xsl:value-of select="$tileMatrixSetId"/>
														</ctl:param>
														<ctl:param name="TileMatrix">
															<xsl:value-of select="$tileMatrixId"/>
														</ctl:param>
														<ctl:param name="TileRow">
															<xsl:value-of select="$row"/>
														</ctl:param>
														<ctl:param name="TileCol">
															<xsl:value-of select="$col"/>
														</ctl:param>
														<ctl:param name="J">
															<xsl:value-of select="$j"/>
														</ctl:param>
														<ctl:param name="I">
															<xsl:value-of select="$i"/>
														</ctl:param>
														<xsl:for-each select="$dimsValsList">
															<xsl:variable name="dv" select="."/>
															<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
															<xsl:variable name="value" select="substring-after($dv, ',')"/>
															<ctl:dynamicParam>
																<ctl:name>
																	<xsl:value-of select="$dimension"/>
																</ctl:name>
																<ctl:value>
																	<xsl:value-of select="$value"/>
																</ctl:value>
															</ctl:dynamicParam>
														</xsl:for-each>
														<parsers:HTTPParser/>
													</ctl:request>
												</xsl:variable>
												<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
												<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
												<xsl:choose>
													<xsl:when test="not($contentPresent)">
														<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
														<xsl:text>false|</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:choose>
															<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
																<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
															</xsl:when>
															<xsl:otherwise>
																<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
																<xsl:text>false|</xsl:text>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Optional')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetFeatureInfo.Optional')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Optional">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                      <!-- <ctl:message select="concat('style ', $styleId)"/> -->
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
                                <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                    <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                    <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:for-each select="$dimensionsValuesList">
											<xsl:variable name="dimsVals" select="."/>
											<xsl:if test="$dimsVals != '' ">
												<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ',  $j, ' i ', $i, ' dimensionsValues ', $dimsVals)"/>
												<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
												<xsl:variable name="dimensionNames">
													<xsl:for-each select="$dimsValsList">
														<xsl:variable name="dv" select="."/>
														<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
														<xsl:value-of select="$dimension"/>
														<xsl:if test="not(position() = last())">
															<xsl:text>,</xsl:text>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="dimensionValues">
													<xsl:for-each select="$dimsValsList">
														<xsl:variable name="dv" select="."/>
														<xsl:variable name="value" select="substring-after($dv, ',')"/>
														<xsl:value-of select="$value"/>
														<xsl:if test="not(position() = last())">
															<xsl:text>,</xsl:text>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
												<xsl:variable name="response">
													<ctl:request>
														<ctl:url>
															<xsl:value-of select="$serviceURL"/>
														</ctl:url>
														<ctl:method>post</ctl:method>
														<ctl:body>
															<xsl:copy-of select="$postBody"/>
														</ctl:body>
														<parsers:HTTPParser/>
													</ctl:request>
												</xsl:variable>
												<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
												<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
												<xsl:choose>
													<xsl:when test="not($contentPresent)">
														<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
														<xsl:text>false|</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:choose>
															<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
																<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
															</xsl:when>
															<xsl:otherwise>
																<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
																<xsl:text>false|</xsl:text>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Optional">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
            <xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]) + 1) idiv 2"/>
            <!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat)"/> -->
                                <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                <!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:for-each select="$dimensionsValuesList">
											<xsl:variable name="dimsVals" select="."/>
											<xsl:if test="$dimsVals != '' ">
												<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ',  $j, ' i ', $i, ' dimensionsValues ', $dimsVals)"/>
												<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
												<xsl:variable name="dimensionNames">
													<xsl:for-each select="$dimsValsList">
														<xsl:variable name="dv" select="."/>
														<xsl:variable name="dimension" select="substring-before($dv, ',')"/>
														<xsl:value-of select="$dimension"/>
														<xsl:if test="not(position() = last())">
															<xsl:text>,</xsl:text>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="dimensionValues">
													<xsl:for-each select="$dimsValsList">
														<xsl:variable name="dv" select="."/>
														<xsl:variable name="value" select="substring-after($dv, ',')"/>
														<xsl:value-of select="$value"/>
														<xsl:if test="not(position() = last())">
															<xsl:text>,</xsl:text>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
												<xsl:variable name="response">
													<ctl:soap-request  version="1.2" charset="utf-8">
														<ctl:url>
															<xsl:value-of select="$serviceURL"/>
														</ctl:url>
														<ctl:body>
															<xsl:copy-of select="$postBody"/>
														</ctl:body>
														<parsers:HTTPParser>
															<parsers:parse>
																<parsers:SOAPParser return="content"/>
															</parsers:parse>
														</parsers:HTTPParser>
													</ctl:soap-request>
												</xsl:variable>
												<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message> -->
												<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
												<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
												<xsl:choose>
													<xsl:when test="not($contentPresent)">
														<ctl:message select="concat('FAILURE: Missing or invalid response entity content ; should have been Feature Info in format ', $infoFormat)"/>
														<xsl:text>false|</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="description" select="wwwFunctions:describeNode($content)"/>
														<ctl:message select="concat('FeatureInfo content description: ', $description)"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Optional">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles advertised in its Service Metadata document in response to valid RESTful GetFeatureInfo requests with optional sample dimensions parameter valid values from the range specified in the Service Metadata document. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:Dimension]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>
					<xsl:variable name="dimensionsValues">
						<ctl:call-function name="wmtsFunctions:sequenceDimensionsValues">
							<ctl:with-param name="layer" select="$layer"/>
							<ctl:with-param name="dimensionNames" select="$dimensionNames"/>
							<ctl:with-param name="prefix"/>
						</ctl:call-function>
					</xsl:variable>
					<xsl:variable name="dimensionsValuesList" select="tokenize($dimensionsValues, '#')"/>
                    <!-- <ctl:message select="concat('layer ', $layerId)"/> -->
                    <xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
                    <!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
                    <xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
                        <xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
                        <!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
                        <xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
                            <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
                            <!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
                            <xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
                                              <xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
                                              <!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
                                                <xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
                                                    <xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
                                                    <xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:for-each select="$dimensionsValuesList">
															<xsl:variable name="dimsVals" select="."/>
															<xsl:if test="$dimsVals != '' ">
																<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ',  $j, ' i ', $i, ' dimensionsValues ', $dimsVals)"/>
																<xsl:variable name="dimsValsList" select="tokenize($dimsVals, '\*')"/>
																<xsl:variable name="dimensionValues">
																	<xsl:for-each select="$dimsValsList">
																		<xsl:variable name="dv" select="."/>
																		<!-- <xsl:variable name="dimension" select="substring-before($dv, ',')"/> -->
																		<xsl:variable name="value" select="substring-after($dv, ',')"/>
																		<!-- <ctl:message select="concat('dv: ', $dv, ' dimension: ', $dimension, ' value: ', $value)"/> -->
																		<xsl:value-of select="$value"/>
																		<xsl:if test="not(position() = last())">
																			<xsl:text>,</xsl:text>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:variable>
																<!-- <ctl:message select="concat('dimensionValues: ', $dimensionValues)"/> -->
																<xsl:variable name="restURL">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																		<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j" select="$j"/>
																		<xsl:with-param name="i" select="$i"/>
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:variable>
																<ctl:message select="concat('restURL: ', $restURL)"/>
																<xsl:variable name="response">
																	<ctl:request>
																		<ctl:url>
																			<xsl:value-of select="$restURL"/>
																		</ctl:url>
																		<ctl:method>get</ctl:method>
																		<parsers:HTTPParser/>
																	</ctl:request>
																</xsl:variable>
																<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
																<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
																<xsl:choose>
																	<xsl:when test="not($contentPresent)">
																		<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
																		<xsl:text>false|</xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:choose>
																			<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
																				<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
																				<xsl:text>false|</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:variable name="code" select="$response/response/status/@code"/>
																<xsl:if test="$code != '' ">
																	<ctl:message select="concat('HTTP status code ', $code)"/>
																</xsl:if>
															</xsl:if>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>	
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.RESTful.GetFeatureInfo.Optional</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.RESTful.GetFeatureInfo.Optional</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Missing">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory KVP GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/>  -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$formatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select=" 'layer', if ($layer/wmts:Style[@isDefault='true']) then 'layer' else 'style', 'format', 'infoFormat', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol', 'J', 'I' ">
											<xsl:variable name="missingParameter" select="."/>
											<xsl:variable name="message">
												<xsl:text>layer </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'layer' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$layerId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> style </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'style' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$styleId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> format </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'format' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$format"/>
													</xsl:otherwise>												
												</xsl:choose>
												<xsl:text> infoFormat </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'infoFormat' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$infoFormat"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> TileMatrixSet </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrixSet' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixSetId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> has limits </xsl:text>
												<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
												<xsl:text> TileMatrix </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrix' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> row </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileRow' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$row"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> col </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileCol' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$col"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> J </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'J' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select='$j'/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> I </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'I' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$i"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:value-of select="$dimensionsMessage"/>
											</xsl:variable>
											<ctl:message select="$message"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method><xsl:value-of select="$method"/></ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetFeatureInfo</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<xsl:if test="not($missingParameter = 'layer')">
														<ctl:param name="layer">
															<xsl:value-of select="$layerId"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'style')">
														<ctl:param name="style">
															<xsl:value-of select="$styleId"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'format')">
														<ctl:param name="format">
															<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'infoFormat')">
														<ctl:param name="infoFormat">
															<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'TileMatrixSet')">
														<ctl:param name="TileMatrixSet">
															<xsl:value-of select="$tileMatrixSetId"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'TileMatrix')">
														<ctl:param name="TileMatrix">
															<xsl:value-of select="$tileMatrixId"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'TileRow')">
														<ctl:param name="TileRow">
															<xsl:value-of select="$row"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'TileCol')">
														<ctl:param name="TileCol">
															<xsl:value-of select="$col"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'J')">
														<ctl:param name="J">
															<xsl:value-of select="$j"/>
														</ctl:param>
													</xsl:if>
													<xsl:if test="not($missingParameter = 'I')">
														<ctl:param name="I">
															<xsl:value-of select="$i"/>
														</ctl:param>
													</xsl:if>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<ctl:dynamicParam>
															<ctl:name>
																<xsl:value-of select="$dimNoDefaultName"/>
															</ctl:name>
															<ctl:value>
																<xsl:value-of select="$value"/>
															</ctl:value>
														</ctl:dynamicParam>
													</xsl:for-each>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateExceptionReport">
														<!-- 	<ctl:with-param name="exceptionReport" select="$response/response/content/*"/> -->
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
														<ctl:with-param name="locators">
															<xsl:value-of select="$missingParameter"/>
														</ctl:with-param>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Missing')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed: Server.KVP.', upper-case($method), '.GetFeatureInfo.Missing')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Missing">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory GetFeatureInfo parameter is missing from an otherwise valid XML POST request, the server throws an exception</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/>  -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$formatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select=" 'layer', 'style', 'format', 'infoFormat', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol', 'J', 'I' ">
											<xsl:variable name="missingParameter" select="."/>
											<xsl:variable name="message">
												<xsl:text>layer </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'layer' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$layerId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> style </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'style' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$styleId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> format </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'format' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$format"/>
													</xsl:otherwise>												
												</xsl:choose>
												<xsl:text> infoFormat </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'infoFormat' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$infoFormat"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> TileMatrixSet </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrixSet' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixSetId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> has limits </xsl:text>
												<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
												<xsl:text> TileMatrix </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrix' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> row </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileRow' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$row"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> col </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileCol' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$col"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> J </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'J' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select='$j'/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> I </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'I' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$i"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:value-of select="$dimensionsMessage"/>
											</xsl:variable>
											<ctl:message select="$message"/>
											<xsl:variable name="layerP">
												<xsl:if test="not($missingParameter = 'layer')">
													<xsl:value-of select="$layerId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="styleP">
												<xsl:if test="not($missingParameter = 'style')">
													<xsl:value-of select="$styleId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="formatP">
												<xsl:if test="not($missingParameter = 'format')">
													<xsl:value-of select="$format"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileMatrixSetP">
												<xsl:if test="not($missingParameter = 'TileMatrixSet')">
													<xsl:value-of select="$tileMatrixSetId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileMatrixP">
												<xsl:if test="not($missingParameter = 'TileMatrix')">
													<xsl:value-of select="$tileMatrixId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileRowP">
												<xsl:if test="not($missingParameter = 'TileRow')">
													<xsl:value-of select="$row"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileColP">
												<xsl:if test="not($missingParameter = 'TileCol')">
													<xsl:value-of select="$col"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="jP">
												<xsl:if test="not($missingParameter = 'J')">
													<xsl:value-of select="$j"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="iP">
												<xsl:if test="not($missingParameter = 'I')">
													<xsl:value-of select="$i"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="infoFormatP">
												<xsl:if test="not($missingParameter = 'infoFormat')">
													<xsl:value-of select="$infoFormat"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerP, $styleP, $formatP, $dimensionNames, $dimensionValues, $tileMatrixSetP, $tileMatrixP, $tileRowP, $tileColP, $jP, $iP, $infoFormatP)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateExceptionReport">
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
														<ctl:with-param name="locators">
															<xsl:value-of select="$missingParameter"/>
														</ctl:with-param>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Missing">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory GetFeatureInfo parameter is missing from an otherwise valid XML POST request, the server throws an exception</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/>  -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$formatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select=" 'layer', 'style', 'format', 'infoFormat', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol', 'J', 'I' ">
											<xsl:variable name="missingParameter" select="."/>
											<xsl:variable name="message">
												<xsl:text>layer </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'layer' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$layerId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> style </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'style' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$styleId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> format </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'format' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$format"/>
													</xsl:otherwise>												
												</xsl:choose>
												<xsl:text> infoFormat </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'infoFormat' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$infoFormat"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> TileMatrixSet </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrixSet' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixSetId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> has limits </xsl:text>
												<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
												<xsl:text> TileMatrix </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileMatrix' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$tileMatrixId"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> row </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileRow' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$row"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> col </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'TileCol' ">
														<xsl:text>MISSING </xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$col"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> J </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'J' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select='$j'/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:text> I </xsl:text>
												<xsl:choose>
													<xsl:when test="$missingParameter = 'I' ">
														<xsl:text>MISSING</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="$i"/>
													</xsl:otherwise>
												</xsl:choose>
												<xsl:value-of select="$dimensionsMessage"/>
											</xsl:variable>
											<ctl:message select="$message"/>
											<xsl:variable name="layerP">
												<xsl:if test="not($missingParameter = 'layer')">
													<xsl:value-of select="$layerId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="styleP">
												<xsl:if test="not($missingParameter = 'style')">
													<xsl:value-of select="$styleId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="formatP">
												<xsl:if test="not($missingParameter = 'format')">
													<xsl:value-of select="$format"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileMatrixSetP">
												<xsl:if test="not($missingParameter = 'TileMatrixSet')">
													<xsl:value-of select="$tileMatrixSetId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileMatrixP">
												<xsl:if test="not($missingParameter = 'TileMatrix')">
													<xsl:value-of select="$tileMatrixId"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileRowP">
												<xsl:if test="not($missingParameter = 'TileRow')">
													<xsl:value-of select="$row"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="tileColP">
												<xsl:if test="not($missingParameter = 'TileCol')">
													<xsl:value-of select="$col"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="jP">
												<xsl:if test="not($missingParameter = 'J')">
													<xsl:value-of select="$j"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="iP">
												<xsl:if test="not($missingParameter = 'I')">
													<xsl:value-of select="$i"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="infoFormatP">
												<xsl:if test="not($missingParameter = 'infoFormat')">
													<xsl:value-of select="$infoFormat"/>
												</xsl:if>
											</xsl:variable>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerP, $styleP, $formatP, $dimensionNames, $dimensionValues, $tileMatrixSetP, $tileMatrixP, $tileRowP, $tileColP, $jP, $iP, $infoFormatP)"/>
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message> -->
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
														<ctl:with-param name="locators">
															<xsl:value-of select="$missingParameter"/>
														</ctl:with-param>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Missing">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that if a mandatory RESTful GetFeatureInfo parameter is missing from an otherwise valid request, the server throws an exception</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][not(wmts:Dimension) or (every $d in wmts:Dimension satisfies $d/wmts:Default)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/>  -->
						<xsl:for-each select="$layer/wmts:Format">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$formatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="missingStyleURLtemplate">
													<xsl:choose>
														<xsl:when test="contains($resourceURLtemplate, $styleId)">
															<xsl:value-of select="concat(substring-before($resourceURLtemplate, $styleId), '{style}', substring-after($resourceURLtemplate, $styleId))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:value-of select="$resourceURLtemplate"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable> 
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:for-each select=" 'style', 'TileMatrixSet', 'TileMatrix', 'TileRow', 'TileCol', 'J', 'I' ">
															<xsl:variable name="missingParameter" select="."/>
															<xsl:variable name="message">
																<xsl:text>layer </xsl:text>
																<xsl:value-of select="$layerId"/>
																<xsl:text> style </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'style' ">
																		<xsl:text>MISSING </xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$styleId"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> format </xsl:text>
																<xsl:value-of select="$format"/>
																<xsl:text> infoFormat </xsl:text>
																<xsl:value-of select="$infoFormat"/>
																<xsl:text> TileMatrixSet </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'TileMatrixSet' ">
																		<xsl:text>MISSING </xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$tileMatrixSetId"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> has limits </xsl:text>
																<xsl:value-of select="boolean($tileMatrixSetLimits)"/>
																<xsl:text> TileMatrix </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'TileMatrix' ">
																		<xsl:text>MISSING </xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$tileMatrixId"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> row </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'TileRow' ">
																		<xsl:text>MISSING </xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$row"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> col </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'TileCol' ">
																		<xsl:text>MISSING </xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$col"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> J </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'J' ">
																		<xsl:text>MISSING</xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select='$j'/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:text> I </xsl:text>
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'I' ">
																		<xsl:text>MISSING</xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:value-of select="$i"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:value-of select="$dimensionsMessage"/>
															</xsl:variable>
															<ctl:message select="$message"/>
															<xsl:variable name="restURL">
																<xsl:choose>
																	<xsl:when test="$missingParameter = 'style' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$missingStyleURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style">MISSING</xsl:with-param> <!-- missing -->
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'TileMatrixSet' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet">MISSING</xsl:with-param> <!-- missing -->
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'TileMatrix' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix">MISSING</xsl:with-param> <!-- missing -->
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'TileRow' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow">MISSING</xsl:with-param> <!-- missing -->
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'TileCol' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol">MISSING</xsl:with-param> <!-- missing -->
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'J' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j">MISSING</xsl:with-param>
																			<xsl:with-param name="i" select="$i"/>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																	<xsl:when test="$missingParameter = 'I' ">
																		<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																			<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																			<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
																			<xsl:with-param name="dimensionValues"></xsl:with-param> <!-- use default values -->
																			<xsl:with-param name="style" select="$styleId"/>
																			<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																			<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																			<xsl:with-param name="tileRow" select="$row"/>
																			<xsl:with-param name="tileCol" select="$col"/>
																			<xsl:with-param name="j" select='$j'/>
																			<xsl:with-param name="i">MISSING</xsl:with-param>
																			<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																		</xsl:call-template>
																	</xsl:when>
																</xsl:choose>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser>
																		<parsers:parse>
																			<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																		</parsers:parse>
																	</parsers:HTTPParser>
																</ctl:request>
															</xsl:variable>
															<xsl:variable name="code" select="$response/response/status/@code"/>
															<xsl:choose>
																<xsl:when test="not($code) or $code = '' ">
																	<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:when test="$code = '200' ">
																	<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:choose>
																		<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																			<xsl:variable name="bestPracticeException">
																				<ctl:call-function name="owsFunctions:validateExceptionReport">
																					<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																					<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																					<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
																					<ctl:with-param name="locators">
																						<xsl:value-of select="$missingParameter"/>
																					</ctl:with-param>
																					<ctl:with-param name="oneOrAll">one</ctl:with-param>
																					<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																				</ctl:call-function>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains($bestPracticeException, 'false')">
																					<ctl:message select="concat('HTTP Status Code ', $code)"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:text>bestPractice</xsl:text>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:otherwise>
																			<ctl:message select="concat('HTTP Status Code ', $code)"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>	
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $infoFormat)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.RESTful.GetFeatureInfo.Missing</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.RESTful.GetFeatureInfo.Missing</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">layer</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Layer')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Layer')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">layer</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId">BogusForTest</xsl:variable>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">layer</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.SOAP.POST.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.SOAP.POST.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Layer">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Layer incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="bogusLayerId">BogusForTest</xsl:variable>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('style ', $styleId, ' formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="invalidLayerURLtemplate" select="replace($resourceURLtemplate, $layerId, $bogusLayerId)"/>
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="$invalidLayerURLtemplate = $resourceURLtemplate">
												<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain layerId ', $layerId, ' to replace with an invalid value.')"/> 
												<xsl:text>skip|</xsl:text>
											</xsl:when>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$invalidLayerURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request>
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																				<ctl:with-param name="locators">layer</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrixSet">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$bogusTileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.TileMatrixSet')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.TileMatrixSet')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.TileMatrixSet">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $bogusTileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<!-- <xsl:message>postBody: <xsl:copy-of select="$postBody"/></xsl:message> -->
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.TileMatrixSet">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $bogusTileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $bogusTileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<!-- <xsl:message>postBody: <xsl:copy-of select="$postBody"/></xsl:message> -->
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.TileMatrixSet">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrixSet incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($resourceURLtemplate,'{TileMatrixSet}'))">
												<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain {TileMatrixSet} parameter to replace with an invalid value.')"/> 
												<xsl:text>skip|</xsl:text>
											</xsl:when>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="bogusTileMatrixSetId">BogusForTest</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$bogusTileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request>
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																				<ctl:with-param name="locators">TileMatrixSet</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.TileMatrixSet</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.TileMatrix">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$bogusTileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrix</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrix')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetTile.Invalid.TileMatrix')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>	

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.TileMatrix">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $bogusTileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrix</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>	

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.TileMatrix">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $bogusTileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">TileMatrix</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>	
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.TileMatrix">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a TileMatrix incorrect value, then the server throws an exception.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetFeatureInfo requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="dimName" select="$dim/ows:Identifier"/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="bogusTileMatrixId">BogusForTest</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $bogusTileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$bogusTileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request> 
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																				<ctl:with-param name="locators">TileMatrix</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.TileMatrix</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$maxTileRow + 1"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileRow</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$maxTileRow + 1"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileRow</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$maxTileRow + 1"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileRow</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Row.TileMatrixSetLimits">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Row incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$maxTileRow + 1"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request> 
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																				<ctl:with-param name="locators">TileRow</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$maxTileCol + 1"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileCol</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$maxTileCol + 1"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileCol</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$maxTileCol + 1"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">TileCol</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Col.TileMatrixSetLimits">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a Col incorrect value for a tile in a Layer with TileMatrixSetLimits, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$maxTileCol + 1"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request> 
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																				<ctl:with-param name="locators">TileRow</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Tile.Style">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">Style</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Style')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Tile.Style')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function> 

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Tile.Style">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">Style</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function> 

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Tile.Style">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId">BogusForTest</xsl:variable>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">Style</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.XML.POST.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function> 
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Tile.Style">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when GetFeatureInfo a request contains a Style incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($resourceURLtemplate,'{style}'))">
												<ctl:message select="concat('Template for layer ', $layer/ows:Identifier, ' does not contain {style} parameter to replace with an invalid value.')"/> 
												<xsl:text>skip|</xsl:text>
											</xsl:when>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style">BogusForTest</xsl:with-param>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request>
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
																				<ctl:with-param name="locators">Style</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'skip')">
					<ctl:message>Test skipped. Server.RESTful.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:skipped/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.Tile.Style</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.SampleDimension.Value">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="value">BogusForTest</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method><xsl:value-of select="$method"/></ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetFeatureInfo</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="infoFormat">
														<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<ctl:param name="J">
														<xsl:value-of select="$j"/>
													</ctl:param>
													<ctl:param name="I">
														<xsl:value-of select="$i"/>
													</ctl:param>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
															<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
															<ctl:dynamicParam>
																<ctl:name>
																	<xsl:value-of select="$dimNoDefaultName"/>
																</ctl:name>
																<ctl:value>
																	<xsl:value-of select="$value"/>
																</ctl:value>
															</ctl:dynamicParam>
														</xsl:if>
													</xsl:for-each>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimensionId"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateExceptionReport">
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
														<ctl:with-param name="locators" select="$dimensionId"/>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.SampleDimension.Value')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.SampleDimension.Value')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.SampleDimension.Value">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">BogusForTest</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="$value"/>
													</xsl:for-each>
													<xsl:value-of select="$dimValue"/>
												</xsl:variable>
												<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:request>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateExceptionReport">
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
														<ctl:with-param name="locators" select="$dimensionId"/>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.SampleDimension.Value">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">BogusForTest</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
												<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
												<xsl:variable name="response">
													<ctl:soap-request  version="1.2" charset="utf-8">
														<ctl:url>
															<xsl:value-of select="$serviceURL"/>
														</ctl:url>
														<ctl:body>
															<xsl:copy-of select="$postBody"/>
														</ctl:body>
														<parsers:HTTPParser>
															<parsers:parse>
																<parsers:SOAPParser return="content"/>
															</parsers:parse>
														</parsers:HTTPParser>
													</ctl:soap-request>
												</xsl:variable>
											<xsl:choose>
												<xsl:when test="not($response/response/content/*)">
													<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
													<xsl:variable name="code" select="$response/response/status/@code"/>
													<xsl:if test="$code != '' ">
														<ctl:message select="concat('HTTP status code ', $code)"/>
													</xsl:if>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
														<ctl:with-param name="httpParserExceptionReport" select="$response"/>
														<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
														<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
														<ctl:with-param name="locators" select="$dimensionId"/>
														<ctl:with-param name="oneOrAll">one</ctl:with-param>
														<ctl:with-param name="httpStatusCode">400</ctl:with-param>
													</ctl:call-function>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.SampleDimension.Value">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request contains a parameter name defined as a sample dimension with a value that is not defined for that dimension in the Service Metadata document, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension) + 1) idiv 2"/>
														<xsl:for-each select="$layer/wmts:Dimension[$dimensionPos]">
															<xsl:variable name="dimension" select="."/>
															<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
															<xsl:variable name="dimensionsMessage">
																<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																	<xsl:variable name="dimensionNoDefault" select="."/>
																	<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																	<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																		<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																		<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:for-each select="$dimension/wmts:Value[1]">
																<xsl:variable name="value" select="."/>
																<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
																<xsl:variable name="dimensionValues">
																	<xsl:for-each select="$layer/wmts:Dimension">
																		<xsl:variable name="dim" select="."/>
																		<xsl:variable name="value">
																			<xsl:choose>
																				<xsl:when test="position() = $dimensionPos">
																					<xsl:text>BogusForTest</xsl:text>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="$dim/wmts:Value[1]"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable> 
																		<xsl:value-of select="$value"/>
																		<xsl:if test="not(position() = last())">
																			<xsl:text>,</xsl:text>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="restURL">
																	<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																		<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																		<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																		<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																		<xsl:with-param name="style" select="$styleId"/>
																		<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																		<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																		<xsl:with-param name="tileRow" select="$row"/>
																		<xsl:with-param name="tileCol" select="$col"/>
																		<xsl:with-param name="j" select="$j"/>
																		<xsl:with-param name="i" select="$i"/>
																		<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																	</xsl:call-template>
																</xsl:variable>
																<ctl:message select="concat('restURL: ', $restURL)"/>														
																<xsl:variable name="response">
																	<ctl:request>
																		<ctl:url>
																			<xsl:value-of select="$restURL"/>
																		</ctl:url>
																		<ctl:method>get</ctl:method>
																		<parsers:HTTPParser>
																			<parsers:parse>
																				<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																			</parsers:parse>
																		</parsers:HTTPParser>
																	</ctl:request>
																</xsl:variable>
																<xsl:variable name="code" select="$response/response/status/@code"/>
																<xsl:choose>
																	<xsl:when test="not($code) or $code = '' ">
																		<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:when>
																	<xsl:when test="$code = '200' ">
																		<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																		<xsl:text>false|</xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:choose>
																			<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																				<xsl:variable name="dimensionsList" select="tokenize($dimensionNames, ',')"/>
																				<xsl:variable name="exceptionCodes">
																					<xsl:for-each select="$dimensionsList">
																						<xsl:text>MissingParameterValue</xsl:text>
																						<xsl:if test="not(position() = last())">
																							<xsl:text>,</xsl:text>
																						</xsl:if>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="bestPracticeException">
																					<ctl:call-function name="owsFunctions:validateExceptionReport">
																						<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																						<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																						<ctl:with-param name="exceptionCodes" select="$exceptionCodes"/>
																						<ctl:with-param name="locators" select="$dimensionNames"/>
																						<ctl:with-param name="oneOrAll">all</ctl:with-param>
																						<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																					</ctl:call-function>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains($bestPracticeException, 'false')">
																						<ctl:message select="concat('HTTP Status Code ', $code)"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:text>bestPractice</xsl:text>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:otherwise>
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.SampleDimension.Value</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Default.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="value">default</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method><xsl:value-of select="$method"/></ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetFeatureInfo</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="infoFormat">
														<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<ctl:param name="J">
														<xsl:value-of select="$j"/>
													</ctl:param>
													<ctl:param name="I">
														<xsl:value-of select="$i"/>
													</ctl:param>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
															<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
															<ctl:dynamicParam>
																<ctl:name>
																	<xsl:value-of select="$dimNoDefaultName"/>
																</ctl:name>
																<ctl:value>
																	<xsl:value-of select="$value"/>
																</ctl:value>
															</ctl:dynamicParam>
														</xsl:if>
													</xsl:for-each>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimensionId"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
													<parsers:HTTPParser/>
												</ctl:request>
											</xsl:variable>
											<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not($contentPresent)">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
															<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
															<xsl:text>false|</xsl:text>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Default.SampleDimension')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Default.SampleDimension')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Default.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">default</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser/>
												</ctl:request>
											</xsl:variable>
											<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not($contentPresent)">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
															<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
															<xsl:text>false|</xsl:text>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Default.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">default</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message> -->
											<xsl:variable name="content" select="$response/response/content/*"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not(exists($content))">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity content ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="description" select="wwwFunctions:describeNode($content)"/>
													<ctl:message select="concat('FeatureInfo content description: ', $description)"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Default.SampleDimension">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "default" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Default][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Default]) + 1) idiv 2"/>
														<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
														<xsl:for-each select="$layer/wmts:Dimension[wmts:Default][$dimensionPos]">
															<xsl:variable name="dimension" select="."/>
															<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
															<xsl:variable name="dimensionsMessage">
																<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																	<xsl:variable name="dimensionNoDefault" select="."/>
																	<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																	<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																		<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																		<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="value">default</xsl:variable>
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$layer/wmts:Dimension">
																	<xsl:variable name="dim" select="."/>
																	<xsl:variable name="value">
																		<xsl:choose>
																			<xsl:when test="position() = $dimensionPos">
																				<xsl:text>default</xsl:text>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="$dim/wmts:Value[1]"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable> 
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j" select="$j"/>
																	<xsl:with-param name="i" select="$i"/>
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>														
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser/>
																</ctl:request>
															</xsl:variable>
															<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
															<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
															<xsl:choose>
																<xsl:when test="not($contentPresent)">
																	<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:choose>
																		<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
																			<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
																			<xsl:text>false|</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:variable name="code" select="$response/response/status/@code"/>
															<xsl:if test="$code != '' ">
																<ctl:message select="concat('HTTP status code ', $code)"/>
															</xsl:if>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Default.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Current.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="value">current</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method><xsl:value-of select="$method"/></ctl:method>
													<ctl:param name="service">WMTS</ctl:param>
													<ctl:param name="request">GetFeatureInfo</ctl:param>
													<ctl:param name="version">
														<xsl:value-of select="$version"/>
													</ctl:param>
													<ctl:param name="layer">
														<xsl:value-of select="$layerId"/>
													</ctl:param>
													<ctl:param name="style">
														<xsl:value-of select="$styleId"/>
													</ctl:param>
													<ctl:param name="format">
														<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
													</ctl:param>
													<ctl:param name="infoFormat">
														<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
													</ctl:param>
													<ctl:param name="TileMatrixSet">
														<xsl:value-of select="$tileMatrixSetId"/>
													</ctl:param>
													<ctl:param name="TileMatrix">
														<xsl:value-of select="$tileMatrixId"/>
													</ctl:param>
													<ctl:param name="TileRow">
														<xsl:value-of select="$row"/>
													</ctl:param>
													<ctl:param name="TileCol">
														<xsl:value-of select="$col"/>
													</ctl:param>
													<ctl:param name="J">
														<xsl:value-of select="$j"/>
													</ctl:param>
													<ctl:param name="I">
														<xsl:value-of select="$i"/>
													</ctl:param>
													<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
														<xsl:variable name="dimensionNoDefault" select="."/>
														<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
														<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
															<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
															<ctl:dynamicParam>
																<ctl:name>
																	<xsl:value-of select="$dimNoDefaultName"/>
																</ctl:name>
																<ctl:value>
																	<xsl:value-of select="$value"/>
																</ctl:value>
															</ctl:dynamicParam>
														</xsl:if>
													</xsl:for-each>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimensionId"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
													<parsers:HTTPParser/>
												</ctl:request>
											</xsl:variable>
											<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not($contentPresent)">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
															<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
															<xsl:text>false|</xsl:text>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Current.SampleDimension')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Current.SampleDimension')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Current.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">current</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:request>
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:method>post</ctl:method>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser/>
												</ctl:request>
											</xsl:variable>
											<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not($contentPresent)">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
															<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
															<xsl:text>false|</xsl:text>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Current.SampleDimension">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
										<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
										<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
											<xsl:variable name="dimension" select="."/>
											<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
											<xsl:variable name="dimensionsMessage">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
														<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
														<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimValue">current</xsl:variable>
											<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $dimValue, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
												</xsl:for-each>
												<xsl:value-of select="$dimensionId"/>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)][ows:identifier != $dimension/ows:Identifier]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
												</xsl:for-each>
												<xsl:value-of select="$dimValue"/>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>
											</xsl:variable>
											<!-- <xsl:message>response: <xsl:copy-of select="$response"/></xsl:message> -->
											<xsl:variable name="content" select="$response/response/content/*"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:choose>
												<xsl:when test="not(exists($content))">
													<ctl:message select="concat('FAILURE: Missing or invalid response entity content ; should have been Feature Info in format ', $infoFormat)"/>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="description" select="wwwFunctions:describeNode($content)"/>
													<ctl:message select="concat('FeatureInfo content description: ', $description)"/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Current.SampleDimension">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Test that a WMTS server can return FeatureInfo for pixels in tiles in response to valid KVP GetFeatureInfo requests with optional sample dimensions parameter with the "current" values specified in the Service Metadata document.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][wmts:Dimension/wmts:Current][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionPos" select="(count($layer/wmts:Dimension[wmts:Current]) + 1) idiv 2"/>
														<!-- <ctl:message select="concat('dimensionPos ', $dimensionPos)"/> -->
														<xsl:for-each select="$layer/wmts:Dimension[wmts:Current][$dimensionPos]">
															<xsl:variable name="dimension" select="."/>
															<xsl:variable name="dimensionId" select="$dimension/ows:Identifier"/>
															<xsl:variable name="dimensionsMessage">
																<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																	<xsl:variable name="dimensionNoDefault" select="."/>
																	<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																	<xsl:if test="$dimNoDefaultName != $dimension/ows:Identifier">
																		<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																		<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="value">current</xsl:variable>
															<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, ' dimension ', $dimensionId, ' value ', $value, $dimensionsMessage)"/>
															<xsl:variable name="dimensionValues">
																<xsl:for-each select="$layer/wmts:Dimension">
																	<xsl:variable name="dim" select="."/>
																	<xsl:variable name="value">
																		<xsl:choose>
																			<xsl:when test="position() = $dimensionPos">
																				<xsl:text>current</xsl:text>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="$dim/wmts:Value[1]"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable> 
																	<xsl:value-of select="$value"/>
																	<xsl:if test="not(position() = last())">
																		<xsl:text>,</xsl:text>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="restURL">
																<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																	<xsl:with-param name="urlTemplate" select="$resourceURLtemplate "/>
																	<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																	<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																	<xsl:with-param name="style" select="$styleId"/>
																	<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																	<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																	<xsl:with-param name="tileRow" select="$row"/>
																	<xsl:with-param name="tileCol" select="$col"/>
																	<xsl:with-param name="j" select="$j"/>
																	<xsl:with-param name="i" select="$i"/>
																	<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
																</xsl:call-template>
															</xsl:variable>
															<ctl:message select="concat('restURL: ', $restURL)"/>														
															<xsl:variable name="response">
																<ctl:request>
																	<ctl:url>
																		<xsl:value-of select="$restURL"/>
																	</ctl:url>
																	<ctl:method>get</ctl:method>
																	<parsers:HTTPParser/>
																</ctl:request>
															</xsl:variable>
															<xsl:variable name="contentPresent" select="string-length($response/response/content) > 0"/>
															<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
															<xsl:choose>
																<xsl:when test="not($contentPresent)">
																	<ctl:message select="concat('FAILURE: Missing or invalid response entity ; should have been Feature Info in format ', $infoFormat)"/>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:choose>
																		<xsl:when test="string(wwwFunctions:mime-match($contentType, $infoFormat)) = 'true' ">
																			<ctl:message select="concat('Response entity contentType ', $contentType, ' considered to match infoFormat ', $infoFormat)"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<ctl:message select="concat('Failure: Response entity contentType ', $contentType, ' not considered to match infoFormat ', $infoFormat)"/>
																			<xsl:text>false|</xsl:text>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:variable name="code" select="$response/response/status/@code"/>
															<xsl:if test="$code != '' ">
																<ctl:message select="concat('HTTP status code ', $code)"/>
															</xsl:if>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Current.SampleDimension</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>						
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.NonQueryable.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormat">application/gml+xml; version=3.1</xsl:variable>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="minTileJ">0</xsl:variable>
									<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
									<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
									<xsl:variable name="minTileI">0</xsl:variable>
									<xsl:variable name="maxTileI" select="$tileWidth -1"/>
									<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="j" select="$midTileJ"/>
									<xsl:variable name="i" select="$midTileI"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method><xsl:value-of select="$method"/></ctl:method>
											<ctl:param name="service">WMTS</ctl:param>
											<ctl:param name="request">GetFeatureInfo</ctl:param>
											<ctl:param name="version">
												<xsl:value-of select="$version"/>
											</ctl:param>
											<ctl:param name="layer">
												<xsl:value-of select="$layerId"/>
											</ctl:param>
											<ctl:param name="style">
												<xsl:value-of select="$styleId"/>
											</ctl:param>
											<ctl:param name="format">
												<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
											</ctl:param>
											<ctl:param name="infoFormat">
												<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
											</ctl:param>
											<ctl:param name="TileMatrixSet">
												<xsl:value-of select="$tileMatrixSetId"/>
											</ctl:param>
											<ctl:param name="TileMatrix">
												<xsl:value-of select="$tileMatrixId"/>
											</ctl:param>
											<ctl:param name="TileRow">
												<xsl:value-of select="$row"/>
											</ctl:param>
											<ctl:param name="TileCol">
												<xsl:value-of select="$col"/>
											</ctl:param>
											<ctl:param name="J">
												<xsl:value-of select="$j"/>
											</ctl:param>
											<ctl:param name="I">
												<xsl:value-of select="$i"/>
											</ctl:param>
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<ctl:dynamicParam>
													<ctl:name>
														<xsl:value-of select="$dimNoDefaultName"/>
													</ctl:name>
													<ctl:value>
														<xsl:value-of select="$value"/>
													</ctl:value>
												</ctl:dynamicParam>
											</xsl:for-each>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">OperationNotSupported</ctl:with-param>
												<ctl:with-param name="locators">GetFeatureInfo</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">501</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.NonQueryable.Layer')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.NonQueryable.Layer')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.NonQueryable.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormat">application/gml+xml; version=3.1</xsl:variable>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="minTileJ">0</xsl:variable>
									<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
									<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
									<xsl:variable name="minTileI">0</xsl:variable>
									<xsl:variable name="maxTileI" select="$tileWidth -1"/>
									<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="j" select="$midTileJ"/>
									<xsl:variable name="i" select="$midTileI"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
									<xsl:variable name="response">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">OperationNotSupported</ctl:with-param>
												<ctl:with-param name="locators">GetFeatureInfo</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">501</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.NonQueryable.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.NonQueryable.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.NonQueryable.Layer">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeatureInfo request is made for a non-queryable layer, then the server throws an exception.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[not(wmts:InfoFormat)][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormat">application/gml+xml; version=3.1</xsl:variable>
							<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
							<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
								<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
								<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
								<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
								<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
								<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
								<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
								<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
									<xsl:variable name="tileMatrix" select="."/>
									<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
									<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
									<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
									<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
									<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
									<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
									<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
									<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
									<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
									<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
									<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
									<xsl:variable name="minTileJ">0</xsl:variable>
									<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
									<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
									<xsl:variable name="minTileI">0</xsl:variable>
									<xsl:variable name="maxTileI" select="$tileWidth -1"/>
									<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
									<xsl:variable name="row" select="$midTileRow"/>
									<xsl:variable name="col" select="$midTileCol"/>
									<xsl:variable name="j" select="$midTileJ"/>
									<xsl:variable name="i" select="$midTileI"/>
									<xsl:variable name="dimensionsMessage">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
										</xsl:for-each>
									</xsl:variable>
									<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
									<xsl:variable name="dimensionNames">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
											<xsl:value-of select="$dimNoDefaultName"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="dimensionValues">
										<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
											<xsl:variable name="dimensionNoDefault" select="."/>
											<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
											<xsl:value-of select="$value"/>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
									<xsl:variable name="response">
										<ctl:soap-request  version="1.2" charset="utf-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<xsl:copy-of select="$postBody"/>
											</ctl:body>
											<parsers:HTTPParser>
												<parsers:parse>
													<parsers:SOAPParser return="content"/>
												</parsers:parse>
											</parsers:HTTPParser>
										</ctl:soap-request>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="not($response/response/content/*)">
											<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:if test="$code != '' ">
												<ctl:message select="concat('HTTP status code ', $code)"/>
											</xsl:if>
											<xsl:text>false|</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
												<ctl:with-param name="httpParserExceptionReport" select="$response"/>
												<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
												<ctl:with-param name="exceptionCodes">OperationNotSupported</ctl:with-param>
												<ctl:with-param name="locators">GetFeatureInfo</ctl:with-param>
												<ctl:with-param name="oneOrAll">one</ctl:with-param>
												<ctl:with-param name="httpStatusCode">501</ctl:with-param>
											</ctl:call-function>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.NonQueryable.Layer</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Valid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:description>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<!-- <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/> -->
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">	<!--[$infoFormatPos]" -->
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser/>
											</ctl:request>
										</xsl:variable>

										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
										<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

										<!-- ctl:message select="concat(' Code: ', $code)"/ -->
										<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
										<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

										<xsl:choose>
											<xsl:when test="$code != '200' ">
												<ctl:message>Response does not contain Status Code 200.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:choose>
													<xsl:when test="$contentType != $infoFormat ">
														<ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
														<xsl:text>false|</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:choose>
															<xsl:when test="$contentLength &lt;= 1 ">
																<ctl:message>Response does not contain any content.</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
														</xsl:choose>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
										</xsl:choose>

									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Valid.InfoFormat')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Valid.InfoFormat')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Valid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<!-- <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/> -->
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">	<!--[$infoFormatPos]" -->
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser/>
											</ctl:request>
										</xsl:variable>

										<xsl:variable name="code" select="$response/response/status/@code"/>
										<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
										<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

										<!-- ctl:message select="concat(' Code: ', $code)"/ -->
										<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
										<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

										<xsl:choose>
											<xsl:when test="$code != '200' ">
												<ctl:message>Response does not contain Status Code 200.</ctl:message>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:choose>
													<xsl:when test="$contentType != $infoFormat ">
														<ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
														<xsl:text>false|</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:choose>
															<xsl:when test="$contentLength &lt;= 1 ">
																<ctl:message>Response does not contain any content.</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
														</xsl:choose>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
										</xsl:choose>

									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Valid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format.</ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<!-- <xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/> -->
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">	<!--[$infoFormatPos]" -->
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
											<xsl:variable name="dimensionNames">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:value-of select="$dimNoDefaultName"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="dimensionValues">
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<xsl:value-of select="$value"/>
													<xsl:if test="not(position() = last())">
														<xsl:text>,</xsl:text>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
											<xsl:variable name="response">
												<ctl:soap-request  version="1.2" charset="utf-8">
													<ctl:url>
														<xsl:value-of select="$serviceURL"/>
													</ctl:url>
													<ctl:body>
														<xsl:copy-of select="$postBody"/>
													</ctl:body>
													<parsers:HTTPParser>
														<parsers:parse>
															<parsers:SOAPParser return="content"/>
														</parsers:parse>
													</parsers:HTTPParser>
												</ctl:soap-request>
											</xsl:variable>

											<xsl:variable name="code" select="$response/response/status/@code"/>
											<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
											<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

											<!-- ctl:message select="concat(' Code: ', $code)"/ -->
											<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
											<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

											<xsl:choose>
												<xsl:when test="$code != '200' ">
													<ctl:message>Response does not contain Status Code 200.</ctl:message>
													<xsl:text>false|</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="$contentType != $infoFormat ">
															<ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
															<xsl:text>false|</xsl:text>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="$contentLength &lt;= 1 ">
																	<ctl:message>Response does not contain any content.</ctl:message>
																	<xsl:text>false|</xsl:text>
																</xsl:when>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>

									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Valid.InfoFormat">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:description>Verify that for each GetFeatureInfo format, when the InfoFormat parameter is set to that format or URLtemplate having a format parameter, the MIME type of the response matches that format.</ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('format ', $format, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser/>
															</ctl:request>
														</xsl:variable>

														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:variable name="contentType" select="$response/response/headers/header[@name='Content-Type']"/>
														<xsl:variable name="contentLength" select="$response/response/headers/header[@name='Content-Length']"/>

														<!-- ctl:message select="concat(' Code: ', $code)"/ -->
														<!-- ctl:message select="concat(' Content-Type: ', $contentType)"/ -->
														<!-- ctl:message select="concat(' Content-Length: ', $contentLength)"/ -->

														<xsl:choose>
															<xsl:when test="$code != '200' ">
																<ctl:message>Response does not contain Status Code 200.</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$contentType != $infoFormat ">
																		<ctl:message select="concat(' ContentType ', $contentType, ' does not match with InfoFormat ', $infoFormat, ' . ')"/>
																		<xsl:text>false|</xsl:text>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:choose>
																			<xsl:when test="$contentLength &lt;= 1 ">
																				<ctl:message>Response does not contain any content.</ctl:message>
																				<xsl:text>false|</xsl:text>
																			</xsl:when>
																		</xsl:choose>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format, ' infoformat ', $infoFormat)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format, ' infoformat ', $infoFormat)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Valid.InfoFormat</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat">BogusForTest</xsl:variable>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">InfoFormat</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.InfoFormat')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.InfoFormat')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat">BogusForTest</xsl:variable>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">InfoFormat</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.InfoFormat">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains an InfoFormat incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat">BogusForTest</xsl:variable>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
													<ctl:with-param name="locators">InfoFormat</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.InfoFormat</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Row.J">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$maxTileJ + 1"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">J</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed.  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.InfoFormat')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.InfoFormat')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Pixel.Row.J">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$maxTileJ + 1"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">J</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Pixel.Row.J">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="minTileI">0</xsl:variable>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$maxTileJ + 1"/>
										<xsl:variable name="i" select="$midTileI"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">J</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Pixel.Row.J">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Row J incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="minTileI">0</xsl:variable>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="midTileI" select="($minTileI + $maxTileI) idiv 2"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$maxTileJ + 1"/>
														<xsl:variable name="i" select="$midTileI"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request> 
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																				<ctl:with-param name="locators">TileRow</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.Pixel.Row.J</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>					
	</ctl:function>
	
	<ctl:function name="wmtsFunctions:KVP.GetFeatureInfo.Invalid.Pixel.Col.I">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="method">get|post</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing KVP ', upper-case($method), ' GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$maxTileI + 1"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method><xsl:value-of select="$method"/></ctl:method>
												<ctl:param name="service">WMTS</ctl:param>
												<ctl:param name="request">GetFeatureInfo</ctl:param>
												<ctl:param name="version">
													<xsl:value-of select="$version"/>
												</ctl:param>
												<ctl:param name="layer">
													<xsl:value-of select="$layerId"/>
												</ctl:param>
												<ctl:param name="style">
													<xsl:value-of select="$styleId"/>
												</ctl:param>
												<ctl:param name="format">
													<xsl:value-of select="wmtsFunctions:encodeForUri($format)"/>
												</ctl:param>
												<ctl:param name="infoFormat">
													<xsl:value-of select="wmtsFunctions:encodeForUri($infoFormat)"/>
												</ctl:param>
												<ctl:param name="TileMatrixSet">
													<xsl:value-of select="$tileMatrixSetId"/>
												</ctl:param>
												<ctl:param name="TileMatrix">
													<xsl:value-of select="$tileMatrixId"/>
												</ctl:param>
												<ctl:param name="TileRow">
													<xsl:value-of select="$row"/>
												</ctl:param>
												<ctl:param name="TileCol">
													<xsl:value-of select="$col"/>
												</ctl:param>
												<ctl:param name="J">
													<xsl:value-of select="$j"/>
												</ctl:param>
												<ctl:param name="I">
													<xsl:value-of select="$i"/>
												</ctl:param>
												<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
													<xsl:variable name="dimensionNoDefault" select="."/>
													<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
													<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
													<ctl:dynamicParam>
														<ctl:name>
															<xsl:value-of select="$dimNoDefaultName"/>
														</ctl:name>
														<ctl:value>
															<xsl:value-of select="$value"/>
														</ctl:value>
													</ctl:dynamicParam>
												</xsl:for-each>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">I</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message select="concat('[FAILURE] Test failed. Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Pixel.Col.I')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Test passed:  Server.KVP.', upper-case($method), '.GetFeatureInfo.Invalid.Pixel.Col.I')"/>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:XML.GetFeatureInfo.Invalid.Pixel.Col.I">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing XML POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$maxTileI + 1"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<!-- <parsers:NullParser/> don't echo response -->
														<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">I</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.XML.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:SOAP.GetFeatureInfo.Invalid.Pixel.Col.I">
		<ctl:param name="featureInfoURL"/>
		<ctl:param name="version">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($featureInfoURL)"/>
			<ctl:message select="concat('Issuing SOAP POST GetFeatureInfo requests to ', $serviceURL, ' for the following:')"/>
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:variable name="infoFormatPos" select="(count($layer/wmts:InfoFormat) + 1) idiv 2"/>
							<!-- <ctl:message select="concat('infoFormatPos ', $infoFormatPos)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat[$infoFormatPos]">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
								<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
								<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
									<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
									<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
									<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
									<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
									<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
									<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
									<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
										<xsl:variable name="tileMatrix" select="."/>
										<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
										<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
										<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
										<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
										<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
										<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
										<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
										<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
										<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
										<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
										<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
										<xsl:variable name="minTileJ">0</xsl:variable>
										<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
										<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
										<xsl:variable name="maxTileI" select="$tileWidth -1"/>
										<xsl:variable name="row" select="$midTileRow"/>
										<xsl:variable name="col" select="$midTileCol"/>
										<xsl:variable name="j" select="$midTileJ"/>
										<xsl:variable name="i" select="$maxTileI + 1"/>
										<xsl:variable name="dimensionsMessage">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
											</xsl:for-each>
										</xsl:variable>
										<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
										<xsl:variable name="dimensionNames">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
												<xsl:value-of select="$dimNoDefaultName"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="dimensionValues">
											<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
												<xsl:variable name="dimensionNoDefault" select="."/>
												<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
												<xsl:value-of select="$value"/>
												<xsl:if test="not(position() = last())">
													<xsl:text>,</xsl:text>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="postBody" select="wmtsFunctions:makeXMLpostGetFeatureInfoRequest($version, $layerId, $styleId, $format, $dimensionNames, $dimensionValues, $tileMatrixSetId, $tileMatrixId, $row, $col, $j, $i, $infoFormat)"/>
										<xsl:variable name="response">
											<ctl:soap-request  version="1.2" charset="utf-8">
												<ctl:url>
													<xsl:value-of select="$serviceURL"/>
												</ctl:url>
												<ctl:body>
													<xsl:copy-of select="$postBody"/>
												</ctl:body>
												<parsers:HTTPParser>
													<parsers:parse>
														<parsers:SOAPParser return="content"/>
													</parsers:parse>
												</parsers:HTTPParser>
											</ctl:soap-request>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($response/response/content/*)">
												<ctl:message>FAILURE: Missing or invalid response entity contents; should have been an ows:ExceptionReport.</ctl:message>
												<xsl:variable name="code" select="$response/response/status/@code"/>
												<xsl:if test="$code != '' ">
													<ctl:message select="concat('HTTP status code ', $code)"/>
												</xsl:if>
												<xsl:text>false|</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="owsFunctions:validateSOAPExceptionReport">
													<ctl:with-param name="httpParserExceptionReport" select="$response"/>
													<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
													<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
													<ctl:with-param name="locators">I</ctl:with-param>
													<ctl:with-param name="oneOrAll">one</ctl:with-param>
													<ctl:with-param name="httpStatusCode">400</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed.  Server.SOAP.POST.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:RESTful.GetFeatureInfo.Invalid.Pixel.Col.I">
		<ctl:param name="wmts.capabilities.doc">Capabilities document from test suite bootstrap.</ctl:param>
		<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
		<ctl:description>Verify that when a GetFeature request contains a Pixel Col I incorrect value, then the server throws an exception. </ctl:description>
		<ctl:code>
			<ctl:message>Issuing RESTful GetTile requests for the following:</ctl:message> 
			<xsl:variable name="layerPos" select="(count($wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat]) + 1) idiv 2"/>
			<!-- <ctl:message select="concat('layerPos ', $layerPos)"/> -->
			<xsl:variable name="results">
				<xsl:for-each select="$wmts.capabilities.doc//wmts:Contents/wmts:Layer[wmts:InfoFormat][$layerPos]">
					<xsl:variable name="layer" select="."/>
					<xsl:variable name="layerId" select="$layer/ows:Identifier"/>
					<!-- <ctl:message select="concat('layer ', $layerId)"/> -->
					<xsl:variable name="stylePos" select="(count($layer/wmts:Style) +1) idiv 2"/>
					<!-- <ctl:message select="concat('layer ', $layerId, ' stylePos ', $stylePos)"/> -->
					<xsl:for-each select="$layer/wmts:Style[$stylePos]">
						<xsl:variable name="style" select="."/>
						<xsl:variable name="styleId" select="$style/ows:Identifier"/>
						<!-- <ctl:message select="concat('style ', $styleId)"/> -->
						<xsl:variable name="formatPos" select="(count($layer/wmts:Format) + 1) idiv 2"/>
						<!-- <ctl:message select="concat('formatPos ', $formatPos)"/> -->
						<xsl:for-each select="$layer/wmts:Format[$formatPos]">
							<xsl:variable name="format" select="."/>
							<!-- <ctl:message select="concat('format ', $format)"/> -->
							<xsl:for-each select="$layer/wmts:InfoFormat">
								<xsl:variable name="infoFormat" select="."/>
								<xsl:variable name="resourceURLtemplate" select="wmtsFunctions:getResourceURLforLayer($layer, $infoFormat, 'FeatureInfo')"/>
								<!-- <ctl:message select="concat('layer ', $layer/ows:Identifier, ' format ', $format, ' template: ', $resourceURLtemplate)"/> -->
								<xsl:choose>
									<xsl:when test="$resourceURLtemplate != '' ">
										<xsl:variable name="dimensionNames" select="string-join($layer/wmts:Dimension/ows:Identifier, ',')"/>  
										<xsl:variable name="validRequestURLtemplate" select="wmtsFunctions:isValidFeatureInfoURLtemplate($resourceURLtemplate, $layerId, $dimensionNames)"/>
										<xsl:choose>
											<xsl:when test="not(contains($validRequestURLtemplate, 'false'))">
												<xsl:variable name="tmslPos" select="(count($layer/wmts:TileMatrixSetLink) + 1) idiv 2"/>
												<!-- <ctl:message select="concat('infoFormat ', $infoFormat, ' tmslPos ', $tmslPos)"/> -->
												<xsl:for-each select="$layer/wmts:TileMatrixSetLink[$tmslPos]">
													<xsl:variable name="tileMatrixSetId" select="wmts:TileMatrixSet"/>
													<xsl:variable name="tileMatrixSetLimits" select="wmts:TileMatrixSetLimits"/>
													<xsl:variable name="setLimits" select="count($tileMatrixSetLimits/*) gt 0"/>
													<!-- <ctl:message select="concat('tileMatrixSet ', $tileMatrixSetId, ' has limits ', $setLimits)"/> -->
													<xsl:variable name="tileMatrixSet" select="$wmts.capabilities.doc//wmts:Contents/wmts:TileMatrixSet[ows:Identifier = $tileMatrixSetId]"/>
													<xsl:variable name="tmsPos" select="(count($tileMatrixSet/wmts:TileMatrix)  + 1) idiv 2"/>
													<xsl:for-each select="$tileMatrixSet/wmts:TileMatrix[$tmsPos]">
														<xsl:variable name="tileMatrix" select="."/>
														<xsl:variable name="tileMatrixId" select="$tileMatrix/ows:Identifier"/>
														<xsl:variable name="tileWidth" select="$tileMatrix/wmts:TileWidth"/>
														<xsl:variable name="tileHeight" select="$tileMatrix/wmts:TileHeight"/>
														<!-- <ctl:message select="concat('tileMatrix ', $tileMatrixId)"/> -->
														<xsl:variable name="tileMatrixLimits" select="$tileMatrixSetLimits/wmts:TileMatrixLimits[wmts:TileMatrix = $tileMatrixId]"/>
														<xsl:variable name="matrixLimits" select="count($tileMatrixLimits/*) gt 0"/>
														<xsl:variable name="minTileRow" select="wmtsFunctions:minTileRow($tileMatrixLimits)"/>
														<xsl:variable name="maxTileRow" select="wmtsFunctions:maxTileRow($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileRow" select="($minTileRow + $maxTileRow) idiv 2"/>
														<xsl:variable name="minTileCol" select="wmtsFunctions:minTileCol($tileMatrixLimits)"/>
														<xsl:variable name="maxTileCol" select="wmtsFunctions:maxTileCol($tileMatrixLimits, $tileMatrix)"/>
														<xsl:variable name="midTileCol" select="($minTileCol + $maxTileCol) idiv 2"/>
														<xsl:variable name="minTileJ">0</xsl:variable>
														<xsl:variable name="maxTileJ" select="$tileHeight -1"/>
														<xsl:variable name="midTileJ" select="($minTileJ + $maxTileJ) idiv 2"/>
														<xsl:variable name="maxTileI" select="$tileWidth -1"/>
														<xsl:variable name="row" select="$midTileRow"/>
														<xsl:variable name="col" select="$midTileCol"/>
														<xsl:variable name="j" select="$midTileJ"/>
														<xsl:variable name="i" select="$maxTileI + 1"/>
														<xsl:variable name="dimensionsMessage">
															<xsl:for-each select="$layer/wmts:Dimension[not(wmts:Default)]">
																<xsl:variable name="dimensionNoDefault" select="."/>
																<xsl:variable name="dimNoDefaultName" select="$dimensionNoDefault/ows:Identifier"/>
																<xsl:variable name="value" select="$dimensionNoDefault/wmts:Value[1]"/>
																<xsl:value-of select="concat(' dimension ', $dimNoDefaultName, ' value ', $value)"/>
															</xsl:for-each>
														</xsl:variable>
														<ctl:message select="concat('layer ', $layerId, ' style ', $styleId, ' format ', $format, ' infoFormat ', $infoFormat, ' tileMatrixSet ', $tileMatrixSetId, ' has limits ', boolean($tileMatrixSetLimits), ' tileMatrix ', $tileMatrixId, ' row ', $row, ' col ', $col, ' j ', $j, ' i ', $i, $dimensionsMessage)"/>
														<xsl:variable name="dimensionValues">
															<xsl:for-each select="$layer/wmts:Dimension">
																<xsl:variable name="dim" select="."/>
																<xsl:variable name="value" select="$dim/wmts:Value[1]"/>
																<xsl:value-of select="$value"/>
																<xsl:if test="not(position() = last())">
																	<xsl:text>,</xsl:text>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="restURL">
															<xsl:call-template name="wmts:RESTfulTemplateProcessor">
																<xsl:with-param name="urlTemplate" select="$resourceURLtemplate"/>
																<xsl:with-param name="dimensionNames" select="$dimensionNames"/>  
																<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
																<xsl:with-param name="style" select="$styleId"/>
																<xsl:with-param name="tileMatrixSet" select="$tileMatrixSetId"/>
																<xsl:with-param name="tileMatrix" select="$tileMatrixId"/>
																<xsl:with-param name="tileRow" select="$row"/>
																<xsl:with-param name="tileCol" select="$col"/>
																<xsl:with-param name="j" select="$j"/>
																<xsl:with-param name="i" select="$i"/>
																<xsl:with-param name="requestURL"></xsl:with-param> <!-- initially empty, constructed via recursive template invocations -->
															</xsl:call-template>
														</xsl:variable>
														<ctl:message select="concat('restURL: ', $restURL)"/>
														<xsl:variable name="response">
															<ctl:request>
																<ctl:url>
																	<xsl:value-of select="$restURL"/>
																</ctl:url>
																<ctl:method>get</ctl:method>
																<parsers:HTTPParser>
																	<parsers:parse>
																		<parsers:XSLTransformationParser resource="rewriteNonException.xsl"/>
																	</parsers:parse>
																</parsers:HTTPParser>
															</ctl:request> 
														</xsl:variable>
														<xsl:variable name="code" select="$response/response/status/@code"/>
														<xsl:choose>
															<xsl:when test="not($code) or $code = '' ">
																<ctl:message>FAILURE: Missing HTTP status code</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:when test="$code = '200' ">
																<ctl:message>FAILURE:  HTTP status code is 200 OK but should indicate an error</ctl:message>
																<xsl:text>false|</xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="$code = '404' and exists($response/response/content/*) ">
																		<xsl:variable name="bestPracticeException">
																			<ctl:call-function name="owsFunctions:validateExceptionReport">
																				<ctl:with-param name="httpParserExceptionReport" select="$response"/>
																				<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
																				<ctl:with-param name="exceptionCodes">TileOutOfRange</ctl:with-param>
																				<ctl:with-param name="locators">TileRow</ctl:with-param>
																				<ctl:with-param name="oneOrAll">one</ctl:with-param>
																				<ctl:with-param name="httpStatusCode">404</ctl:with-param>
																			</ctl:call-function>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains($bestPracticeException, 'false')">
																				<ctl:message select="concat('HTTP Status Code ', $code)"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:text>bestPractice</xsl:text>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<ctl:message select="concat('HTTP Status Code ', $code)"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<ctl:message select="concat('FAILURE: invalid template ', $resourceURLtemplate, ' for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
												<xsl:text>false|</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message select="concat('FAILURE:no resourceURLtemplate found for layer ', $layer/ows:Identifier, ' format ', $format)"/> 
										<xsl:text>false|</xsl:text>
									</xsl:otherwise>	
								</xsl:choose>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="contains($results, 'false')">
					<ctl:message>[FAILURE] Test failed. Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="contains($results, 'bestPractice')">
					<ctl:message>Test passed as BestPractice: Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:bestPractice/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Test passed. Server.RESTful.GetFeatureInfo.Invalid.Pixel.Col.I</ctl:message>
					<ctl:pass/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>					
	</ctl:function>

	<ctl:function name="wmtsFunctions:getResourceURLforLayer">
		<ctl:param name="layer">wmts:Layer element from bootstrap Capabilities document</ctl:param>
		<ctl:param name="format">format for tile or infoFormat for FeatureInfo</ctl:param>
		<ctl:param name="resourceType">tile|FeatureInfo</ctl:param>
		<ctl:description>Returns wmts:ResourceURL/@template value for specified layer, format, and resourceType, if there is one and only one, else returns nothing</ctl:description>
		<ctl:code>
			<xsl:variable name="resourceURL" select="$layer/wmts:ResourceURL[lower-case(@format) = lower-case($format) and lower-case(@resourceType) = lower-case($resourceType)]"/>
			<xsl:variable name="numResU" select="count($resourceURL)"/>
			<xsl:choose>
				<xsl:when test="$numResU = 1">
					<xsl:value-of select="$resourceURL/@template"/>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message select="concat('Warning: Expected one wmts:ResourceURL for layer ', $layer/ows:Identifier, ' format ', $format, ' resourceType ', $resourceType, ' but found ', $numResU)"/>
					<xsl:value-of select="$resourceURL[1]/@template"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:isValidFeatureInfoURLtemplate">
		<ctl:param name="template"/>
		<ctl:param name="layerId"/>
		<ctl:param name="dimensionNames"/>
		<ctl:description>Returns nothing for URL template with all parameters, string with false| one or more times for invalid one.</ctl:description>
		<ctl:code>
			<xsl:value-of select="wmtsFunctions:isValidTileURLtemplate($template, $layerId, $dimensionNames)"/>
			<xsl:if test="not(contains($template, '{J}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
			<xsl:if test="not(contains($template, '{I}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
		</ctl:code>
	</ctl:function>

	<ctl:function name="wmtsFunctions:isValidTileURLtemplate">
		<ctl:param name="template"/>
		<ctl:param name="layerId"/>
		<ctl:param name="dimensionNames"/>
		<ctl:description>Returns nothing for URL template with all parameters, string with false| one or more times for invalid one.</ctl:description>
		<ctl:code>
		<!--
			<xsl:if test="not(contains($template, $layerId))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
			<xsl:if test="not(contains($template, '{TileMatrixSet}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
		-->
			<xsl:if test="not(contains($template, '{TileMatrix}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
			<xsl:if test="not(contains($template, '{TileRow}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
			<xsl:if test="not(contains($template, '{TileCol}'))">
				<xsl:text>false|</xsl:text>
			</xsl:if>
		<!--
			<xsl:variable name="dimensionNameList" select="tokenize($dimensionNames, ',')"/>
			<xsl:for-each select="$dimensionNameList">
				<xsl:variable name="dimensionName" select="."/>
				<xsl:if test="$dimensionName != '' ">
					<xsl:variable name="templateVariable" select="concat('{', $dimensionName, '}')"/>
					<xsl:if test="not(contains($template, $templateVariable))">
						<xsl:text>false|</xsl:text>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		-->
		</ctl:code>
	</ctl:function>

	<!-- recursive template to substitute values for parameters in a RESTful URLtemplate -->
	<xsl:template name="wmts:RESTfulTemplateProcessor">
		<xsl:param name="urlTemplate"/>
		<xsl:param name="dimensionNames"/>
		<xsl:param name="dimensionValues"/>
		<xsl:param name="style"/>
		<xsl:param name="tileMatrixSet"/>
		<xsl:param name="tileMatrix"/>
		<xsl:param name="tileRow"/>
		<xsl:param name="tileCol"/>
		<xsl:param name="j"/>
		<xsl:param name="i"/>
		<xsl:param name="requestURL"/>
		<xsl:choose>
			<xsl:when test="$urlTemplate = '' ">
				<xsl:value-of select="$requestURL"/> 
			</xsl:when>
			<xsl:when test="not(contains($urlTemplate, '{'))">
				<xsl:value-of select="concat($requestURL, $urlTemplate)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="prefix" select="substring-before($urlTemplate, '{')"/>
				<xsl:variable name="middle" select="substring-after($urlTemplate, '{')"/>
				<xsl:variable name="parameterName" select="substring-before($middle, '}')"/>
				<xsl:variable name="suffix" select="substring-after($middle, '}')"/>
				<!-- <xsl:message select="concat('prefix ', $prefix, ' middle ', $middle, ' parameterName ', $parameterName, ' suffix ', $suffix)"/> -->
				<xsl:variable name="parameterValue">
					<xsl:choose>
						<xsl:when test="lower-case($parameterName) = 'style' ">
							<xsl:value-of select="$style"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'tilematrixset' ">
							<xsl:value-of select="$tileMatrixSet"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'tilematrix' ">
							<xsl:value-of select="$tileMatrix"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'tilerow' ">
							<xsl:value-of select="$tileRow"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'tilecol' ">
							<xsl:value-of select="$tileCol"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'j' ">
							<xsl:value-of select="$j"/>
						</xsl:when>
						<xsl:when test="lower-case($parameterName) = 'i' ">
							<xsl:value-of select="$i"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="dimensionNamesList" select="tokenize($dimensionNames, ',')"/>
							<xsl:variable name="numDimNames" select="count($dimensionNamesList)"/>
							<xsl:variable name="dimensionValues2">
								<xsl:choose>
									<xsl:when test="$dimensionValues = '' "> <!-- supply default values -->
										<xsl:for-each select="1 to $numDimNames">
											<xsl:text>default</xsl:text>
											<xsl:if test="not(position() = last())">
												<xsl:text>,</xsl:text>
											</xsl:if>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="$dimensionValues"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable> 
							<xsl:variable name="dimensionValuesList" select="tokenize($dimensionValues2, ',')"/>
							<xsl:for-each select="1 to $numDimNames">
								<xsl:variable name="pos" select="."/>
								<xsl:variable name="dimensionName" select="$dimensionNamesList[$pos]"/>
								<!-- <xsl:message select="concat('pos ', $pos, ' dimensionName ', $dimensionName, ' value ', $dimensionValuesList[$pos])"/> -->
								<xsl:if test="lower-case($parameterName) = lower-case($dimensionName)">
									<xsl:value-of select="$dimensionValuesList[$pos]"/>
								</xsl:if>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- <xsl:message select="concat('parameterValue ', $parameterValue)"/> -->
				<xsl:variable name="replacementValue">
					<xsl:choose>
						<xsl:when test="$parameterValue = 'MISSING' ">
							<xsl:text></xsl:text>
						</xsl:when>
						<xsl:when test="$parameterValue != '' ">
							<xsl:value-of select="$parameterValue"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$parameterName"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="requestURLextended" select="concat($requestURL, $prefix, $replacementValue)"/>
				<!-- <xsl:message select="concat('replacementValue ', $replacementValue, ' rue ', $requestURLextended)"/> -->
				<xsl:call-template name="wmts:RESTfulTemplateProcessor">
					<xsl:with-param name="urlTemplate" select="$suffix"/>
					<xsl:with-param name="dimensionNames" select="$dimensionNames"/>
					<xsl:with-param name="dimensionValues" select="$dimensionValues"/>
					<xsl:with-param name="style" select="$style"/>
					<xsl:with-param name="tileMatrixSet" select="$tileMatrixSet"/>
					<xsl:with-param name="tileMatrix" select="$tileMatrix"/>
					<xsl:with-param name="tileRow" select="$tileRow"/>
					<xsl:with-param name="tileCol" select="$tileCol"/>
					<xsl:with-param name="j" select="$j"/>
					<xsl:with-param name="i" select="$i"/>
					<xsl:with-param name="requestURL" select="$requestURLextended"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<ctl:function name="wmtsFunctions:encodeForUri">
		<ctl:param name="str">String to be percent-encoded.</ctl:param>
		<ctl:code>
			<xsl:value-of select="encode-for-uri($str)"/>
		</ctl:code>
	</ctl:function>	

</ctl:package>
