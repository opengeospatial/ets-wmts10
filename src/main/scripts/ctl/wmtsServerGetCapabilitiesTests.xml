<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
    xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml"
>
<!-- note:  tests are grouped by operation and type by containment in group elements created by bootstrap.xml functions.
				If you change a test type, you need to move it to its new group in the appropriate bootstrap function. -->
				
<ctl:test name="wmts:GetCapabilities.Mandatory.KVP.GET" type="Mandatory">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetCapabilities Tests for KVP GET binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Mandatory.KVP.GET</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Implemented.KVP.GET" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetCapabilities Tests for KVP GET binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Implemented.KVP.GET</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Mandatory.KVP.POST" type="Mandatory">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetCapabilities Tests for KVP POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Mandatory.KVP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/KVP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Implemented.KVP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetCapabilities Tests for KVP POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Implemented.KVP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/KVP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Mandatory.XML.POST" type="Mandatory">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetCapabilities Tests for XML POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Mandatory.XML.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/XML binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Implemented.XML.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetCapabilities Tests for XML POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Implemented.XML.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/XML binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Mandatory.SOAP.POST" type="Mandatory">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetCapabilities Tests for SOAP POST binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Mandatory.SOAP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/SOAP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Implemented.SOAP.POST" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetCapabilities Tests for SOAP.POST binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Implemented.SOAP.POST</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] POST/SOAP binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Mandatory.RESTful" type="Mandatory">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory GetCapabilities Tests for RESTful binding pass.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Mandatory.RESTful</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:GetCapabilities.Implemented.RESTful" type="MandatoryIfImplemented">
	<ctl:param name="wmts.capabilities.doc">WMTS capabilities document from bootstrap</ctl:param>
	<ctl:param name="bootstrap">Bootstrap prerequisites test results in XML</ctl:param>
	<ctl:param name="selected">Selected tests in XML</ctl:param>
	<ctl:context>wmts:server.profile.kvp.get.main</ctl:context>
	<ctl:assertion>Mandatory if Implemented GetCapabilities Tests for RESTful binding pass or are skipped because they are not implemented.</ctl:assertion>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="exists($bootstrap/*)">
				<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
					<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc" />
					<ctl:with-param name="bootstrap" select="$bootstrap" />
					<ctl:with-param name="selected" select="$selected" />
					<ctl:with-param name="testGroupElementName">GetCapabilities.Implemented.RESTful</ctl:with-param>
				</ctl:call-function>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>[SKIPPED] GET binding not supported.</ctl:message>
				<ctl:skipped />
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>


<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Mandatory" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
    2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
    3.  the response entity is a valid WMTS Service Metadata document containing all required sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with mandatory parameters with a Service Metadata document containing all sections. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:message select="concat('Sending KVP GET GetCapabilities request to ', $serviceURL, ' and validating response.' )"/>
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Request.Mandatory">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>						
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.NoService"  type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request without the mandatory service parameter with a value of WMTS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with a missing service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.NoService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="invalidQuery">request=GetCapabilities&amp;AcceptVersions=1.0.0</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">get</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.NoService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.NoService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.InvalidService"  type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of BOGUS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with an invalid service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.InvalidService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="invalidQuery">service=BOGUS&amp;request=GetCapabilities&amp;AcceptVersions=1.0.0</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">get</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.InvalidService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.InvalidService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid"  type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions supported by the server, with preferred versions listed first;
	3.  the specification version(s) in the value of the AcceptVersions parameter contain three non-negative integers separated by decimal points, in the form "x.y.z". The integers y and z shall not exceed 99.
	4.  the response entity has an &lt;ows:Capabilities&gt; element that contains a version attribute with a version number value that matches the first version listed in the request AcceptVersions parameter</ctl:assertion>
	<ctl:comment>Test that a WMTS server performs version negotiation with a client correctly; that it replies to a KVP GET GetCapabilities request containing the optional AcceptVersions parameter with a valid version value(s) that are supported by the server, with a valid ServiceMetadata document for the first such version. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.AcceptVersions.Valid">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions not supported by the server, with preferred versions listed first;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "VersionNegotiationFailed".
	5.  the response entity does not contain a locator attribute.
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server issues a valid exception report and HTTP status code in response to a KVP GET GetCapabilities request containing the optional AcceptVersions parameter with a version value not supported by the server. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.AcceptVersions.Invalid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptVersions.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  The test generates valid KVP GET GetCapabilities requests with request, service, and version parameters with values of "GetCapabilities", "WMTS", and "1.0.0" respectively, with parameter names using various combinations of cases, with a variety of parameter sequences;
	2.  the response entities for all requests are identical.</ctl:assertion>
	<ctl:comment>Test that a WMTS server provides the same response no matter what upper and lower case capitalization conventions are used for KVP GET parameter names, and no matter what order the parameters are provided in. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:GetCapabilities.Request.CaseInsensitive.KVP.Names">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.CaseInsensitive.KVP.Names test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.All" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is All
	3.  the response entity is a valid WMTS Service Metadata document containing all sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a complete Service Metadata document in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of All. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.All</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Sections.All">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.All not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.All test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceIdentification
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceIdentification section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceIdentification section in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of ServiceIdentification. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceIdentification</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.ServiceIdentification test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceProvider
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceProvider section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceProvider section in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of ServiceProvider.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceProvider</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.ServiceProvider test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is OperationsMetadata
	3.  the response entity is a valid WMTS Service Metadata document containing only the OperationsMetadata section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the OperationsMetadata section in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of OperationsMetadata.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">OperationsMetadata</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.OperationsMetadata test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Contents" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents section in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of Contents.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.Contents</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Contents not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Contents test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Themes" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Themes section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Themes section in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of Themes.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.Themes</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Themes</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Themes not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Themes test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Multiple" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents,Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents and Themes sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents and Themes sections in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value containing multiple sections, i.e. Contents,Themes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.Multiple</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents,Themes</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Multiple not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Multiple test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Bogus
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a value of Bogus.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending KVP GET GetCapabilities request with optional parameter sections=Bogus and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=Bogus&amp;ACCEPTVERSIONS=1.0.0</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">get</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped:  Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.Sections.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is missing
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a KVP GET GetCapabilities request containing the optional Sections parameter with a missing value. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.Sections.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending KVP GET GetCapabilities request with optional parameter sections with a missing parameter value and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=&amp;acceptVERSIONs=1.0.0</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">get</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped: Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.Sections.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.UpdateSequence" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="updateSequence">updateSequence attribute value from bootstrap capabilities document</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Operation Request and Service Metadata updateSequence values are equal
        a.  the request entity is a valid KVP GET GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is equal to the value of the request UpdateSequence parameter value.
        c.  the response entity is a Service Metadata document with only version and updateSequence parameters.
    2.  Operation Request updateSequence value is less than Service Metadata updateSequence value.
        a.  the request entity is a valid KVP GET GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is greater than the value of the request UpdateSequence parameter value.
        c.  the response entity is the most recent Service Metadata document.
    3.  Operation Request updateSequence value is greater than Service Metadata updateSequence value.
        a.  the request entity is a valid KVP GET GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is less than the value of the request UpdateSequence parameter value.
        c.  the response entity is a schema-valid ows:Exception document.
        d.  the response entity contains an exceptionCode attribute value of "InvalidUpdateSequence".
        e.  the response entity does not contain a locator attribute.
         f.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for generating and using the updateSequence parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.UpdateSequence</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.UpdateSequence">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="updateSequence" select="$updateSequence"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.UpdateSequence not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.UpdateSequence test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Request.AcceptFormats" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="acceptFormats">comma separated list of values from capabilties document elements wmts:Capabilities/ows:OperationsMetadata/ows:Parameter[@name='AcceptFormats']/ows:AllowedValues/ows:Value</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Request AcceptFormats parameter value is supported by the server.
        a.  the request entity is a valid KVP GET GetCapabilities request with the optional AcceptFormats parameter with a value that is listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded in the requested format.
    2.  Request AcceptFormats parameter value is not supported by the server.
        a.  the request entity is a valid KVP GET GetCapabilities request with the optional AcceptFormats parameter with a value that is not listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded as application/xml.</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for format selection, if the server implements the AcceptFormats request parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Request.AcceptFormats</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="acceptFormatsList" select="tokenize(concat($acceptFormats, ',bogus/xml'), ',')"/>
						<xsl:variable name="acceptFormatResults">
							<xsl:for-each select="$acceptFormatsList">
								<ctl:call-function name="owsFunctions:KVP.GetCapabilities.AcceptFormats">
									<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
									<ctl:with-param name="method">get</ctl:with-param>
									<ctl:with-param name="service">WMTS</ctl:with-param>
									<ctl:with-param name="format" select="."/>
									<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
								</ctl:call-function>
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="contains($acceptFormatResults, 'false')">
								<ctl:message>One or more tests of optional acceptFormats parameter failed.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Tests of optional acceptFormats parameter passed.</ctl:message>
								<ctl:pass/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptFormats not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Request.AcceptFormats test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a well-formed XML document.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with mandatory parameters with a Service Metadata document that is well-formed XML. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.XML.Well.Formed">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.XML.Well.Formed test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.SchemaReferenced" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity references a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with mandatory parameters with a Service Metadata document that references the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.SchemaReferenced</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.SchemaReferenced">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemas">wmts.xsd,wmtsGetCapabilities_response.xsd</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.SchemaReferenced not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.SchemaReferenced test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.SchemaValid" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is schema-valid with respect to a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP GET GetCapabilities request with mandatory parameters with a Service Metadata document that is schema-valid with respect to the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.SchemaValid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.SchemaValid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.SchemaValid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.SchemaValid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity contains an optional &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element with the value application/xml for the &lt;ows:Operation name="GetCapabilities"&gt; operation.</ctl:assertion>
	<ctl:comment>Verify that the WMTS server advertises the application/xml format for the GetCapabilities operation. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.AdvertisedFormat">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="requiredFormat">application/xml</ctl:with-param>
						</ctl:call-function>				
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.AdvertisedFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.OnlineResource" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt; xlink:href attribute values are all URL prefixes.</ctl:assertion>
	<ctl:comment>Verify that each OnlineResource URL intended for HTTP Get requests in the ServiceMetadata document is a URL prefix. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.OnlineResource</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.OnlineResource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.OnlineResource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.OnlineResource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt;&lt;ows:Constraint&gt; element name attribute has a value of "GetEncoding" and a grandchild &lt;ows:AllowedValues&gt;&lt;ows:Value&gt; element with a value of "KVP". </ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for using the ows:Constraint GetEncoding parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:GetCapabilities.Response.Encoding.Constraint">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="encoding">KVP</ctl:with-param>						
						</ctl:call-function>

					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Encoding.Constraint test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values are all different non empty identifiers. </ctl:assertion>
	<ctl:comment>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; elements must have valid values for the following attributes:
		a.  format - must be a MIME type supported output format for the legend image
		b.  xlink:href - must reference an image of the specified format.
		c.  minScaleDenominator - must be the denominator of the minimum scale (inclusive) for which this legend image is valid, and must equal a &lt;wmts:ScaleDenominator&gt; from one of the &lt;wmts:TileMatrix&gt;s from one of the &lt;wmts:TileMatrixSet&gt;s for the &lt;wmts:Layer&gt;.
		d.  maxScaleDenominator - must be the denominator of the maximum scale (exclusive) for which this legend image is valid, and must equal a &lt;wmts:ScaleDenominator&gt; from one of the &lt;wmts:TileMatrix&gt;s from one of the &lt;wmts:TileMatrixSet&gt;s for the &lt;wmts:Layer&gt;.
		e.  width - must be the width (in pixels) of the legend image
		f.  height - must be the height (in pixels) of the legend image</ctl:assertion>
	<ctl:comment>Verify that the metadata for each of the LegendURL resources is correct. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Resource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the formats specified in the format attributes. </ctl:assertion>
	<ctl:comment>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions.KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	2.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the sizes specified in the width and heigth attributes. </ctl:assertion>
	<ctl:comment>Verify that the size of the LegendURL resource is the advertised width and the advertised height. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.LegendURL.Correct.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	2.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; element text values refer to &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values. </ctl:assertion>
	<ctl:comment>>></ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Layer.TileMatrixSet.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>		
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique within each TileMatrixSet </ctl:assertion>
	<ctl:comment>Verify that TileMatrix elements have different non empty identifiers within each TileMatrixSet. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrix.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ScaleDenominator&gt; element text values are non-empty and unique for each &lt;TileMatrixSet&gt;. </ctl:assertion>
	<ctl:comment>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>	
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the &lt;TileMatrixSet&gt;&lt;SupportedCRS&gt; element value must match the CRS for the well known scale set:
	Well Known Scale Set					Coordinate Reference System (CRS)
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale		urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel		urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad		urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible		urn:ogc:def:crs:EPSG:6.18:3:3857
	4.  each &lt;Contents&gt;&lt;TileMatrixSet&gt; in the response entity that contains a &lt;WellKnownScaleSet&gt; must have &lt;TileMatrix&gt; elements with &lt;ScaleDenominator&gt; element text values for each &lt;TileMatrixSet&gt; starting from the largest scale denominator in the WellKnownScaleSet table in Annex E, and all intermediate scales denominators down to some ScaleDenominator minimum value for Layers that reference the TileMatrixSet. </ctl:assertion>
	<ctl:comment>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP GET GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Themes&gt;&lt;Theme&gt;&lt;LayerRef&gt; element text values refer to &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Theme.LayerRef.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.GET.GetCapabilities.Response.Theme.LayerRef.Valid test skipped because its prerequisites were not met (see ATS).</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a valid WMTS Service Metadata document containing all sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with mandatory parameters with a Service Metadata document containing all sections. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:message select="concat('Sending KVP GET GetCapabilities request to ', $serviceURL, ' and validating response.' )"/>
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Request.Mandatory">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>						
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.NoService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request without the mandatory service parameter with a value of WMTS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with a missing service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.NoService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="invalidQuery">request=GetCapabilities</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">post</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.NoService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.NoService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.InvalidService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of BOGUS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with an invalid service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.InvalidService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="invalidQuery">service=BOGUS&amp;request=GetCapabilities</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">post</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.InvalidService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.InvalidService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions supported by the server, with preferred versions listed first;
	3.  the specification version(s) in the value of the AcceptVersions parameter contain three non-negative integers separated by decimal points, in the form "x.y.z". The integers y and z shall not exceed 99.
	4  the response entity has an &lt;ows:Capabilities&gt; element that contains a version attribute with a version number value that matches the first version listed in the request AcceptVersions parameter</ctl:assertion>
	<ctl:comment>Test that a WMTS server performs version negotiation with a client correctly; that it replies to a KVP POST GetCapabilities request containing the optional AcceptVersions parameter with a valid version value(s) that are supported by the server, with a valid ServiceMetadata document for the first such version. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.AcceptVersions.Valid">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions not supported by the server, with preferred versions listed first;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "VersionNegotiationFailed".
	5.  the response entity does not contain a locator attribute.
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server issues a valid exception report and HTTP status code in response to a KVP POST GetCapabilities request containing the optional AcceptVersions parameter with a version value not supported by the server. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.AcceptVersions.Invalid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptVersions.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the test generates valid KVP POST GetCapabilities requests with request, service, and version parameters with values of "GetCapabilities", "WMTS", and "1.0.0" respectively, with parameter names using various combinations of cases, with a variety of parameter sequences;
	2.  the response entities for all requests are identical.</ctl:assertion>
	<ctl:comment>Test that a WMTS server provides the same response no matter what upper and lower case capitalization conventions are used for KVP POST parameter names, and no matter what order the parameters are provided in. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:GetCapabilities.Request.CaseInsensitive.KVP.Names">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.CaseInsensitive.KVP.Names test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.All" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is All
	3.  the response entity is a valid WMTS Service Metadata document containing all sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a complete Service Metadata document in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of All. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.All</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Sections.All">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.All not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.All test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceIdentification
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceIdentification section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceIdentification section in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of ServiceIdentification. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceIdentification</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.ServiceIdentification test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceProvider
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceProvider section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceProvider section in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of ServiceProvider.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceProvider</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.ServiceProvider test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is OperationsMetadata
	3.  the response entity is a valid WMTS Service Metadata document containing only the OperationsMetadata section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the OperationsMetadata section in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of OperationsMetadata.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">OperationsMetadata</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.OperationsMetadata test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Contents" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents section in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of Contents.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.Contents</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Contents not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Contents test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Themes" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Themes section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Themes section in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of Themes.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.Themes</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Themes</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Themes not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Themes test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Multiple" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents,Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents and Themes sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents and Themes sections in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value containing multiple sections, i.e. Contents,Themes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.Multiple</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents,Themes</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Multiple not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Multiple test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a value of Bogus.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending KVP POST GetCapabilities request with optional parameter sections=Bogus and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=Bogus</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">post</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped:  Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.Sections.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is missing
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a KVP POST GetCapabilities request containing the optional Sections parameter with a missing value. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.Sections.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending KVP POST GetCapabilities request with optional parameter sections with a missing parameter value and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeKVPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidQuery" select="$invalidQuery"/>
								<ctl:with-param name="method">get</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped: Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.Sections.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.UpdateSequence" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="updateSequence">updateSequence attribute value from bootstrap capabilities document</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Operation Request and Service Metadata updateSequence values are equal
        a.  the request entity is a valid KVP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is equal to the value of the request UpdateSequence parameter value.
        c.  the response entity is a Service Metadata document with only version and updateSequence parameters.
    2.  Operation Request updateSequence value is less than Service Metadata updateSequence value.
        a.  the request entity is a valid KVP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is greater than the value of the request UpdateSequence parameter value.
        c.  the response entity is the most recent Service Metadata document.
    3.  Operation Request updateSequence value is greater than Service Metadata updateSequence value.
        a.  the request entity is a valid KVP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is less than the value of the request UpdateSequence parameter value.
        c.  the response entity is a schema-valid ows:Exception document.
        d.  the response entity contains an exceptionCode attribute value of "InvalidUpdateSequence".
        e.  the response entity does not contain a locator attribute.
        f.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for generating and using the updateSequence parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.UpdateSequence</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Request.UpdateSequence">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="updateSequence" select="$updateSequence"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.UpdateSequence not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.UpdateSequence test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Request.AcceptFormats" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="acceptFormats">comma separated list of values from capabilties document elements wmts:Capabilities/ows:OperationsMetadata/ows:Parameter[@name='AcceptFormats']/ows:AllowedValues/ows:Value</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Request AcceptFormats parameter value is supported by the server.
        a.  the request entity is a valid KVP POST GetCapabilities request with the optional AcceptFormats parameter with a value that is listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded in the requeested format.
    2.  Request AcceptFormats parameter value is not supported by the server.
        a.  the request entity is a valid KVP POST GetCapabilities request with the optional AcceptFormats parameter with a value that is not listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded as application/xml.</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for format selection, if the server implements the AcceptFormats request parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Request.AcceptFormats</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="acceptFormatsList" select="tokenize(concat($acceptFormats, ',bogus/xml'), ',')"/>
						<xsl:variable name="acceptFormatResults">
							<xsl:for-each select="$acceptFormatsList">
								<ctl:call-function name="owsFunctions:KVP.GetCapabilities.AcceptFormats">
									<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
									<ctl:with-param name="method">post</ctl:with-param>
									<ctl:with-param name="service">WMTS</ctl:with-param>
									<ctl:with-param name="format" select="."/>
									<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
								</ctl:call-function>
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="contains($acceptFormatResults, 'false')">
								<ctl:message>One or more tests of optional acceptFormats parameter failed.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Tests of optional acceptFormats parameter passed.</ctl:message>
								<ctl:pass/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptFormats not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Request.AcceptFormats test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a well-formed XML document.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with mandatory parameters with a Service Metadata document that is well-formed XML. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.XML.Well.Formed">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.XML.Well.Formed test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.SchemaReferenced" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity references a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with mandatory parameters with a Service Metadata document that references the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.SchemaReferenced</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.SchemaReferenced">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemas">wmts.xsd,wmtsGetCapabilities_response.xsd</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.SchemaReferenced not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.SchemaReferenced test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.SchemaValid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is schema-valid with respect to a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a KVP POST GetCapabilities request with mandatory parameters with a Service Metadata document that is schema-valid with respect to the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.SchemaValid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.SchemaValid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.SchemaValid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.SchemaValid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity contains an optional &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element with the value application/xml for the &lt;ows:Operation name="GetCapabilities"&gt; operation.</ctl:assertion>
	<ctl:comment>Verify that the WMTS server advertises the application/xml format for the GetCapabilities operation. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.AdvertisedFormat">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="requiredFormat">application/xml</ctl:with-param>
						</ctl:call-function>				
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.AdvertisedFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.OnlineResource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt; xlink:href attribute values are all URL prefixes.</ctl:assertion>
	<ctl:comment>Verify that each OnlineResource URL intended for HTTP Get requests in the ServiceMetadata document is a URL prefix. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.OnlineResource</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:KVP.GetCapabilities.Response.OnlineResource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">get</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.OnlineResource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.OnlineResource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt;&lt;ows:Constraint&gt; element name attribute has a value of "PostEncoding" and a grandchild &lt;ows:AllowedValues&gt;&lt;ows:Value&gt; element with a value of "KVP".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for using the ows:Constraint PostEncoding parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:GetCapabilities.Response.Encoding.Constraint">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="encoding">KVP</ctl:with-param>						
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Encoding.Constraint test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values are all different non empty identifiers.</ctl:assertion>
	<ctl:comment>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; elements must have valid values for the following attributes:
		a.  format - must be a MIME type supported output format for the legend image
		b.  xlink:href - must reference an image
		c.  minScaleDenominator - must be the denominator of the minimum scale (inclusive) for which this legend image is valid
		d.  maxScaleDenominator - must be the denominator of the maximum scale (exclusive) for which this legend image is valid
		e.  width - must be the width (in pixels) of the legend image
		f.  height - must be the height (in pixels) of the legend image</ctl:assertion>
	<ctl:comment>Verify that the metadata for each of the LegendURL resources is correct. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the formats specified in the format attributes.</ctl:assertion>
	<ctl:comment>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions.KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the sizes specified in the width and heigth attributes.</ctl:assertion>
	<ctl:comment>Verify that the size of the LegendURL resource is the advertised width and the advertised height. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; element text values refer to &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>		
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrix elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ScaleDenominator&gt; element text values are non-empty and unique for each &lt;TileMatrixSet&gt;.</ctl:assertion>
	<ctl:comment>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>	
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the &lt;TileMatrixset&gt;&lt;SupportedCRS&gt; element value must match the CRS for the well known scale set:
	Well Known Scale Set													Coordinate Reference System (CRS)
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel				urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible		urn:ogc:def:crs:EPSG:6.18:3:3857
	4.  each &lt;Contents&gt;&lt;TileMatrixSet&gt; in the response entity that contains a &lt;WellKnownScaleSet&gt; must have &lt;TileMatrix&gt; elements with &lt;ScaleDenominator&gt; element text values for each &lt;TileMatrixSet&gt; starting from the largest scale denominator in the WellKnownScaleSet table in Annex E, and all intermediate scales denominators down to some ScaleDenominator minimum value for Layers that reference the TileMatrixSet.</ctl:assertion>
	<ctl:comment>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid KVP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Themes&gt;&lt;Theme&gt;&lt;LayerRef&gt; element text values refer to &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:KVP.GetCapabilities.Response.Theme.LayerRef.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.KVP.POST.GetCapabilities.Response.Theme.LayerRef.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a valid WMTS Service Metadata document containing all sections.	</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with mandatory parameters with a Service Metadata document containing all sections. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:message select="concat('Sending XML POST GetCapabilities request to ', $serviceURL, ' and validating response.' )"/>
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Request.Mandatory">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>						
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.NoService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request without the mandatory service parameter with a value of WMTS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with a missing service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.NoService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeXMLException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<GetCapabilities  xmlns="http://www.opengis.net/wmts/1.0" />
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.NoService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.NoService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.InvalidService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of BOGUS;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with an invalid service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.InvalidService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeXMLException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<GetCapabilities service="BOGUS" xmlns="http://www.opengis.net/wmts/1.0" />
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.InvalidService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.InvalidService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions supported by the server, with preferred versions listed first;
	3.  the specification version(s) in the value of the AcceptVersions parameter contain three non-negative integers separated by decimal points, in the form "x.y.z". The integers y and z shall not exceed 99.
	4.  the response entity has an &lt;ows:Capabilities&gt; element that contains a version attribute with a version number value that matches the first version listed in the request AcceptVersions parameter</ctl:assertion>
	<ctl:comment>Test that a WMTS server performs version negotiation with a client correctly; that it replies to a XML POST GetCapabilities request containing the optional AcceptVersions parameter with a valid version value(s) that are supported by the server, with a valid ServiceMetadata document for the first such version. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.AcceptVersions.Valid">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptVersions.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions not supported by the server, with preferred versions listed first;
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "VersionNegotiationFailed".
	5.  the response entity does not contain a locator attribute.
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server issues a valid exception report and HTTP status code in response to a XML POST GetCapabilities request containing the optional AcceptVersions parameter with a version value not supported by the server. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.AcceptVersions.Invalid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptVersions.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.All" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is All
	3.  the response entity is a valid WMTS Service Metadata document containing all sections.	</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a complete Service Metadata document in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of All. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.All</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Sections.All">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.All not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.All test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceIdentification
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceIdentification section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceIdentification section in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of ServiceIdentification. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceIdentification</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.ServiceIdentification test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceProvider
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceProvider section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceProvider section in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of ServiceProvider.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceProvider</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.ServiceProvider test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is OperationsMetadata
	3.  the response entity is a valid WMTS Service Metadata document containing only the OperationsMetadata section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the OperationsMetadata section in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of OperationsMetadata.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">OperationsMetadata</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.OperationsMetadata test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Contents" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents section in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of Contents.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.Contents</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Contents not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Contents test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Themes" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Themes section.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Themes section in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of Themes.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.Themes</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Themes</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Themes not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Themes test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Multiple" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents,Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents and Themes sections.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents and Themes sections in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value containing multiple sections, i.e. Contents,Themes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.Multiple</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents,Themes</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Multiple not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Multiple test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a XML POST GetCapabilities request containing the optional Sections parameter with a value of Bogus.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending XML POST GetCapabilities request with optional parameter sections=Bogus and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=Bogus</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeXMLException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<ows:GetCapabilities service="WMTS"  xmlns:ows="http://www.opengis.net/ows/1.1" >
										<ows:Sections>
											<ows:Section>Bogus</ows:Section>
										</ows:Sections>
									</ows:GetCapabilities> 
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped:  Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.Sections.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is missing
	3.  the response entity is a schema-valid ows:Exception document.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a XML POST GetCapabilities request containing the optional Sections parameter with a missing value. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.Sections.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending XML POST GetCapabilities request with optional parameter sections with a missing parameter value and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeXMLException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<ows:GetCapabilities service="WMTS"  xmlns:ows="http://www.opengis.net/ows/1.1" >
										<ows:Sections>
											<ows:Section/>
										</ows:Sections>
									</ows:GetCapabilities> 
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped: Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.Sections.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.UpdateSequence" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="updateSequence">updateSequence attribute value from bootstrap capabilities document</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Operation Request and Service Metadata updateSequence values are equal
        a.  the request entity is a valid XML POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is equal to the value of the request UpdateSequence parameter value.
        c.  the response entity is a Service Metadata document with only version and updateSequence parameters.
    2.  Operation Request updateSequence value is less than Service Metadata updateSequence value.
        a.  the request entity is a valid XML POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is greater than the value of the request UpdateSequence parameter value.
        c.  the response entity is the most recent Service Metadata document.
    3.  Operation Request updateSequence value is greater than Service Metadata updateSequence value.
        a.  the request entity is a valid XML POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is less than the value of the request UpdateSequence parameter value.
        c.  the response entity is a schema-valid ows:Exception document.
        d.  the response entity contains an exceptionCode attribute value of "InvalidUpdateSequence".
        e.  the response entity does not contain a locator attribute.
        f.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for generating and using the updateSequence parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.UpdateSequence</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Request.UpdateSequence">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="updateSequence" select="$updateSequence"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.UpdateSequence not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.UpdateSequence test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Request.AcceptFormats" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="acceptFormats">comma separated list of values from capabilties document elements wmts:Capabilities/ows:OperationsMetadata/ows:Parameter[@name='AcceptFormats']/ows:AllowedValues/ows:Value</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Request AcceptFormats parameter value is supported by the server.
        a.  the request entity is a valid XML POST GetCapabilities request with the optional AcceptFormats parameter with a value that is listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded in the requeested format.
    2.  Request AcceptFormats parameter value is not supported by the server.
        a.  the request entity is a valid XML POST GetCapabilities request with the optional AcceptFormats parameter with a value that is not listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded as application/xml.</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for format selection, if the server implements the AcceptFormats request parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Request.AcceptFormats</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="acceptFormatsList" select="tokenize(concat($acceptFormats, ',bogus/xml'), ',')"/>
						<xsl:variable name="acceptFormatResults">
							<xsl:for-each select="$acceptFormatsList">
								<ctl:call-function name="owsFunctions:XML.GetCapabilities.AcceptFormats">
									<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
									<ctl:with-param name="service">WMTS</ctl:with-param>
									<ctl:with-param name="format" select="."/>
									<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
								</ctl:call-function>
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="contains($acceptFormatResults, 'false')">
								<ctl:message>One or more tests of optional acceptFormats parameter failed.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Tests of optional acceptFormats parameter passed.</ctl:message>
								<ctl:pass/>
							</xsl:otherwise>
						</xsl:choose>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptFormats not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Request.AcceptFormats test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.XML.Well.Formed" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a well-formed XML document.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with mandatory parameters with a Service Metadata document that is well-formed XML. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.XML.Well.Formed</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.XML.Well.Formed">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.XML.Well.Formed not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.XML.Well.Formed test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.SchemaReferenced" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity references a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with mandatory parameters with a Service Metadata document that references the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.SchemaReferenced</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.SchemaReferenced">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemas">wmts.xsd,wmtsGetCapabilities_response.xsd</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.SchemaReferenced not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.SchemaReferenced test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.SchemaValid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is schema-valid with respect to a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a XML POST GetCapabilities request with mandatory parameters with a Service Metadata document that is schema-valid with respect to the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.SchemaValid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.SchemaValid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="schemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.SchemaValid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.SchemaValid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.AdvertisedFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity contains an optional &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element with the value application/xml for the &lt;ows:Operation name="GetCapabilities"&gt; operation.</ctl:assertion>
	<ctl:comment>Verify that the WMTS server advertises the application/xml format for the GetCapabilities operation. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.AdvertisedFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.AdvertisedFormat">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="requiredFormat">application/xml</ctl:with-param>
						</ctl:call-function>				
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.AdvertisedFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.AdvertisedFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.OnlineResource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt; xlink:href attribute values are all URL prefixes.</ctl:assertion>
	<ctl:comment>Verify that each OnlineResource URL intended for HTTP Get requests in the ServiceMetadata document is a URL prefix. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.OnlineResource</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.OnlineResource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.OnlineResource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.OnlineResource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Encoding.Constraint" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt;&lt;ows:Constraint&gt; element name attribute has a value of "PostEncoding" and a grandchild &lt;ows:AllowedValues&gt;&lt;ows:Value&gt; element with a value of "XML".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for using the ows:Constraint PostEncoding parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Encoding.Constraint</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:XML.GetCapabilities.Response.Encoding.Constraint">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Encoding.Constraint not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Encoding.Constraint test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values are all different non empty identifiers.</ctl:assertion>
	<ctl:comment>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; elements must have valid values for the following attributes:
		a.  format - must be a MIME type supported output format for the legend image
		b.  xlink:href - must reference an image
		c.  minScaleDenominator - must be the denominator of the minimum scale (inclusive) for which this legend image is valid
		d.  maxScaleDenominator - must be the denominator of the maximum scale (exclusive) for which this legend image is valid
		e.  width - must be the width (in pixels) of the legend image
		f.  height - must be the height (in pixels) of the legend image</ctl:assertion>
	<ctl:comment>Verify that the metadata for each of the LegendURL resources is correct. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the formats specified in the format attributes.</ctl:assertion>
	<ctl:comment>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions.XML.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes must have the sizes specified in the width and heigth attributes.</ctl:assertion>
	<ctl:comment>Verify that the size of the LegendURL resource is the advertised width and the advertised height. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; element text values refer to &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>		
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
    2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
    3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ows:Identifier&gt; element text values are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrix elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ScaleDenominator&gt; element text values are non-empty and unique for each &lt;TileMatrixSet&gt;.</ctl:assertion>
	<ctl:comment>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>	
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the &lt;TileMatrixset&gt;&lt;SupportedCRS&gt; element value must match the CRS for the well known scale set:
	Well Known Scale Set													Coordinate Reference System (CRS)
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel				urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible		urn:ogc:def:crs:EPSG:6.18:3:3857
	3.  each &lt;Contents&gt;&lt;TileMatrixSet&gt; in the response entity that contains a &lt;WellKnownScaleSet&gt; must have &lt;TileMatrix&gt; elements with &lt;ScaleDenominator&gt; element text values for each &lt;TileMatrixSet&gt; starting from the largest scale denominator in the WellKnownScaleSet table in Annex E, and all intermediate scales denominators down to some ScaleDenominator minimum value for Layers that reference the TileMatrixSet.</ctl:assertion>
	<ctl:comment>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid XML POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity &lt;Themes&gt;&lt;Theme&gt;&lt;LayerRef&gt; element text values refer to &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:XML.GetCapabilities.Response.Theme.LayerRef.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.XML.POST.GetCapabilities.Response.Theme.LayerRef.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a valid WMTS Service Metadata document containing all sections, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with mandatory parameters with a Service Metadata document containing all sections.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:message select="concat('Sending SOAP POST GetCapabilities request to ', $serviceURL, ' and validating response.' )"/>
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Request.Mandatory">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>						
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.NoService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request without the mandatory service parameter with a value of WMTS;
	3.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with a missing service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.NoService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeSOAPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<GetCapabilities xmlns="http://www.opengis.net/wmts/1.0" />
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.NoService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.NoService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.InvalidService" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of BOGUS;
	3.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "service".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with an invalid service parameter with a valid exception report and HTTP status code. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.InvalidService</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeSOAPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<GetCapabilities service="BOGUS" xmlns="http://www.opengis.net/wmts/1.0" />
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">service</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.InvalidService not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.InvalidService test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions supported by the server, with preferred versions listed first;
	3.  the specification version(s) in the value of the AcceptVersions parameter contain three non-negative integers separated by decimal points, in the form "x.y.z". The integers y and z shall not exceed 99.
	4.  the response entity has an &lt;ows:Capabilities&gt; element that contains a version attribute with a version number value that matches the first version listed in the request AcceptVersions parameter, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server performs version negotiation with a client correctly; that it replies to a SOAP POST GetCapabilities request containing the optional AcceptVersions parameter with a valid version value(s) that are supported by the server, with a valid ServiceMetadata document for the first such version. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.AcceptVersions.Valid">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="method">post</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional AcceptVersions parameter;
	2.  the specification version(s) in the value of the AcceptVersions parameter is a comma-separated prioritized sequence of one or more specification versions not supported by the server, with preferred versions listed first;
	3.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	4.  the response entity contains an exceptionCode attribute value of "VersionNegotiationFailed".
	5.  the response entity does not contain a locator attribute.
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server issues a valid exception report and HTTP status code in response to a SOAP POST GetCapabilities request containing the optional AcceptVersions parameter with a version value not supported by the server. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.AcceptVersions.Invalid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptVersions.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.All" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is All
	3.  the response entity is a valid WMTS Service Metadata document containing all sections, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a complete Service Metadata document in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of All. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.All</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Sections.All">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.All not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.All test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceIdentification
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceIdentification section, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceIdentification section in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of ServiceIdentification. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceIdentification</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceIdentification test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is ServiceProvider
	3.  the response entity is a valid WMTS Service Metadata document containing only the ServiceProvider section, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the ServiceProvider section in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of ServiceProvider.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">ServiceProvider</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.ServiceProvider test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1. the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is OperationsMetadata
	3.  the response entity is a valid WMTS Service Metadata document containing only the OperationsMetadata section, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the OperationsMetadata section in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of OperationsMetadata.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">OperationsMetadata</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.OperationsMetadata test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Contents" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents section, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents section in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of Contents.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.Contents</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Contents not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Contents test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Themes" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Themes section, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Themes section in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of Themes.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.Themes</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Themes</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Themes not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Themes test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Contents,Themes
	3.  the response entity is a valid WMTS Service Metadata document containing only the Contents and Themes sections, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a Service Metadata document containing only the Contents and Themes sections in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value containing multiple sections, i.e. Contents,Themes. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.Specific.Sections">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="sections">Contents,Themes</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Multiple test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is Themes
	3.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	4.  the response entity contains an exceptionCode attribute value of "InvalidParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a value of Bogus.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending SOAP POST GetCapabilities request with optional parameter sections=Bogus and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=Bogus</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeSOAPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<ows:GetCapabilities service="WMTS"  xmlns:ows="http://www.opengis.net/ows/1.1" >
										<ows:Sections>
											<ows:Section>Bogus</ows:Section>
										</ows:Sections>
									</ows:GetCapabilities> 
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">InvalidParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped:  Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter value of Bogus, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Invalid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.Sections.Missing" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the optional Sections parameter;
	2.  the value of the Sections parameter is missing
	3.  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
	4.  the response entity contains an exceptionCode attribute value of "MissingParameterValue".
	5.  the response entity contains a locator attribute value of "sections".
	6.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Test that a WMTS server returns a valid exception report and HTTP status code in response to a SOAP POST GetCapabilities request containing the optional Sections parameter with a missing value. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.Sections.Missing</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Sending SOAP POST GetCapabilities request with optional parameter sections with a missing parameter value and validating response.</ctl:message>
						<xsl:variable name="invalidQuery">service=WMTS&amp;request=GetCapabilities&amp;sections=</xsl:variable>
						<xsl:variable name="testResult">
							<ctl:call-function name="owsFunctions:provokeSOAPException">
								<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
								<ctl:with-param name="invalidBody">
									<ows:GetCapabilities service="WMTS"  xmlns:ows="http://www.opengis.net/ows/1.1" >
										<ows:Sections>
											<ows:Section/>
										</ows:Sections>
									</ows:GetCapabilities> 
								</ctl:with-param>
								<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
								<ctl:with-param name="exceptionCodes">MissingParameterValue</ctl:with-param>
								<ctl:with-param name="locators">sections</ctl:with-param>
								<ctl:with-param name="oneOrAll">one</ctl:with-param>
							</ctl:call-function>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="$testResult = 'true' ">
								<ctl:message>Test passed:  Server returned correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value.</ctl:message>
								<ctl:pass/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Test skipped: Server did not return a correct ows:ExceptionReport and HTTP status in response to request with a sections parameter with a missing value, so sections option considered to not be implemented.</ctl:message>
								<ctl:skipped/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Missing not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.Sections.Missing test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.UpdateSequence" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="exceptionReportSchemaPath">full path to owsExceptionReport.xsd</ctl:param>
	<ctl:param name="wmtsVersion">version returned in the bootstrap capabilities document, expected to be 1.0.0</ctl:param>
	<ctl:param name="updateSequence">updateSequence attribute value from bootstrap capabilities document</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Operation Request and Service Metadata updateSequence values are equal
        a.  the request entity is a valid SOAP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is equal to the value of the request UpdateSequence parameter value.
        c.  the response entity is a Service Metadata document with only version and updateSequence parameters, wrapped in the SOAP version 1.2 envelope.
    2.  Operation Request updateSequence value is less than Service Metadata updateSequence value.
        a.  the request entity is a valid SOAP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is greater than the value of the request UpdateSequence parameter value.
        c.  the response entity is the most recent Service Metadata document, wrapped in the SOAP version 1.2 envelope.
    3.  Operation Request updateSequence value is greater than Service Metadata updateSequence value.
        a.  the request entity is a valid SOAP POST GetCapabilities request with the optional UpdateSequence parameter;
        b.  the bootstrap Service Metadata document ows:Capabilities element updateSequence attribute value is less than the value of the request UpdateSequence parameter value.
        c,  the response entity is a a SOAP 1.2 response message that contains a schema-valid ows:Exception document in the &lt;soap:Detail&gt; element.
        d.  the response entity contains an exceptionCode attribute value of "InvalidUpdateSequence".
        e.  the response entity does not contain a locator attribute.
        f.  the HTTP status code value is set to 400, corresponding to the message "Bad Request".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for generating and using the updateSequence parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.UpdateSequence</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Request.UpdateSequence">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="exceptionReportSchemaPath" select="$exceptionReportSchemaPath"/>
							<ctl:with-param name="version" select="$wmtsVersion"/>
							<ctl:with-param name="updateSequence" select="$updateSequence"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.UpdateSequence not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.UpdateSequence test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Request.AcceptFormats" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:param name="acceptFormats">comma separated list of values from capabilties document elements wmts:Capabilities/ows:OperationsMetadata/ows:Parameter[@name='AcceptFormats']/ows:AllowedValues/ows:Value</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
    1.  Request AcceptFormats parameter value is supported by the server.
        a.  the request entity is a valid SOAP POST GetCapabilities request with the optional AcceptFormats parameter with a value that is listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded in the requeested format, wrapped in the SOAP version 1.2 envelope.
    2.  Request AcceptFormats parameter value is not supported by the server.
        a.  the request entity is a valid SOAP POST GetCapabilities request with the optional AcceptFormats parameter with a value that is not listed in a &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element in the Service Metadata;
        b.  the response entity is a valid Service Metadata document encoded as application/xml, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for format selection, if the server implements the AcceptFormats request parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Request.AcceptFormats</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="acceptFormatsList" select="tokenize(concat($acceptFormats, ',bogus/xml'), ',')"/>
						<xsl:variable name="acceptFormatResults">
							<xsl:for-each select="$acceptFormatsList">
								<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.AcceptFormats">
									<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
									<ctl:with-param name="service">WMTS</ctl:with-param>
									<ctl:with-param name="format" select="."/>
									<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
								</ctl:call-function>
							</xsl:for-each>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="contains($acceptFormatResults, 'false')">
								<ctl:message>One or more tests of optional acceptFormats parameter failed.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Tests of optional acceptFormats parameter passed.</ctl:message>
								<ctl:pass/>
							</xsl:otherwise>
						</xsl:choose>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptFormats not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Request.AcceptFormats test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity is a well-formed XML document, wrapped in the SOAP version 1.2 envelope.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with mandatory parameters with a Service Metadata document that is well-formed XML. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.XML.Well.Formed">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.XML.Well.Formed test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope references a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with mandatory parameters with a Service Metadata document that references the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.SchemaReferenced">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemas">wmts.xsd,wmtsGetCapabilities_response.xsd</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.SchemaReferenced test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.SchemaValid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope is schema-valid with respect to a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.</ctl:assertion>
	<ctl:comment>Test that a WMTS server responds to a SOAP POST GetCapabilities request with mandatory parameters with a Service Metadata document that is schema-valid with respect to the normative XML schema. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.SchemaValid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.SchemaValid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.SchemaValid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.SchemaValid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope contains an optional &lt;Parameter name="AcceptFormats"&gt;&lt;AllowedValues&gt;&lt;Value&gt; child element with the value application/xml for the &lt;ows:Operation name="GetCapabilities"&gt; operation.</ctl:assertion>
	<ctl:comment>Verify that the WMTS server advertises the application/xml format for the GetCapabilities operation. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.AdvertisedFormat">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
							<ctl:with-param name="requiredFormat">application/xml</ctl:with-param>
						</ctl:call-function>				
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.AdvertisedFormat test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.OnlineResource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt; xlink:href attribute values that are all URL prefixes.</ctl:assertion>
	<ctl:comment>Verify that each OnlineResource URL intended for HTTP Get requests in the ServiceMetadata document is a URL prefix. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.OnlineResource</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.OnlineResource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.OnlineResource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.OnlineResource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has an &lt;ows:Operation&gt;&lt;ows:DCP&gt;&lt;ows:HTTP&gt;&lt;ows:Get&gt;&lt;ows:Constraint&gt; element name attribute that has a value of "PostEncoding" and a grandchild &lt;ows:AllowedValues&gt;&lt;ows:Value&gt; element with a value of "SOAP".</ctl:assertion>
	<ctl:comment>Verify that a server satisfies the requirements for using the ows:Constraint PostEncoding parameter. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="owsFunctions:SOAP.GetCapabilities.Response.Encoding.Constraint">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Encoding.Constraint test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values that are all different non empty identifiers.</ctl:assertion>
	<ctl:comment>Verify that the WMTS Layers advertised in the Service Metadata document have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2. the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; elements that must have valid values for the following attributes:
		a.  format - must be a MIME type supported output format for the legend image
		b.  xlink:href - must reference an image
		c.  minScaleDenominator - must be the denominator of the minimum scale (inclusive) for which this legend image is valid
		d.  maxScaleDenominator - must be the denominator of the maximum scale (exclusive) for which this legend image is valid
		e.  width - must be the width (in pixels) of the legend image
		f.  height - must be the height (in pixels) of the legend image</ctl:assertion>
	<ctl:comment>Verify that the metadata for each of the LegendURL resources is correct. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Resource">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Resource test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes that must have the formats specified in the format attributes.</ctl:assertion>
	<ctl:comment>Verify that the MIME-type returned for the LegendURL resource is the advertised format. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions.SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Format">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Format test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  legend images referenced via the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;Layer&gt;&lt;Style&gt;&lt;LegendURL&gt; element xlink:href attributes that must have the sizes specified in the width and heigth attributes.</ctl:assertion>
	<ctl:comment>Verify that the size of the LegendURL resource is the advertised width and the advertised height. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.LegendURL.Correct.Size">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.LegendURL.Correct.Size test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; element text values that refer to &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that Layer TileMatrixSet contains a correct identifier. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.Layer.TileMatrixSet.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Layer.TileMatrixSet.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;ows:Identifier&gt; element text values that are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrixSet elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>		
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ows:Identifier&gt; element text values that are non-empty and unique.</ctl:assertion>
	<ctl:comment>Verify that TileMatrix elements have different non empty identifiers. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrix.Identifiers.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>					
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrix.Identifiers.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Contents&gt;&lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;ScaleDenominator&gt; element text values that are non-empty and unique for each &lt;TileMatrixSet&gt;.</ctl:assertion>
	<ctl:comment>Verify that each tileMatrix of a tileMatrixSet has a unique (different) scaleDenominator. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>	
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.ScaleDenominators.Unique test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	3.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope &lt;TileMatrixset&gt;&lt;SupportedCRS&gt; element value must match the CRS for the well known scale set:
	Well Known Scale Set													Coordinate Reference System (CRS)
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Scale			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GlobalCRS84Pixel				urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad			urn:ogc:def:crs:OGC:1.3:CRS84
	urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible		urn:ogc:def:crs:EPSG:6.18:3:3857
	4.  each &lt;Contents&gt;&lt;TileMatrixSet&gt; in the response entity Capabilities document wrapped in the SOAP version 1.2 envelope that contains a &lt;WellKnownScaleSet&gt; must have &lt;TileMatrix&gt; elements with &lt;ScaleDenominator&gt; element text values for each &lt;TileMatrixSet&gt; starting from the largest scale denominator in the WellKnownScaleSet table in Annex E, and all intermediate scales denominators down to some ScaleDenominator minimum value for Layers that reference the TileMatrixSet.</ctl:assertion>
	<ctl:comment>Verify that a WellKnownScaleSet is compatible with ScaleDenominator values. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.TileMatrixSet.WellKnownScaleSet test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory request parameter with a value of GetCapabilities;
	2.  the request entity is a valid SOAP POST GetCapabilities request with the mandatory service parameter with a value of WMTS;
	3.  the response entity Capabilities document wrapped in the SOAP version 1.2 envelope has &lt;Themes&gt;&lt;Theme&gt;&lt;LayerRef&gt; element text values that refer to &lt;Contents&gt;&lt;Layer&gt;&lt;ows:Identifier&gt; element text values.</ctl:assertion>
	<ctl:comment>Verify that each Theme LayerRef element text value is equal to a Layer identifier in the content section. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:call-function name="wmtsFunctions:SOAP.GetCapabilities.Response.Theme.LayerRef.Valid">
							<ctl:with-param name="capabilitiesURL" select="$capabilitiesURL"/>
							<ctl:with-param name="service">WMTS</ctl:with-param>
						</ctl:call-function>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.SOAP.POST.GetCapabilities.Response.Theme.LayerRef.Valid test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Server.RESTful.GetCapabilities.Request.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:param name="capabilitiesURL">/wmts:Capabilities/wmts:ServiceMetadataURL/@xlink:href</ctl:param>
	<ctl:param name="wmtsSchemaPath">full path to wmts.xsd</ctl:param>
	<ctl:param name="wmtsSchemaType">url | file | resource</ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetCapabilities request invoking the ServiceMetadataURL for a complete Service Metadata document advertised by a WMTS server.
	2.  the response entity is a well-formed XML document.
	3.  the response entity references a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.
	4.  the response entity is schema-valid with respect to a normative(wmts.xsd or wmtsGetCapabilities_response.xsd) XML schema.
	5.  the response entity is a valid WMTS Service Metadata document containing all sections.
	6.  the response entity has a &lt;ServiceMetadataURL&gt; element indicating the same URL specified in the request.	</ctl:assertion>
	<ctl:comment>Test that a WMTS server can respond to a RESTful GetCapabilities request for a complete ServiceMetadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Server.RESTful.GetCapabilities.Request.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<xsl:variable name="serviceURL" select="owsFunctions:getServiceURL($capabilitiesURL)"/>
						<ctl:message select="concat('Sending RESTful GetCapabilities request to ', $serviceURL, ' and validating response.' )"/>
						<ctl:call-function name="wmtsFunctions:RESTful.GetCapabilities.Request.Mandatory">
							<ctl:with-param name="serviceURL" select="$serviceURL"/>
							<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
							<ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
						</ctl:call-function>						
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Server.RESTful.GetCapabilities.Request.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Server.RESTful.GetCapabilities.Request.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

</ctl:package>